[@@@ocaml.warning "-7-11-32-33-39"]
[@@@js.implem 
  [@@@ocaml.warning "-7-11-32-33-39"]
]
open Ts2ocaml_min
open Ts2ocaml_es

module DOMHighResTimeStamp : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module PerformanceMeasureOptions : sig
  type t = [`PerformanceMeasureOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceMeasureOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceMeasureOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMeasureOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_detail: 'tags this -> any option [@@js.get "detail"]
  val set_detail: 'tags this -> any -> unit [@@js.set "detail"]
  val get_duration: 'tags this -> DOMHighResTimeStamp.t option [@@js.get "duration"]
  val set_duration: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "duration"]
  val get_end: 'tags this -> ([`String of string | `Undefined | `Other of DOMHighResTimeStamp.t] [@js.union on_field "dummy"]) Primitive.t [@@js.get "end"]
  val set_end: 'tags this -> ([`U1 of string | `U2 of DOMHighResTimeStamp.t] [@js.union]) -> unit [@@js.set "end"]
  val get_start: 'tags this -> ([`String of string | `Undefined | `Other of DOMHighResTimeStamp.t] [@js.union on_field "dummy"]) Primitive.t [@@js.get "start"]
  val set_start: 'tags this -> ([`U1 of string | `U2 of DOMHighResTimeStamp.t] [@js.union]) -> unit [@@js.set "start"]
  val create: ?detail:any -> ?duration:DOMHighResTimeStamp.t -> ?end_:(([`String of string | `Other of DOMHighResTimeStamp.t] [@js.union on_field "dummy"]) Primitive.t[@js "end"]) -> ?start:([`String of string | `Other of DOMHighResTimeStamp.t] [@js.union on_field "dummy"]) Primitive.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the mark() method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEntry)
*)
module[@js.scope "PerformanceEntry"] PerformanceEntry : sig
  type t = [`PerformanceEntry] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceEntry]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceEntry]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEntry ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/duration) *)
  val get_duration: 'tags this -> DOMHighResTimeStamp.t [@@js.get "duration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/entryType) *)
  val get_entryType: 'tags this -> string [@@js.get "entryType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/startTime) *)
  val get_startTime: 'tags this -> DOMHighResTimeStamp.t [@@js.get "startTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of "measure". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure)
*)
module[@js.scope "PerformanceMeasure"] PerformanceMeasure : sig
  type t = [`PerformanceEntry | `PerformanceMeasure] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceEntry | `PerformanceMeasure]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceEntry | `PerformanceMeasure]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMeasure ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure/detail) *)
  val get_detail: 'tags this -> any [@@js.get "detail"]
  val create: detail:any -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module PerformanceMarkOptions : sig
  type t = [`PerformanceMarkOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceMarkOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceMarkOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMarkOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_detail: 'tags this -> any option [@@js.get "detail"]
  val set_detail: 'tags this -> any -> unit [@@js.set "detail"]
  val get_startTime: 'tags this -> DOMHighResTimeStamp.t option [@@js.get "startTime"]
  val set_startTime: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "startTime"]
  val create: ?detail:any -> ?startTime:DOMHighResTimeStamp.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  PerformanceMarkÂ is an abstract interface for PerformanceEntry objects with an entryType of "mark". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceMark)
*)
module[@js.scope "PerformanceMark"] PerformanceMark : sig
  type t = [`PerformanceEntry | `PerformanceMark] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceEntry | `PerformanceMark]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceEntry | `PerformanceMark]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMark ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceMark/detail) *)
  val get_detail: 'tags this -> any [@@js.get "detail"]
  val create: detail:any -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': markName:string -> ?markOptions:PerformanceMarkOptions.t -> unit -> t [@@js.create]
end
module PerformanceEntryList : sig
  type t = PerformanceEntry.t list
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module EventInit : sig
  type t = [`EventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_bubbles: 'tags this -> bool option [@@js.get "bubbles"]
  val set_bubbles: 'tags this -> bool -> unit [@@js.set "bubbles"]
  val get_cancelable: 'tags this -> bool option [@@js.get "cancelable"]
  val set_cancelable: 'tags this -> bool -> unit [@@js.set "cancelable"]
  val get_composed: 'tags this -> bool option [@@js.get "composed"]
  val set_composed: 'tags this -> bool -> unit [@@js.set "composed"]
  val create: ?bubbles:bool -> ?cancelable:bool -> ?composed:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module EventListenerOptions : sig
  type t = [`EventListenerOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventListenerOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventListenerOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventListenerOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_capture: 'tags this -> bool option [@@js.get "capture"]
  val set_capture: 'tags this -> bool -> unit [@@js.set "capture"]
  val create: ?capture:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortSignal)
  
  
  A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.
*)
module[@js.scope "AbortSignal"] rec AbortSignal : sig
  type t = [`AbortSignal | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbortSignal | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbortSignal | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AbortSignal ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortSignal/aborted)
    
    
    Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.
  *)
  val get_aborted: 'tags this -> bool [@@js.get "aborted"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_event) *)
  val get_onabort: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_event) *)
  val set_onabort: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortSignal/reason) *)
  val get_reason: 'tags this -> any [@@js.get "reason"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortSignal/throwIfAborted) *)
  val throwIfAborted: 'tags this -> unit [@@js.call "throwIfAborted"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AbortSignalEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AbortSignalEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort) *)
  val abort: ?reason:any -> unit -> t [@@js.global "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortSignal/timeout) *)
  val timeout: float -> t [@@js.global "timeout"]
end
and AddEventListenerOptions : sig
  type t = [`AddEventListenerOptions | `EventListenerOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AddEventListenerOptions | `EventListenerOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AddEventListenerOptions | `EventListenerOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AddEventListenerOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_once: 'tags this -> bool option [@@js.get "once"]
  val set_once: 'tags this -> bool -> unit [@@js.set "once"]
  val get_passive: 'tags this -> bool option [@@js.get "passive"]
  val set_passive: 'tags this -> bool -> unit [@@js.set "passive"]
  val get_signal: 'tags this -> AbortSignal.t option [@@js.get "signal"]
  val set_signal: 'tags this -> AbortSignal.t -> unit [@@js.set "signal"]
  val create: ?once:bool -> ?passive:bool -> ?signal:AbortSignal.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  An event which takes place in the DOM.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event)
*)
and[@js.scope "Event"] Event : sig
  type t = [`Event] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Event ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/bubbles)
  *)
  val get_bubbles: 'tags this -> bool [@@js.get "bubbles"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/cancelBubble) *)
  val get_cancelBubble: 'tags this -> bool [@@js.get "cancelBubble"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/cancelBubble) *)
  val set_cancelBubble: 'tags this -> bool -> unit [@@js.set "cancelBubble"]
  
  (**
    Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/cancelable)
  *)
  val get_cancelable: 'tags this -> bool [@@js.get "cancelable"]
  
  (**
    Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/composed)
  *)
  val get_composed: 'tags this -> bool [@@js.get "composed"]
  
  (**
    Returns the object whose event listener's callback is currently being invoked.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/currentTarget)
  *)
  val get_currentTarget: 'tags this -> EventTarget.t option [@@js.get "currentTarget"]
  
  (**
    Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/defaultPrevented)
  *)
  val get_defaultPrevented: 'tags this -> bool [@@js.get "defaultPrevented"]
  
  (**
    Returns the event's phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/eventPhase)
  *)
  val get_eventPhase: 'tags this -> float [@@js.get "eventPhase"]
  
  (**
    Returns true if event was dispatched by the user agent, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/isTrusted)
  *)
  val get_isTrusted: 'tags this -> bool [@@js.get "isTrusted"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/returnValue) *)
  val get_returnValue: 'tags this -> bool [@@js.get "returnValue"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/returnValue) *)
  val set_returnValue: 'tags this -> bool -> unit [@@js.set "returnValue"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/srcElement) *)
  val get_srcElement: 'tags this -> EventTarget.t option [@@js.get "srcElement"]
  
  (**
    Returns the object to which event is dispatched (its target).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/target)
  *)
  val get_target: 'tags this -> EventTarget.t option [@@js.get "target"]
  
  (**
    Returns the event's timestamp as the number of milliseconds measured relative to the time origin.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/timeStamp)
  *)
  val get_timeStamp: 'tags this -> DOMHighResTimeStamp.t [@@js.get "timeStamp"]
  
  (**
    Returns the type of event, e.g. "click", "hashchange", or "submit".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/type)
  *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (**
    Returns the invocation target objects of event's path (objects on which listeners will be invoked), except for any nodes in shadow trees of which the shadow root's mode is "closed" that are not reachable from event's currentTarget.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/composedPath)
  *)
  val composedPath: 'tags this -> EventTarget.t list [@@js.call "composedPath"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/initEvent) *)
  val initEvent: 'tags this -> type_:string -> ?bubbles:bool -> ?cancelable:bool -> unit -> unit [@@js.call "initEvent"]
  
  (**
    If invoked when the cancelable attribute value is true, and while executing a listener for the event with passive set to false, signals to the operation that caused event to be dispatched that it needs to be canceled.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/preventDefault)
  *)
  val preventDefault: 'tags this -> unit [@@js.call "preventDefault"]
  
  (**
    Invoking this method prevents event from reaching any registered event listeners after the current one finishes running and, when dispatched in a tree, also prevents event from reaching any other objects.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/stopImmediatePropagation)
  *)
  val stopImmediatePropagation: 'tags this -> unit [@@js.call "stopImmediatePropagation"]
  
  (**
    When dispatched in a tree, invoking this method prevents event from reaching any objects other than the current object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/stopPropagation)
  *)
  val stopPropagation: 'tags this -> unit [@@js.call "stopPropagation"]
  val get_NONE: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NONE"]
  val get_CAPTURING_PHASE: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "CAPTURING_PHASE"]
  val get_AT_TARGET: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "AT_TARGET"]
  val get_BUBBLING_PHASE: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "BUBBLING_PHASE"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: type_:string -> ?eventInitDict:EventInit.t -> unit -> t [@@js.create]
  val none: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NONE"]
  val capturing_phase: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "CAPTURING_PHASE"]
  val at_target: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "AT_TARGET"]
  val bubbling_phase: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "BUBBLING_PHASE"]
end
and EventListener : sig
  type t = [`EventListener] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventListener]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventListener]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventListener ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> evt:Event.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and EventListenerObject : sig
  type t = [`EventListenerObject] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventListenerObject]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventListenerObject]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventListenerObject ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val handleEvent: 'tags this -> object_:Event.t -> unit [@@js.call "handleEvent"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and EventListenerOrEventListenerObject : sig
  type t = (EventListener.t, EventListenerObject.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget)
*)
and[@js.scope "EventTarget"] EventTarget : sig
  type t = [`EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventTarget ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:string -> callback:EventListenerOrEventListenerObject.t option -> ?options:([`U1 of AddEventListenerOptions.t | `U2 of bool] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent)
  *)
  val dispatchEvent: 'tags this -> event:Event.t -> bool [@@js.call "dispatchEvent"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:string -> callback:EventListenerOrEventListenerObject.t option -> ?options:([`U1 of EventListenerOptions.t | `U2 of bool] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance)
*)
module[@js.scope "Performance"] Performance : sig
  type t = [`EventTarget | `Performance] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `Performance]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `Performance]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Performance ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/resourcetimingbufferfull_event) *)
  val get_onresourcetimingbufferfull: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onresourcetimingbufferfull"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/resourcetimingbufferfull_event) *)
  val set_onresourcetimingbufferfull: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onresourcetimingbufferfull"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/timeOrigin) *)
  val get_timeOrigin: 'tags this -> DOMHighResTimeStamp.t [@@js.get "timeOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/clearMarks) *)
  val clearMarks: 'tags this -> ?markName:string -> unit -> unit [@@js.call "clearMarks"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/clearMeasures) *)
  val clearMeasures: 'tags this -> ?measureName:string -> unit -> unit [@@js.call "clearMeasures"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/clearResourceTimings) *)
  val clearResourceTimings: 'tags this -> unit [@@js.call "clearResourceTimings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/getEntries) *)
  val getEntries: 'tags this -> PerformanceEntryList.t [@@js.call "getEntries"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByName) *)
  val getEntriesByName: 'tags this -> name:string -> ?type_:string -> unit -> PerformanceEntryList.t [@@js.call "getEntriesByName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByType) *)
  val getEntriesByType: 'tags this -> type_:string -> PerformanceEntryList.t [@@js.call "getEntriesByType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/mark) *)
  val mark: 'tags this -> markName:string -> ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t [@@js.call "mark"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/measure) *)
  val measure: 'tags this -> measureName:string -> ?startOrMeasureOptions:([`U1 of string | `U2 of PerformanceMeasureOptions.t] [@js.union]) -> ?endMark:string -> unit -> PerformanceMeasure.t [@@js.call "measure"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/now) *)
  val now: 'tags this -> DOMHighResTimeStamp.t [@@js.call "now"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/setResourceTimingBufferSize) *)
  val setResourceTimingBufferSize: 'tags this -> maxSize:float -> unit [@@js.call "setResourceTimingBufferSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'PerformanceEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'PerformanceEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module[@js.scope "performance"] PerformanceStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/resourcetimingbufferfull_event) *)
  val onresourcetimingbufferfull: unit -> (this:Performance.t -> ev:Event.t -> any) option [@@js.get "onresourcetimingbufferfull"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/timeOrigin) *)
  val timeOrigin: unit -> DOMHighResTimeStamp.t [@@js.get "timeOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/clearMarks) *)
  val clearMarks: ?markName:string -> unit -> unit [@@js.global "clearMarks"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/clearMeasures) *)
  val clearMeasures: ?measureName:string -> unit -> unit [@@js.global "clearMeasures"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/clearResourceTimings) *)
  val clearResourceTimings: unit -> unit [@@js.global "clearResourceTimings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/getEntries) *)
  val getEntries: unit -> PerformanceEntryList.t [@@js.global "getEntries"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByName) *)
  val getEntriesByName: name:string -> ?type_:string -> unit -> PerformanceEntryList.t [@@js.global "getEntriesByName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByType) *)
  val getEntriesByType: string -> PerformanceEntryList.t [@@js.global "getEntriesByType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/mark) *)
  val mark: markName:string -> ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t [@@js.global "mark"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/measure) *)
  val measure: measureName:string -> ?startOrMeasureOptions:([`U1 of string | `U2 of PerformanceMeasureOptions.t] [@js.union]) -> ?endMark:string -> unit -> PerformanceMeasure.t [@@js.global "measure"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/now) *)
  val now: unit -> DOMHighResTimeStamp.t [@@js.global "now"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/setResourceTimingBufferSize) *)
  val setResourceTimingBufferSize: float -> unit [@@js.global "setResourceTimingBufferSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/toJSON) *)
  val toJSON: unit -> any [@@js.global "toJSON"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: type_:'K -> listener:(this:Performance.t -> ev:(* FIXME: unknown type 'PerformanceEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: type_:'K -> listener:(this:Performance.t -> ev:(* FIXME: unknown type 'PerformanceEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "removeEventListener"]
end
module PermissionState : sig
  type t = ([`L_s101_denied[@js "denied"] | `L_s145_granted[@js "granted"] | `L_s251_prompt[@js "prompt"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PermissionStatus) *)
module[@js.scope "PermissionStatus"] PermissionStatus : sig
  type t = [`EventTarget | `PermissionStatus] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `PermissionStatus]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `PermissionStatus]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PermissionStatus ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PermissionStatus/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PermissionStatus/change_event) *)
  val get_onchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PermissionStatus/change_event) *)
  val set_onchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PermissionStatus/state) *)
  val get_state: 'tags this -> PermissionState.t [@@js.get "state"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'PermissionStatusEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'PermissionStatusEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module PermissionName : sig
  type t = ([`L_s142_geolocation[@js "geolocation"] | `L_s217_notifications[@js "notifications"] | `L_s238_persistent_storage[@js "persistent-storage"] | `L_s253_push[@js "push"] | `L_s278_screen_wake_lock[@js "screen-wake-lock"] | `L_s345_xr_spatial_tracking[@js "xr-spatial-tracking"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module PermissionDescriptor : sig
  type t = [`PermissionDescriptor] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PermissionDescriptor]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PermissionDescriptor]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PermissionDescriptor ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_name: 'tags this -> PermissionName.t [@@js.get "name"]
  val set_name: 'tags this -> PermissionName.t -> unit [@@js.set "name"]
  val create: name:PermissionName.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Permissions) *)
module[@js.scope "Permissions"] Permissions : sig
  type t = [`Permissions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Permissions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Permissions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Permissions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Permissions/query) *)
  val query: 'tags this -> permissionDesc:PermissionDescriptor.t -> PermissionStatus.t Promise.t [@@js.call "query"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module StorageEstimate : sig
  type t = [`StorageEstimate] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`StorageEstimate]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`StorageEstimate]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StorageEstimate ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_quota: 'tags this -> float option [@@js.get "quota"]
  val set_quota: 'tags this -> float -> unit [@@js.set "quota"]
  val get_usage: 'tags this -> float option [@@js.get "usage"]
  val set_usage: 'tags this -> float -> unit [@@js.set "usage"]
  val create: ?quota:float -> ?usage:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FileSystemRemoveOptions : sig
  type t = [`FileSystemRemoveOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemRemoveOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemRemoveOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemRemoveOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_recursive: 'tags this -> bool option [@@js.get "recursive"]
  val set_recursive: 'tags this -> bool -> unit [@@js.set "recursive"]
  val create: ?recursive:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FileSystemGetFileOptions : sig
  type t = [`FileSystemGetFileOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemGetFileOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemGetFileOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemGetFileOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_create: 'tags this -> bool option [@@js.get "create"]
  val set_create: 'tags this -> bool -> unit [@@js.set "create"]
  val create: ?create_:(bool[@js "create"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FileSystemGetDirectoryOptions : sig
  type t = [`FileSystemGetDirectoryOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemGetDirectoryOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemGetDirectoryOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemGetDirectoryOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_create: 'tags this -> bool option [@@js.get "create"]
  val set_create: 'tags this -> bool -> unit [@@js.set "create"]
  val create: ?create_:(bool[@js "create"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module WriteCommandType : sig
  type t = ([`L_s281_seek[@js "seek"] | `L_s319_truncate[@js "truncate"] | `L_s343_write[@js "write"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController) *)
module[@js.scope "ReadableStreamDefaultController"] ReadableStreamDefaultController : sig
  type 'R t = [`ReadableStreamDefaultController of 'R] intf [@@js.custom { of_js=(fun _R -> Obj.magic); to_js=(fun _R -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'R tags = [`ReadableStreamDefaultController of 'R]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'R tags = [`ReadableStreamDefaultController of 'R]
    type tags_0 = any tags
  ]
  type ('tags, 'R) this = 'tags intf constraint 'tags = [> `ReadableStreamDefaultController of 'R ]
  val t_to_js: ('R -> Ojs.t) -> 'R t -> Ojs.t
  val t_of_js: (Ojs.t -> 'R) -> Ojs.t -> 'R t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/desiredSize) *)
  val get_desiredSize: ('tags, 'R) this -> float option [@@js.get "desiredSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/close) *)
  val close: ('tags, 'R) this -> unit [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/enqueue) *)
  val enqueue: ('tags, 'R) this -> ?chunk:'R -> unit -> unit [@@js.call "enqueue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/error) *)
  val error: ('tags, 'R) this -> ?e:any -> unit -> unit [@@js.call "error"]
  val cast_from: ('tags, 'R) this -> 'R t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: unit -> t_0 [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest) *)
module[@js.scope "ReadableStreamBYOBRequest"] ReadableStreamBYOBRequest : sig
  type t = [`ReadableStreamBYOBRequest] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReadableStreamBYOBRequest]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReadableStreamBYOBRequest]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReadableStreamBYOBRequest ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/view) *)
  val get_view: 'tags this -> ArrayBufferView.t option [@@js.get "view"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/respond) *)
  val respond: 'tags this -> bytesWritten:float -> unit [@@js.call "respond"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/respondWithNewView) *)
  val respondWithNewView: 'tags this -> view:ArrayBufferView.t -> unit [@@js.call "respondWithNewView"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController) *)
module[@js.scope "ReadableByteStreamController"] ReadableByteStreamController : sig
  type t = [`ReadableByteStreamController] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReadableByteStreamController]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReadableByteStreamController]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReadableByteStreamController ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/byobRequest) *)
  val get_byobRequest: 'tags this -> ReadableStreamBYOBRequest.t option [@@js.get "byobRequest"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/desiredSize) *)
  val get_desiredSize: 'tags this -> float option [@@js.get "desiredSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/close) *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/enqueue) *)
  val enqueue: 'tags this -> chunk:ArrayBufferView.t -> unit [@@js.call "enqueue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/error) *)
  val error: 'tags this -> ?e:any -> unit -> unit [@@js.call "error"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module ReadableStreamController : sig
  type 'T t = (ReadableByteStreamController.t, 'T ReadableStreamDefaultController.t) union2
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
end
module UnderlyingSourceStartCallback : sig
  type 'R t = [`UnderlyingSourceStartCallback of 'R] intf [@@js.custom { of_js=(fun _R -> Obj.magic); to_js=(fun _R -> Obj.magic) }]
  [@@@js.stop]
  type 'R tags = [`UnderlyingSourceStartCallback of 'R]
  [@@@js.start]
  [@@@js.implem 
    type 'R tags = [`UnderlyingSourceStartCallback of 'R]
  ]
  type ('tags, 'R) this = 'tags intf constraint 'tags = [> `UnderlyingSourceStartCallback of 'R ]
  val t_to_js: ('R -> Ojs.t) -> 'R t -> Ojs.t
  val t_of_js: (Ojs.t -> 'R) -> Ojs.t -> 'R t
  val apply: ('tags, 'R) this -> controller:'R ReadableStreamController.t -> any [@@js.apply]
  val cast_from: ('tags, 'R) this -> 'R t [@@js.custom let cast_from = Obj.magic]
end
module UnderlyingSourcePullCallback : sig
  type 'R t = [`UnderlyingSourcePullCallback of 'R] intf [@@js.custom { of_js=(fun _R -> Obj.magic); to_js=(fun _R -> Obj.magic) }]
  [@@@js.stop]
  type 'R tags = [`UnderlyingSourcePullCallback of 'R]
  [@@@js.start]
  [@@@js.implem 
    type 'R tags = [`UnderlyingSourcePullCallback of 'R]
  ]
  type ('tags, 'R) this = 'tags intf constraint 'tags = [> `UnderlyingSourcePullCallback of 'R ]
  val t_to_js: ('R -> Ojs.t) -> 'R t -> Ojs.t
  val t_of_js: (Ojs.t -> 'R) -> Ojs.t -> 'R t
  val apply: ('tags, 'R) this -> controller:'R ReadableStreamController.t -> (unit, unit PromiseLike.t) union2 [@@js.apply]
  val cast_from: ('tags, 'R) this -> 'R t [@@js.custom let cast_from = Obj.magic]
end
module ReadableStreamType : sig
  type t = ([`L_s74_bytes[@js "bytes"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module UnderlyingSourceCancelCallback : sig
  type t = [`UnderlyingSourceCancelCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`UnderlyingSourceCancelCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`UnderlyingSourceCancelCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `UnderlyingSourceCancelCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> ?reason:any -> unit -> (unit, unit PromiseLike.t) union2 [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module UnderlyingSource : sig
  type 'R t = [`UnderlyingSource of 'R] intf [@@js.custom { of_js=(fun _R -> Obj.magic); to_js=(fun _R -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'R tags = [`UnderlyingSource of 'R]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'R tags = [`UnderlyingSource of 'R]
    type tags_0 = any tags
  ]
  type ('tags, 'R) this = 'tags intf constraint 'tags = [> `UnderlyingSource of 'R ]
  val t_to_js: ('R -> Ojs.t) -> 'R t -> Ojs.t
  val t_of_js: (Ojs.t -> 'R) -> Ojs.t -> 'R t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_autoAllocateChunkSize: ('tags, 'R) this -> float option [@@js.get "autoAllocateChunkSize"]
  val set_autoAllocateChunkSize: ('tags, 'R) this -> float -> unit [@@js.set "autoAllocateChunkSize"]
  val get_cancel: ('tags, 'R) this -> UnderlyingSourceCancelCallback.t option [@@js.get "cancel"]
  val set_cancel: ('tags, 'R) this -> UnderlyingSourceCancelCallback.t -> unit [@@js.set "cancel"]
  val get_pull: ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t option [@@js.get "pull"]
  val set_pull: ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t -> unit [@@js.set "pull"]
  val get_start: ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t option [@@js.get "start"]
  val set_start: ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t -> unit [@@js.set "start"]
  val get_type: ('tags, 'R) this -> ReadableStreamType.t option [@@js.get "type"]
  val set_type: ('tags, 'R) this -> ReadableStreamType.t -> unit [@@js.set "type"]
  val create: ?autoAllocateChunkSize:float -> ?cancel:UnderlyingSourceCancelCallback.t -> ?pull:'R UnderlyingSourcePullCallback.t -> ?start:'R UnderlyingSourceStartCallback.t -> ?type_:(ReadableStreamType.t[@js "type"]) -> unit -> 'R t [@@js.builder]
  val cast_from: ('tags, 'R) this -> 'R t [@@js.custom let cast_from = Obj.magic]
end
module UnderlyingDefaultSource : sig
  type 'R t = [`UnderlyingDefaultSource of 'R] intf [@@js.custom { of_js=(fun _R -> Obj.magic); to_js=(fun _R -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'R tags = [`UnderlyingDefaultSource of 'R]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'R tags = [`UnderlyingDefaultSource of 'R]
    type tags_0 = any tags
  ]
  type ('tags, 'R) this = 'tags intf constraint 'tags = [> `UnderlyingDefaultSource of 'R ]
  val t_to_js: ('R -> Ojs.t) -> 'R t -> Ojs.t
  val t_of_js: (Ojs.t -> 'R) -> Ojs.t -> 'R t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_cancel: ('tags, 'R) this -> UnderlyingSourceCancelCallback.t option [@@js.get "cancel"]
  val set_cancel: ('tags, 'R) this -> UnderlyingSourceCancelCallback.t -> unit [@@js.set "cancel"]
  val get_pull: ('tags, 'R) this -> ('R ReadableStreamDefaultController.t -> (unit, unit PromiseLike.t) union2) option [@@js.get "pull"]
  val set_pull: ('tags, 'R) this -> ('R ReadableStreamDefaultController.t -> ([`U1 of unit | `U2 of unit PromiseLike.t] [@js.union])) -> unit [@@js.set "pull"]
  val get_start: ('tags, 'R) this -> ('R ReadableStreamDefaultController.t -> any) option [@@js.get "start"]
  val set_start: ('tags, 'R) this -> ('R ReadableStreamDefaultController.t -> any) -> unit [@@js.set "start"]
  val get_type: ('tags, 'R) this -> undefined [@@js.get "type"]
  val set_type: ('tags, 'R) this -> undefined -> unit [@@js.set "type"]
  val create: ?cancel:UnderlyingSourceCancelCallback.t -> ?pull:('R ReadableStreamDefaultController.t -> (unit, unit PromiseLike.t) union2) -> ?start:('R ReadableStreamDefaultController.t -> any) -> ?type_:(never[@js "type"]) -> unit -> 'R t [@@js.builder]
  val cast_from: ('tags, 'R) this -> 'R t [@@js.custom let cast_from = Obj.magic]
end
module UnderlyingByteSource : sig
  type t = [`UnderlyingByteSource] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`UnderlyingByteSource]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`UnderlyingByteSource]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `UnderlyingByteSource ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_autoAllocateChunkSize: 'tags this -> float option [@@js.get "autoAllocateChunkSize"]
  val set_autoAllocateChunkSize: 'tags this -> float -> unit [@@js.set "autoAllocateChunkSize"]
  val get_cancel: 'tags this -> UnderlyingSourceCancelCallback.t option [@@js.get "cancel"]
  val set_cancel: 'tags this -> UnderlyingSourceCancelCallback.t -> unit [@@js.set "cancel"]
  val get_pull: 'tags this -> (ReadableByteStreamController.t -> (unit, unit PromiseLike.t) union2) option [@@js.get "pull"]
  val set_pull: 'tags this -> (ReadableByteStreamController.t -> ([`U1 of unit | `U2 of unit PromiseLike.t] [@js.union])) -> unit [@@js.set "pull"]
  val get_start: 'tags this -> (ReadableByteStreamController.t -> any) option [@@js.get "start"]
  val set_start: 'tags this -> (ReadableByteStreamController.t -> any) -> unit [@@js.set "start"]
  val get_type: 'tags this -> ([`L_s74_bytes[@js "bytes"]] [@js.enum]) [@@js.get "type"]
  val set_type: 'tags this -> ([`L_s74_bytes[@js "bytes"]] [@js.enum]) -> unit [@@js.set "type"]
  val create: ?autoAllocateChunkSize:float -> ?cancel:UnderlyingSourceCancelCallback.t -> ?pull:(ReadableByteStreamController.t -> (unit, unit PromiseLike.t) union2) -> ?start:(ReadableByteStreamController.t -> any) -> type_:(([`L_s74_bytes[@js "bytes"]] [@js.enum])[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module StreamPipeOptions : sig
  type t = [`StreamPipeOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`StreamPipeOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`StreamPipeOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StreamPipeOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_preventAbort: 'tags this -> bool option [@@js.get "preventAbort"]
  val set_preventAbort: 'tags this -> bool -> unit [@@js.set "preventAbort"]
  val get_preventCancel: 'tags this -> bool option [@@js.get "preventCancel"]
  val set_preventCancel: 'tags this -> bool -> unit [@@js.set "preventCancel"]
  
  (**
    Pipes this readable stream to a given writable stream destination. The way in which the piping process behaves under various error conditions can be customized with a number of passed options. It returns a promise that fulfills when the piping process completes successfully, or rejects if any errors were encountered.
    
    Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
    
    Errors and closures of the source and destination streams propagate as follows:
    
    An error in this source readable stream will abort destination, unless preventAbort is truthy. The returned promise will be rejected with the source's error, or with any error that occurs during aborting the destination.
    
    An error in destination will cancel this source readable stream, unless preventCancel is truthy. The returned promise will be rejected with the destination's error, or with any error that occurs during canceling the source.
    
    When this source readable stream closes, destination will be closed, unless preventClose is truthy. The returned promise will be fulfilled once this process completes, unless an error is encountered while closing the destination, in which case it will be rejected with that error.
    
    If destination starts out closed or closing, this source readable stream will be canceled, unless preventCancel is true. The returned promise will be rejected with an error indicating piping to a closed stream failed, or with any error that occurs during canceling the source.
    
    The signal option can be set to an AbortSignal to allow aborting an ongoing pipe operation via the corresponding AbortController. In this case, this source readable stream will be canceled, and destination aborted, unless the respective options preventCancel or preventAbort are set.
  *)
  val get_preventClose: 'tags this -> bool option [@@js.get "preventClose"]
  
  (**
    Pipes this readable stream to a given writable stream destination. The way in which the piping process behaves under various error conditions can be customized with a number of passed options. It returns a promise that fulfills when the piping process completes successfully, or rejects if any errors were encountered.
    
    Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
    
    Errors and closures of the source and destination streams propagate as follows:
    
    An error in this source readable stream will abort destination, unless preventAbort is truthy. The returned promise will be rejected with the source's error, or with any error that occurs during aborting the destination.
    
    An error in destination will cancel this source readable stream, unless preventCancel is truthy. The returned promise will be rejected with the destination's error, or with any error that occurs during canceling the source.
    
    When this source readable stream closes, destination will be closed, unless preventClose is truthy. The returned promise will be fulfilled once this process completes, unless an error is encountered while closing the destination, in which case it will be rejected with that error.
    
    If destination starts out closed or closing, this source readable stream will be canceled, unless preventCancel is true. The returned promise will be rejected with an error indicating piping to a closed stream failed, or with any error that occurs during canceling the source.
    
    The signal option can be set to an AbortSignal to allow aborting an ongoing pipe operation via the corresponding AbortController. In this case, this source readable stream will be canceled, and destination aborted, unless the respective options preventCancel or preventAbort are set.
  *)
  val set_preventClose: 'tags this -> bool -> unit [@@js.set "preventClose"]
  val get_signal: 'tags this -> AbortSignal.t option [@@js.get "signal"]
  val set_signal: 'tags this -> AbortSignal.t -> unit [@@js.set "signal"]
  val create: ?preventAbort:bool -> ?preventCancel:bool -> ?preventClose:bool -> ?signal:AbortSignal.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Streams API interface represents a controller allowing control of aÂ WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController)
*)
module[@js.scope "WritableStreamDefaultController"] WritableStreamDefaultController : sig
  type t = [`WritableStreamDefaultController] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WritableStreamDefaultController]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WritableStreamDefaultController]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WritableStreamDefaultController ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController/signal) *)
  val get_signal: 'tags this -> AbortSignal.t [@@js.get "signal"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController/error) *)
  val error: 'tags this -> ?e:any -> unit -> unit [@@js.call "error"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module UnderlyingSinkWriteCallback : sig
  type 'W t = [`UnderlyingSinkWriteCallback of 'W] intf [@@js.custom { of_js=(fun _W -> Obj.magic); to_js=(fun _W -> Obj.magic) }]
  [@@@js.stop]
  type 'W tags = [`UnderlyingSinkWriteCallback of 'W]
  [@@@js.start]
  [@@@js.implem 
    type 'W tags = [`UnderlyingSinkWriteCallback of 'W]
  ]
  type ('tags, 'W) this = 'tags intf constraint 'tags = [> `UnderlyingSinkWriteCallback of 'W ]
  val t_to_js: ('W -> Ojs.t) -> 'W t -> Ojs.t
  val t_of_js: (Ojs.t -> 'W) -> Ojs.t -> 'W t
  val apply: ('tags, 'W) this -> chunk:'W -> controller:WritableStreamDefaultController.t -> (unit, unit PromiseLike.t) union2 [@@js.apply]
  val cast_from: ('tags, 'W) this -> 'W t [@@js.custom let cast_from = Obj.magic]
end
module UnderlyingSinkStartCallback : sig
  type t = [`UnderlyingSinkStartCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`UnderlyingSinkStartCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`UnderlyingSinkStartCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `UnderlyingSinkStartCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> controller:WritableStreamDefaultController.t -> any [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module UnderlyingSinkCloseCallback : sig
  type t = [`UnderlyingSinkCloseCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`UnderlyingSinkCloseCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`UnderlyingSinkCloseCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `UnderlyingSinkCloseCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> (unit, unit PromiseLike.t) union2 [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module UnderlyingSinkAbortCallback : sig
  type t = [`UnderlyingSinkAbortCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`UnderlyingSinkAbortCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`UnderlyingSinkAbortCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `UnderlyingSinkAbortCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> ?reason:any -> unit -> (unit, unit PromiseLike.t) union2 [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module UnderlyingSink : sig
  type 'W t = [`UnderlyingSink of 'W] intf [@@js.custom { of_js=(fun _W -> Obj.magic); to_js=(fun _W -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'W tags = [`UnderlyingSink of 'W]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'W tags = [`UnderlyingSink of 'W]
    type tags_0 = any tags
  ]
  type ('tags, 'W) this = 'tags intf constraint 'tags = [> `UnderlyingSink of 'W ]
  val t_to_js: ('W -> Ojs.t) -> 'W t -> Ojs.t
  val t_of_js: (Ojs.t -> 'W) -> Ojs.t -> 'W t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_abort: ('tags, 'W) this -> UnderlyingSinkAbortCallback.t option [@@js.get "abort"]
  val set_abort: ('tags, 'W) this -> UnderlyingSinkAbortCallback.t -> unit [@@js.set "abort"]
  val get_close: ('tags, 'W) this -> UnderlyingSinkCloseCallback.t option [@@js.get "close"]
  val set_close: ('tags, 'W) this -> UnderlyingSinkCloseCallback.t -> unit [@@js.set "close"]
  val get_start: ('tags, 'W) this -> UnderlyingSinkStartCallback.t option [@@js.get "start"]
  val set_start: ('tags, 'W) this -> UnderlyingSinkStartCallback.t -> unit [@@js.set "start"]
  val get_type: ('tags, 'W) this -> undefined [@@js.get "type"]
  val set_type: ('tags, 'W) this -> undefined -> unit [@@js.set "type"]
  val get_write: ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t option [@@js.get "write"]
  val set_write: ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t -> unit [@@js.set "write"]
  val create: ?abort:UnderlyingSinkAbortCallback.t -> ?close:UnderlyingSinkCloseCallback.t -> ?start:UnderlyingSinkStartCallback.t -> ?type_:(never[@js "type"]) -> ?write:'W UnderlyingSinkWriteCallback.t -> unit -> 'W t [@@js.builder]
  val cast_from: ('tags, 'W) this -> 'W t [@@js.custom let cast_from = Obj.magic]
end
module QueuingStrategySize : sig
  type 'T t = [`QueuingStrategySize of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'T tags = [`QueuingStrategySize of 'T]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`QueuingStrategySize of 'T]
    type tags_0 = any tags
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `QueuingStrategySize of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: ('tags, 'T) this -> chunk:'T -> float [@@js.apply]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
end
module QueuingStrategy : sig
  type 'T t = [`QueuingStrategy of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'T tags = [`QueuingStrategy of 'T]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`QueuingStrategy of 'T]
    type tags_0 = any tags
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `QueuingStrategy of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_highWaterMark: ('tags, 'T) this -> float option [@@js.get "highWaterMark"]
  val set_highWaterMark: ('tags, 'T) this -> float -> unit [@@js.set "highWaterMark"]
  val get_size: ('tags, 'T) this -> 'T QueuingStrategySize.t option [@@js.get "size"]
  val set_size: ('tags, 'T) this -> 'T QueuingStrategySize.t -> unit [@@js.set "size"]
  val create: ?highWaterMark:float -> ?size:'T QueuingStrategySize.t -> unit -> 'T t [@@js.builder]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Streams API interface providesÂ a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream)
*)
module[@js.scope "WritableStream"] rec WritableStream : sig
  type 'W t = [`WritableStream of 'W] intf [@@js.custom { of_js=(fun _W -> Obj.magic); to_js=(fun _W -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'W tags = [`WritableStream of 'W]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'W tags = [`WritableStream of 'W]
    type tags_0 = any tags
  ]
  type ('tags, 'W) this = 'tags intf constraint 'tags = [> `WritableStream of 'W ]
  val t_to_js: ('W -> Ojs.t) -> 'W t -> Ojs.t
  val t_of_js: (Ojs.t -> 'W) -> Ojs.t -> 'W t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream/locked) *)
  val get_locked: ('tags, 'W) this -> bool [@@js.get "locked"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream/abort) *)
  val abort: ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t [@@js.call "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream/close) *)
  val close: ('tags, 'W) this -> unit Promise.t [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream/getWriter) *)
  val getWriter: ('tags, 'W) this -> 'W WritableStreamDefaultWriter.t [@@js.call "getWriter"]
  val cast_from: ('tags, 'W) this -> 'W t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: ?underlyingSink:'W UnderlyingSink.t -> ?strategy:'W QueuingStrategy.t -> unit -> 'W t [@@js.create]
end

(**
  This Streams API interface is the object returned by WritableStream.getWriter() and once created locks the < writer to the WritableStream ensuring that no other streams can write to the underlying sink.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter)
*)
and[@js.scope "WritableStreamDefaultWriter"] WritableStreamDefaultWriter : sig
  type 'W t = [`WritableStreamDefaultWriter of 'W] intf [@@js.custom { of_js=(fun _W -> Obj.magic); to_js=(fun _W -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'W tags = [`WritableStreamDefaultWriter of 'W]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'W tags = [`WritableStreamDefaultWriter of 'W]
    type tags_0 = any tags
  ]
  type ('tags, 'W) this = 'tags intf constraint 'tags = [> `WritableStreamDefaultWriter of 'W ]
  val t_to_js: ('W -> Ojs.t) -> 'W t -> Ojs.t
  val t_of_js: (Ojs.t -> 'W) -> Ojs.t -> 'W t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/closed) *)
  val get_closed: ('tags, 'W) this -> undefined Promise.t [@@js.get "closed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/desiredSize) *)
  val get_desiredSize: ('tags, 'W) this -> float option [@@js.get "desiredSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/ready) *)
  val get_ready: ('tags, 'W) this -> undefined Promise.t [@@js.get "ready"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/abort) *)
  val abort: ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t [@@js.call "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/close) *)
  val close: ('tags, 'W) this -> unit Promise.t [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/releaseLock) *)
  val releaseLock: ('tags, 'W) this -> unit [@@js.call "releaseLock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/write) *)
  val write: ('tags, 'W) this -> ?chunk:'W -> unit -> unit Promise.t [@@js.call "write"]
  val cast_from: ('tags, 'W) this -> 'W t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: 'W WritableStream.t -> 'W t [@@js.create]
end
module ReadableStreamReaderMode : sig
  type t = ([`L_s73_byob[@js "byob"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ReadableStreamGetReaderOptions : sig
  type t = [`ReadableStreamGetReaderOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReadableStreamGetReaderOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReadableStreamGetReaderOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReadableStreamGetReaderOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Creates a ReadableStreamBYOBReader and locks the stream to the new reader.
    
    This call behaves the same way as the no-argument variant, except that it only works on readable byte streams, i.e. streams which were constructed specifically with the ability to handle "bring your own buffer" reading. The returned BYOB reader provides the ability to directly read individual chunks from the stream via its read() method, into developer-supplied buffers, allowing more precise control over allocation.
  *)
  val get_mode: 'tags this -> ReadableStreamReaderMode.t option [@@js.get "mode"]
  
  (**
    Creates a ReadableStreamBYOBReader and locks the stream to the new reader.
    
    This call behaves the same way as the no-argument variant, except that it only works on readable byte streams, i.e. streams which were constructed specifically with the ability to handle "bring your own buffer" reading. The returned BYOB reader provides the ability to directly read individual chunks from the stream via its read() method, into developer-supplied buffers, allowing more precise control over allocation.
  *)
  val set_mode: 'tags this -> ReadableStreamReaderMode.t -> unit [@@js.set "mode"]
  val create: ?mode:ReadableStreamReaderMode.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ReadableStreamReadValueResult : sig
  type 'T t = [`ReadableStreamReadValueResult of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  [@@@js.stop]
  type 'T tags = [`ReadableStreamReadValueResult of 'T]
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`ReadableStreamReadValueResult of 'T]
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `ReadableStreamReadValueResult of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val get_done: ('tags, 'T) this -> ([`L_b_false[@js false]] [@js.enum]) [@@js.get "done"]
  val set_done: ('tags, 'T) this -> ([`L_b_false[@js false]] [@js.enum]) -> unit [@@js.set "done"]
  val get_value: ('tags, 'T) this -> 'T [@@js.get "value"]
  val set_value: ('tags, 'T) this -> 'T -> unit [@@js.set "value"]
  val create: done_:(([`L_b_false[@js false]] [@js.enum])[@js "done"]) -> value:'T -> unit -> 'T t [@@js.builder]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
end
module ReadableStreamReadDoneResult : sig
  type 'T t = [`ReadableStreamReadDoneResult of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  [@@@js.stop]
  type 'T tags = [`ReadableStreamReadDoneResult of 'T]
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`ReadableStreamReadDoneResult of 'T]
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `ReadableStreamReadDoneResult of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val get_done: ('tags, 'T) this -> ([`L_b_true[@js true]] [@js.enum]) [@@js.get "done"]
  val set_done: ('tags, 'T) this -> ([`L_b_true[@js true]] [@js.enum]) -> unit [@@js.set "done"]
  val get_value: ('tags, 'T) this -> 'T option [@@js.get "value"]
  val set_value: ('tags, 'T) this -> 'T -> unit [@@js.set "value"]
  val create: done_:(([`L_b_true[@js true]] [@js.enum])[@js "done"]) -> ?value:'T -> unit -> 'T t [@@js.builder]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
end
module ReadableStreamReadResult : sig
  type 'T t = ([`U_b_false of 'T ReadableStreamReadValueResult.t [@js false] | `U_b_true of 'T ReadableStreamReadDoneResult.t [@js true]] [@js.union on_field "done"])
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
end
module ReadableStreamGenericReader : sig
  type t = [`ReadableStreamGenericReader] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReadableStreamGenericReader]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReadableStreamGenericReader]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReadableStreamGenericReader ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/closed) *)
  val get_closed: 'tags this -> undefined Promise.t [@@js.get "closed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/cancel) *)
  val cancel: 'tags this -> ?reason:any -> unit -> unit Promise.t [@@js.call "cancel"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream)
*)
module[@js.scope "ReadableStream"] rec ReadableStream : sig
  module AnonymousInterface2 : sig
    type t = private Ojs.t
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_mode: t -> ([`L_s73_byob[@js "byob"]] [@js.enum]) [@@js.get "mode"]
    val set_mode: t -> ([`L_s73_byob[@js "byob"]] [@js.enum]) -> unit [@@js.set "mode"]
    val create: mode:([`L_s73_byob[@js "byob"]] [@js.enum]) -> unit -> t [@@js.builder]
  end
  module AnonymousInterface1 : sig
    type t = private Ojs.t
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_highWaterMark: t -> float option [@@js.get "highWaterMark"]
    val set_highWaterMark: t -> float -> unit [@@js.set "highWaterMark"]
    val create: ?highWaterMark:float -> unit -> t [@@js.builder]
  end
  type 'R t = [`ReadableStream of 'R] intf [@@js.custom { of_js=(fun _R -> Obj.magic); to_js=(fun _R -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'R tags = [`ReadableStream of 'R]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'R tags = [`ReadableStream of 'R]
    type tags_0 = any tags
  ]
  type ('tags, 'R) this = 'tags intf constraint 'tags = [> `ReadableStream of 'R ]
  val t_to_js: ('R -> Ojs.t) -> 'R t -> Ojs.t
  val t_of_js: (Ojs.t -> 'R) -> Ojs.t -> 'R t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked) *)
  val get_locked: ('tags, 'R) this -> bool [@@js.get "locked"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/cancel) *)
  val cancel: ('tags, 'R) this -> ?reason:any -> unit -> unit Promise.t [@@js.call "cancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader) *)
  val getReader: ('tags, 'R) this -> options:AnonymousInterface2.t -> ReadableStreamBYOBReader.t [@@js.call "getReader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader) *)
  val getReader': ('tags, 'R) this -> 'R ReadableStreamDefaultReader.t [@@js.call "getReader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader) *)
  val getReader'': ('tags, 'R) this -> ?options:ReadableStreamGetReaderOptions.t -> unit -> 'R ReadableStreamReader.t [@@js.call "getReader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/pipeThrough) *)
  val pipeThrough: ('tags, 'R) this -> transform:('T, 'R) ReadableWritablePair.t -> ?options:StreamPipeOptions.t -> unit -> 'T t [@@js.call "pipeThrough"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/pipeTo) *)
  val pipeTo: ('tags, 'R) this -> destination:'R WritableStream.t -> ?options:StreamPipeOptions.t -> unit -> unit Promise.t [@@js.call "pipeTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/tee) *)
  val tee: ('tags, 'R) this -> ('R t * 'R t) [@@js.call "tee"]
  val cast_from: ('tags, 'R) this -> 'R t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: underlyingSource:UnderlyingByteSource.t -> ?strategy:AnonymousInterface1.t -> unit -> Uint8Array.t t [@@js.create]
  val create': underlyingSource:'R UnderlyingDefaultSource.t -> ?strategy:'R QueuingStrategy.t -> unit -> 'R t [@@js.create]
  val create'': ?underlyingSource:'R UnderlyingSource.t -> ?strategy:'R QueuingStrategy.t -> unit -> 'R t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader) *)
and[@js.scope "ReadableStreamBYOBReader"] ReadableStreamBYOBReader : sig
  type t = [`ReadableStreamBYOBReader | `ReadableStreamGenericReader] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReadableStreamBYOBReader | `ReadableStreamGenericReader]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReadableStreamBYOBReader | `ReadableStreamGenericReader]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReadableStreamBYOBReader ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/read) *)
  val read: 'tags this -> view:'T -> 'T ReadableStreamReadResult.t Promise.t [@@js.call "read"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/releaseLock) *)
  val releaseLock: 'tags this -> unit [@@js.call "releaseLock"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ReadableStream.t_0 -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader) *)
and[@js.scope "ReadableStreamDefaultReader"] ReadableStreamDefaultReader : sig
  type 'R t = [`ReadableStreamDefaultReader of 'R | `ReadableStreamGenericReader] intf [@@js.custom { of_js=(fun _R -> Obj.magic); to_js=(fun _R -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'R tags = [`ReadableStreamDefaultReader of 'R | `ReadableStreamGenericReader]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'R tags = [`ReadableStreamDefaultReader of 'R | `ReadableStreamGenericReader]
    type tags_0 = any tags
  ]
  type ('tags, 'R) this = 'tags intf constraint 'tags = [> `ReadableStreamDefaultReader of 'R ]
  val t_to_js: ('R -> Ojs.t) -> 'R t -> Ojs.t
  val t_of_js: (Ojs.t -> 'R) -> Ojs.t -> 'R t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader/read) *)
  val read: ('tags, 'R) this -> 'R ReadableStreamReadResult.t Promise.t [@@js.call "read"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader/releaseLock) *)
  val releaseLock: ('tags, 'R) this -> unit [@@js.call "releaseLock"]
  val cast_from: ('tags, 'R) this -> 'R t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: 'R ReadableStream.t -> 'R t [@@js.create]
end
and ReadableStreamReader : sig
  type 'T t = (ReadableStreamBYOBReader.t, 'T ReadableStreamDefaultReader.t) union2
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
end
and ReadableWritablePair : sig
  type ('R, 'W) t = [`ReadableWritablePair of ('R * 'W)] intf [@@js.custom { of_js=(fun _R _W -> Obj.magic); to_js=(fun _R _W -> Obj.magic) }]
  type 'R t_1 = ('R, any) t
  type t_0 = (any, any) t
  [@@@js.stop]
  type ('R, 'W) tags = [`ReadableWritablePair of ('R * 'W)]
  type 'R tags_1 = ('R, any) tags
  type tags_0 = (any, any) tags
  [@@@js.start]
  [@@@js.implem 
    type ('R, 'W) tags = [`ReadableWritablePair of ('R * 'W)]
    type 'R tags_1 = ('R, any) tags
    type tags_0 = (any, any) tags
  ]
  type ('tags, 'R, 'W) this = 'tags intf constraint 'tags = [> `ReadableWritablePair of ('R * 'W) ]
  val t_to_js: ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) t -> Ojs.t
  val t_of_js: (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t
  val t_1_to_js: ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
  val t_1_of_js: (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_readable: ('tags, 'R, 'W) this -> 'R ReadableStream.t [@@js.get "readable"]
  val set_readable: ('tags, 'R, 'W) this -> 'R ReadableStream.t -> unit [@@js.set "readable"]
  
  (**
    Provides a convenient, chainable way of piping this readable stream through a transform stream (or any other \{ writable, readable \} pair). It simply pipes the stream into the writable side of the supplied pair, and returns the readable side for further use.
    
    Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
  *)
  val get_writable: ('tags, 'R, 'W) this -> 'W WritableStream.t [@@js.get "writable"]
  
  (**
    Provides a convenient, chainable way of piping this readable stream through a transform stream (or any other \{ writable, readable \} pair). It simply pipes the stream into the writable side of the supplied pair, and returns the readable side for further use.
    
    Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
  *)
  val set_writable: ('tags, 'R, 'W) this -> 'W WritableStream.t -> unit [@@js.set "writable"]
  val create: readable:'R ReadableStream.t -> writable:'W WritableStream.t -> unit -> ('R, 'W) t [@@js.builder]
  val cast_from: ('tags, 'R, 'W) this -> ('R, 'W) t [@@js.custom let cast_from = Obj.magic]
end
module EndingType : sig
  type t = ([`L_s200_native[@js "native"] | `L_s318_transparent[@js "transparent"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module BlobPropertyBag : sig
  type t = [`BlobPropertyBag] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BlobPropertyBag]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BlobPropertyBag]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `BlobPropertyBag ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_endings: 'tags this -> EndingType.t option [@@js.get "endings"]
  val set_endings: 'tags this -> EndingType.t -> unit [@@js.set "endings"]
  val get_type: 'tags this -> string option [@@js.get "type"]
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  val create: ?endings:EndingType.t -> ?type_:(string[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module BufferSource : sig
  type t = (ArrayBuffer.t, ArrayBufferView.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Blob)
*)
module[@js.scope "Blob"] rec Blob : sig
  type t = [`Blob] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Blob]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Blob]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Blob/size) *)
  val get_size: 'tags this -> float [@@js.get "size"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Blob/type) *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Blob/arrayBuffer) *)
  val arrayBuffer: 'tags this -> ArrayBuffer.t Promise.t [@@js.call "arrayBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Blob/slice) *)
  val slice: 'tags this -> ?start:float -> ?end_:float -> ?contentType:string -> unit -> t [@@js.call "slice"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Blob/stream) *)
  val stream: 'tags this -> Uint8Array.t ReadableStream.t [@@js.call "stream"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Blob/text) *)
  val text: 'tags this -> string Promise.t [@@js.call "text"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?blobParts:BlobPart.t list -> ?options:BlobPropertyBag.t -> unit -> t [@@js.create]
end
and BlobPart : sig
  type t = ([`String of string | `Other of (Blob.t, BufferSource.t) union2] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module WriteParams : sig
  type t = [`WriteParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WriteParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WriteParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WriteParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_data: 'tags this -> ([`String of string | `Null | `Undefined | `Other of (Blob.t, BufferSource.t) union2] [@js.union on_field "dummy"]) Primitive.t [@@js.get "data"]
  val set_data: 'tags this -> ([`Null | `U1 of BufferSource.t | `U2 of Blob.t | `U3 of string] [@js.union]) -> unit [@@js.set "data"]
  val get_position: 'tags this -> float option [@@js.get "position"]
  val set_position: 'tags this -> float option -> unit [@@js.set "position"]
  val get_size: 'tags this -> float option [@@js.get "size"]
  val set_size: 'tags this -> float option -> unit [@@js.set "size"]
  val get_type: 'tags this -> WriteCommandType.t [@@js.get "type"]
  val set_type: 'tags this -> WriteCommandType.t -> unit [@@js.set "type"]
  val create: ?data:([`String of string | `Other of (Blob.t, BufferSource.t) union2] [@js.union on_field "dummy"]) Primitive.t -> ?position:float -> ?size:float -> type_:(WriteCommandType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FileSystemWriteChunkType : sig
  type t = ([`String of string | `Other of (Blob.t, BufferSource.t, WriteParams.t) union3] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream)
*)
module[@js.scope "FileSystemWritableFileStream"] FileSystemWritableFileStream : sig
  type t = [`FileSystemWritableFileStream | `WritableStream of any] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemWritableFileStream | `WritableStream of any]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemWritableFileStream | `WritableStream of any]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemWritableFileStream ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream/seek) *)
  val seek: 'tags this -> position:float -> unit Promise.t [@@js.call "seek"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream/truncate) *)
  val truncate: 'tags this -> size:float -> unit Promise.t [@@js.call "truncate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream/write) *)
  val write: 'tags this -> data:FileSystemWriteChunkType.t -> unit Promise.t [@@js.call "write"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module FileSystemReadWriteOptions : sig
  type t = [`FileSystemReadWriteOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemReadWriteOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemReadWriteOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemReadWriteOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_at: 'tags this -> float option [@@js.get "at"]
  val set_at: 'tags this -> float -> unit [@@js.set "at"]
  val create: ?at:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemSyncAccessHandle)
*)
module[@js.scope "FileSystemSyncAccessHandle"] FileSystemSyncAccessHandle : sig
  type t = [`FileSystemSyncAccessHandle] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemSyncAccessHandle]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemSyncAccessHandle]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemSyncAccessHandle ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemSyncAccessHandle/close) *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemSyncAccessHandle/flush) *)
  val flush: 'tags this -> unit [@@js.call "flush"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemSyncAccessHandle/getSize) *)
  val getSize: 'tags this -> float [@@js.call "getSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemSyncAccessHandle/read) *)
  val read: 'tags this -> buffer:BufferSource.t -> ?options:FileSystemReadWriteOptions.t -> unit -> float [@@js.call "read"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemSyncAccessHandle/truncate) *)
  val truncate: 'tags this -> newSize:float -> unit [@@js.call "truncate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemSyncAccessHandle/write) *)
  val write: 'tags this -> buffer:BufferSource.t -> ?options:FileSystemReadWriteOptions.t -> unit -> float [@@js.call "write"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module FileSystemHandleKind : sig
  type t = ([`L_s110_directory[@js "directory"] | `L_s132_file[@js "file"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemHandle)
*)
module[@js.scope "FileSystemHandle"] FileSystemHandle : sig
  type t = [`FileSystemHandle] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemHandle]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemHandle]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemHandle ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/kind) *)
  val get_kind: 'tags this -> FileSystemHandleKind.t [@@js.get "kind"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/isSameEntry) *)
  val isSameEntry: 'tags this -> other:t -> bool Promise.t [@@js.call "isSameEntry"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module FileSystemCreateWritableOptions : sig
  type t = [`FileSystemCreateWritableOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemCreateWritableOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemCreateWritableOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemCreateWritableOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_keepExistingData: 'tags this -> bool option [@@js.get "keepExistingData"]
  val set_keepExistingData: 'tags this -> bool -> unit [@@js.set "keepExistingData"]
  val create: ?keepExistingData:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FilePropertyBag : sig
  type t = [`BlobPropertyBag | `FilePropertyBag] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BlobPropertyBag | `FilePropertyBag]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BlobPropertyBag | `FilePropertyBag]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FilePropertyBag ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_lastModified: 'tags this -> float option [@@js.get "lastModified"]
  val set_lastModified: 'tags this -> float -> unit [@@js.set "lastModified"]
  val create: ?lastModified:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Provides information about files and allows JavaScript in a web page to access their content.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/File)
*)
module[@js.scope "File"] File : sig
  type t = [`Blob | `File] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Blob | `File]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Blob | `File]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `File ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/File/lastModified) *)
  val get_lastModified: 'tags this -> float [@@js.get "lastModified"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/File/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/File/webkitRelativePath) *)
  val get_webkitRelativePath: 'tags this -> string [@@js.get "webkitRelativePath"]
  val create: lastModified:float -> name:string -> webkitRelativePath:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': fileBits:BlobPart.t list -> fileName:string -> ?options:FilePropertyBag.t -> unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle)
*)
module[@js.scope "FileSystemFileHandle"] FileSystemFileHandle : sig
  type t = [`FileSystemFileHandle | `FileSystemHandle] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemFileHandle | `FileSystemHandle]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemFileHandle | `FileSystemHandle]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemFileHandle ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/kind) *)
  val get_kind: 'tags this -> ([`L_s132_file[@js "file"]] [@js.enum]) [@@js.get "kind"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle/createSyncAccessHandle) *)
  val createSyncAccessHandle: 'tags this -> FileSystemSyncAccessHandle.t Promise.t [@@js.call "createSyncAccessHandle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle/createWritable) *)
  val createWritable: 'tags this -> ?options:FileSystemCreateWritableOptions.t -> unit -> FileSystemWritableFileStream.t Promise.t [@@js.call "createWritable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle/getFile) *)
  val getFile: 'tags this -> File.t Promise.t [@@js.call "getFile"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle)
*)
module[@js.scope "FileSystemDirectoryHandle"] FileSystemDirectoryHandle : sig
  type t = [`FileSystemDirectoryHandle | `FileSystemHandle] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemDirectoryHandle | `FileSystemHandle]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemDirectoryHandle | `FileSystemHandle]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemDirectoryHandle ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/kind) *)
  val get_kind: 'tags this -> ([`L_s110_directory[@js "directory"]] [@js.enum]) [@@js.get "kind"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/getDirectoryHandle) *)
  val getDirectoryHandle: 'tags this -> name:string -> ?options:FileSystemGetDirectoryOptions.t -> unit -> t Promise.t [@@js.call "getDirectoryHandle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/getFileHandle) *)
  val getFileHandle: 'tags this -> name:string -> ?options:FileSystemGetFileOptions.t -> unit -> FileSystemFileHandle.t Promise.t [@@js.call "getFileHandle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/removeEntry) *)
  val removeEntry: 'tags this -> name:string -> ?options:FileSystemRemoveOptions.t -> unit -> unit Promise.t [@@js.call "removeEntry"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/resolve) *)
  val resolve: 'tags this -> possibleDescendant:FileSystemHandle.t -> string list option Promise.t [@@js.call "resolve"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StorageManager)
*)
module[@js.scope "StorageManager"] StorageManager : sig
  type t = [`StorageManager] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`StorageManager]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`StorageManager]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StorageManager ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StorageManager/estimate) *)
  val estimate: 'tags this -> StorageEstimate.t Promise.t [@@js.call "estimate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StorageManager/getDirectory) *)
  val getDirectory: 'tags this -> FileSystemDirectoryHandle.t Promise.t [@@js.call "getDirectory"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StorageManager/persisted) *)
  val persisted: 'tags this -> bool Promise.t [@@js.call "persisted"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** Available only in secure contexts. *)
module NavigatorStorage : sig
  type t = [`NavigatorStorage] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorStorage]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorStorage]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorStorage ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/storage) *)
  val get_storage: 'tags this -> StorageManager.t [@@js.get "storage"]
  val create: storage:StorageManager.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NavigatorOnLine : sig
  type t = [`NavigatorOnLine] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorOnLine]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorOnLine]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorOnLine ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/onLine) *)
  val get_onLine: 'tags this -> bool [@@js.get "onLine"]
  val create: onLine:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module LockMode : sig
  type t = ([`L_s123_exclusive[@js "exclusive"] | `L_s284_shared[@js "shared"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module LockOptions : sig
  type t = [`LockOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`LockOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`LockOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `LockOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_ifAvailable: 'tags this -> bool option [@@js.get "ifAvailable"]
  val set_ifAvailable: 'tags this -> bool -> unit [@@js.set "ifAvailable"]
  val get_mode: 'tags this -> LockMode.t option [@@js.get "mode"]
  val set_mode: 'tags this -> LockMode.t -> unit [@@js.set "mode"]
  val get_signal: 'tags this -> AbortSignal.t option [@@js.get "signal"]
  val set_signal: 'tags this -> AbortSignal.t -> unit [@@js.set "signal"]
  val get_steal: 'tags this -> bool option [@@js.get "steal"]
  val set_steal: 'tags this -> bool -> unit [@@js.set "steal"]
  val create: ?ifAvailable:bool -> ?mode:LockMode.t -> ?signal:AbortSignal.t -> ?steal:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module LockInfo : sig
  type t = [`LockInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`LockInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`LockInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `LockInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_clientId: 'tags this -> string option [@@js.get "clientId"]
  val set_clientId: 'tags this -> string -> unit [@@js.set "clientId"]
  val get_mode: 'tags this -> LockMode.t option [@@js.get "mode"]
  val set_mode: 'tags this -> LockMode.t -> unit [@@js.set "mode"]
  val get_name: 'tags this -> string option [@@js.get "name"]
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  val create: ?clientId:string -> ?mode:LockMode.t -> ?name:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module LockManagerSnapshot : sig
  type t = [`LockManagerSnapshot] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`LockManagerSnapshot]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`LockManagerSnapshot]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `LockManagerSnapshot ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_held: 'tags this -> LockInfo.t list option [@@js.get "held"]
  val set_held: 'tags this -> LockInfo.t list -> unit [@@js.set "held"]
  val get_pending: 'tags this -> LockInfo.t list option [@@js.get "pending"]
  val set_pending: 'tags this -> LockInfo.t list -> unit [@@js.set "pending"]
  val create: ?held:LockInfo.t list -> ?pending:LockInfo.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Lock)
*)
module[@js.scope "Lock"] Lock : sig
  type t = [`Lock] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Lock]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Lock]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Lock ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Lock/mode) *)
  val get_mode: 'tags this -> LockMode.t [@@js.get "mode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Lock/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  val create: mode:LockMode.t -> name:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module LockGrantedCallback : sig
  type t = [`LockGrantedCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`LockGrantedCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`LockGrantedCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `LockGrantedCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> lock:Lock.t option -> any [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/LockManager)
*)
module[@js.scope "LockManager"] LockManager : sig
  type t = [`LockManager] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`LockManager]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`LockManager]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `LockManager ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/LockManager/query) *)
  val query: 'tags this -> LockManagerSnapshot.t Promise.t [@@js.call "query"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/LockManager/request) *)
  val request: 'tags this -> name:string -> callback:LockGrantedCallback.t -> any Promise.t [@@js.call "request"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/LockManager/request) *)
  val request': 'tags this -> name:string -> options:LockOptions.t -> callback:LockGrantedCallback.t -> any Promise.t [@@js.call "request"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** Available only in secure contexts. *)
module NavigatorLocks : sig
  type t = [`NavigatorLocks] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorLocks]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorLocks]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorLocks ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/locks) *)
  val get_locks: 'tags this -> LockManager.t [@@js.get "locks"]
  val create: locks:LockManager.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NavigatorLanguage : sig
  type t = [`NavigatorLanguage] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorLanguage]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorLanguage]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorLanguage ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/language) *)
  val get_language: 'tags this -> string [@@js.get "language"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/languages) *)
  val get_languages: 'tags this -> string list [@@js.get "languages"]
  val create: language:string -> languages:string list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NavigatorID : sig
  type t = [`NavigatorID] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorID]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorID]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorID ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/appCodeName) *)
  val get_appCodeName: 'tags this -> string [@@js.get "appCodeName"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/appName) *)
  val get_appName: 'tags this -> string [@@js.get "appName"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/appVersion) *)
  val get_appVersion: 'tags this -> string [@@js.get "appVersion"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/platform) *)
  val get_platform: 'tags this -> string [@@js.get "platform"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/product) *)
  val get_product: 'tags this -> string [@@js.get "product"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/userAgent) *)
  val get_userAgent: 'tags this -> string [@@js.get "userAgent"]
  val create: appCodeName:string -> appName:string -> appVersion:string -> platform:string -> product:string -> userAgent:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NavigatorConcurrentHardware : sig
  type t = [`NavigatorConcurrentHardware] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorConcurrentHardware]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorConcurrentHardware]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorConcurrentHardware ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/hardwareConcurrency) *)
  val get_hardwareConcurrency: 'tags this -> float [@@js.get "hardwareConcurrency"]
  val create: hardwareConcurrency:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** Available only in secure contexts. *)
module NavigatorBadge : sig
  type t = [`NavigatorBadge] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorBadge]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorBadge]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorBadge ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/clearAppBadge) *)
  val clearAppBadge: 'tags this -> unit Promise.t [@@js.call "clearAppBadge"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/setAppBadge) *)
  val setAppBadge: 'tags this -> ?contents:float -> unit -> unit Promise.t [@@js.call "setAppBadge"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaEncodingType : sig
  type t = ([`L_s263_record[@js "record"] | `L_s339_webrtc[@js "webrtc"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module TransferFunction : sig
  type t = ([`L_s152_hlg[@js "hlg"] | `L_s242_pq[@js "pq"] | `L_s300_srgb[@js "srgb"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module HdrMetadataType : sig
  type t = ([`L_s290_smpteSt2086[@js "smpteSt2086"] | `L_s291_smpteSt2094_10[@js "smpteSt2094-10"] | `L_s292_smpteSt2094_40[@js "smpteSt2094-40"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ColorGamut : sig
  type t = ([`L_s233_p3[@js "p3"] | `L_s262_rec2020[@js "rec2020"] | `L_s300_srgb[@js "srgb"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module VideoConfiguration : sig
  type t = [`VideoConfiguration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoConfiguration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoConfiguration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoConfiguration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_bitrate: 'tags this -> float [@@js.get "bitrate"]
  val set_bitrate: 'tags this -> float -> unit [@@js.set "bitrate"]
  val get_colorGamut: 'tags this -> ColorGamut.t option [@@js.get "colorGamut"]
  val set_colorGamut: 'tags this -> ColorGamut.t -> unit [@@js.set "colorGamut"]
  val get_contentType: 'tags this -> string [@@js.get "contentType"]
  val set_contentType: 'tags this -> string -> unit [@@js.set "contentType"]
  val get_framerate: 'tags this -> float [@@js.get "framerate"]
  val set_framerate: 'tags this -> float -> unit [@@js.set "framerate"]
  val get_hdrMetadataType: 'tags this -> HdrMetadataType.t option [@@js.get "hdrMetadataType"]
  val set_hdrMetadataType: 'tags this -> HdrMetadataType.t -> unit [@@js.set "hdrMetadataType"]
  val get_height: 'tags this -> float [@@js.get "height"]
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  val get_scalabilityMode: 'tags this -> string option [@@js.get "scalabilityMode"]
  val set_scalabilityMode: 'tags this -> string -> unit [@@js.set "scalabilityMode"]
  val get_transferFunction: 'tags this -> TransferFunction.t option [@@js.get "transferFunction"]
  val set_transferFunction: 'tags this -> TransferFunction.t -> unit [@@js.set "transferFunction"]
  val get_width: 'tags this -> float [@@js.get "width"]
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  val create: bitrate:float -> ?colorGamut:ColorGamut.t -> contentType:string -> framerate:float -> ?hdrMetadataType:HdrMetadataType.t -> height:float -> ?scalabilityMode:string -> ?transferFunction:TransferFunction.t -> width:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AudioConfiguration : sig
  type t = [`AudioConfiguration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioConfiguration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioConfiguration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioConfiguration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_bitrate: 'tags this -> float option [@@js.get "bitrate"]
  val set_bitrate: 'tags this -> float -> unit [@@js.set "bitrate"]
  val get_channels: 'tags this -> string option [@@js.get "channels"]
  val set_channels: 'tags this -> string -> unit [@@js.set "channels"]
  val get_contentType: 'tags this -> string [@@js.get "contentType"]
  val set_contentType: 'tags this -> string -> unit [@@js.set "contentType"]
  val get_samplerate: 'tags this -> float option [@@js.get "samplerate"]
  val set_samplerate: 'tags this -> float -> unit [@@js.set "samplerate"]
  val get_spatialRendering: 'tags this -> bool option [@@js.get "spatialRendering"]
  val set_spatialRendering: 'tags this -> bool -> unit [@@js.set "spatialRendering"]
  val create: ?bitrate:float -> ?channels:string -> contentType:string -> ?samplerate:float -> ?spatialRendering:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaConfiguration : sig
  type t = [`MediaConfiguration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaConfiguration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaConfiguration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaConfiguration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_audio: 'tags this -> AudioConfiguration.t option [@@js.get "audio"]
  val set_audio: 'tags this -> AudioConfiguration.t -> unit [@@js.set "audio"]
  val get_video: 'tags this -> VideoConfiguration.t option [@@js.get "video"]
  val set_video: 'tags this -> VideoConfiguration.t -> unit [@@js.set "video"]
  val create: ?audio:AudioConfiguration.t -> ?video:VideoConfiguration.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaEncodingConfiguration : sig
  type t = [`MediaConfiguration | `MediaEncodingConfiguration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaConfiguration | `MediaEncodingConfiguration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaConfiguration | `MediaEncodingConfiguration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaEncodingConfiguration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_type: 'tags this -> MediaEncodingType.t [@@js.get "type"]
  val set_type: 'tags this -> MediaEncodingType.t -> unit [@@js.set "type"]
  val create: type_:(MediaEncodingType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaCapabilitiesInfo : sig
  type t = [`MediaCapabilitiesInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaCapabilitiesInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaCapabilitiesInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaCapabilitiesInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_powerEfficient: 'tags this -> bool [@@js.get "powerEfficient"]
  val set_powerEfficient: 'tags this -> bool -> unit [@@js.set "powerEfficient"]
  val get_smooth: 'tags this -> bool [@@js.get "smooth"]
  val set_smooth: 'tags this -> bool -> unit [@@js.set "smooth"]
  val get_supported: 'tags this -> bool [@@js.get "supported"]
  val set_supported: 'tags this -> bool -> unit [@@js.set "supported"]
  val create: powerEfficient:bool -> smooth:bool -> supported:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaCapabilitiesEncodingInfo : sig
  type t = [`MediaCapabilitiesEncodingInfo | `MediaCapabilitiesInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaCapabilitiesEncodingInfo | `MediaCapabilitiesInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaCapabilitiesEncodingInfo | `MediaCapabilitiesInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaCapabilitiesEncodingInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_configuration: 'tags this -> MediaEncodingConfiguration.t option [@@js.get "configuration"]
  val set_configuration: 'tags this -> MediaEncodingConfiguration.t -> unit [@@js.set "configuration"]
  val create: ?configuration:MediaEncodingConfiguration.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaDecodingType : sig
  type t = ([`L_s132_file[@js "file"] | `L_s190_media_source[@js "media-source"] | `L_s339_webrtc[@js "webrtc"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module MediaDecodingConfiguration : sig
  type t = [`MediaConfiguration | `MediaDecodingConfiguration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaConfiguration | `MediaDecodingConfiguration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaConfiguration | `MediaDecodingConfiguration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaDecodingConfiguration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_type: 'tags this -> MediaDecodingType.t [@@js.get "type"]
  val set_type: 'tags this -> MediaDecodingType.t -> unit [@@js.set "type"]
  val create: type_:(MediaDecodingType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaCapabilitiesDecodingInfo : sig
  type t = [`MediaCapabilitiesDecodingInfo | `MediaCapabilitiesInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaCapabilitiesDecodingInfo | `MediaCapabilitiesInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaCapabilitiesDecodingInfo | `MediaCapabilitiesInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaCapabilitiesDecodingInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_configuration: 'tags this -> MediaDecodingConfiguration.t option [@@js.get "configuration"]
  val set_configuration: 'tags this -> MediaDecodingConfiguration.t -> unit [@@js.set "configuration"]
  val create: ?configuration:MediaDecodingConfiguration.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaCapabilities) *)
module[@js.scope "MediaCapabilities"] MediaCapabilities : sig
  type t = [`MediaCapabilities] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaCapabilities]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaCapabilities]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaCapabilities ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaCapabilities/decodingInfo) *)
  val decodingInfo: 'tags this -> configuration:MediaDecodingConfiguration.t -> MediaCapabilitiesDecodingInfo.t Promise.t [@@js.call "decodingInfo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaCapabilities/encodingInfo) *)
  val encodingInfo: 'tags this -> configuration:MediaEncodingConfiguration.t -> MediaCapabilitiesEncodingInfo.t Promise.t [@@js.call "encodingInfo"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module[@js.scope "navigator"] NavigatorStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerNavigator/mediaCapabilities) *)
  val mediaCapabilities: unit -> MediaCapabilities.t [@@js.get "mediaCapabilities"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerNavigator/permissions) *)
  val permissions: unit -> Permissions.t [@@js.get "permissions"]
end
module[@js.scope "location"] LocationStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/hash) *)
  val hash: unit -> string [@@js.get "hash"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/host) *)
  val host: unit -> string [@@js.get "host"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/hostname) *)
  val hostname: unit -> string [@@js.get "hostname"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/href) *)
  val href: unit -> string [@@js.get "href"]
  val toString: unit -> string [@@js.global "toString"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/origin) *)
  val origin: unit -> string [@@js.get "origin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/pathname) *)
  val pathname: unit -> string [@@js.get "pathname"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/port) *)
  val port: unit -> string [@@js.get "port"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/protocol) *)
  val protocol: unit -> string [@@js.get "protocol"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/search) *)
  val search: unit -> string [@@js.get "search"]
end
module IDBVersionChangeEventInit : sig
  type t = [`EventInit | `IDBVersionChangeEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `IDBVersionChangeEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `IDBVersionChangeEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBVersionChangeEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_newVersion: 'tags this -> float option [@@js.get "newVersion"]
  val set_newVersion: 'tags this -> float option -> unit [@@js.set "newVersion"]
  val get_oldVersion: 'tags this -> float option [@@js.get "oldVersion"]
  val set_oldVersion: 'tags this -> float -> unit [@@js.set "oldVersion"]
  val create: ?newVersion:float -> ?oldVersion:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This IndexedDB API interface indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler function.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent)
*)
module[@js.scope "IDBVersionChangeEvent"] IDBVersionChangeEvent : sig
  type t = [`Event | `IDBVersionChangeEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `IDBVersionChangeEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `IDBVersionChangeEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBVersionChangeEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent/newVersion) *)
  val get_newVersion: 'tags this -> float option [@@js.get "newVersion"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent/oldVersion) *)
  val get_oldVersion: 'tags this -> float [@@js.get "oldVersion"]
  val create: ?newVersion:float -> oldVersion:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:IDBVersionChangeEventInit.t -> unit -> t [@@js.create]
end
module IDBTransactionDurability : sig
  type t = ([`L_s266_relaxed[@js "relaxed"] | `L_s303_strict[@js "strict"] | `L_s97_default[@js "default"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module IDBTransactionOptions : sig
  type t = [`IDBTransactionOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBTransactionOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBTransactionOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBTransactionOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_durability: 'tags this -> IDBTransactionDurability.t option [@@js.get "durability"]
  val set_durability: 'tags this -> IDBTransactionDurability.t -> unit [@@js.set "durability"]
  val create: ?durability:IDBTransactionDurability.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module IDBObjectStoreParameters : sig
  type t = [`IDBObjectStoreParameters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBObjectStoreParameters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBObjectStoreParameters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBObjectStoreParameters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_autoIncrement: 'tags this -> bool option [@@js.get "autoIncrement"]
  val set_autoIncrement: 'tags this -> bool -> unit [@@js.set "autoIncrement"]
  val get_keyPath: 'tags this -> ([`String of string | `Null | `Undefined | `Other of string list] [@js.union on_field "dummy"]) Primitive.t [@@js.get "keyPath"]
  val set_keyPath: 'tags this -> ([`Null | `U1 of string | `U2 of string list] [@js.union]) -> unit [@@js.set "keyPath"]
  val create: ?autoIncrement:bool -> ?keyPath:([`String of string | `Other of string list] [@js.union on_field "dummy"]) Primitive.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module IDBIndexParameters : sig
  type t = [`IDBIndexParameters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBIndexParameters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBIndexParameters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBIndexParameters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_multiEntry: 'tags this -> bool option [@@js.get "multiEntry"]
  val set_multiEntry: 'tags this -> bool -> unit [@@js.set "multiEntry"]
  val get_unique: 'tags this -> bool option [@@js.get "unique"]
  val set_unique: 'tags this -> bool -> unit [@@js.set "unique"]
  val create: ?multiEntry:bool -> ?unique:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module IDBValidKey : sig
  type t = ([`Number of float | `String of string | `Other of (t list, BufferSource.t, Date.t) union3] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module IDBTransactionMode : sig
  type t = ([`L_s258_readonly[@js "readonly"] | `L_s259_readwrite[@js "readwrite"] | `L_s333_versionchange[@js "versionchange"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module IDBRequestReadyState : sig
  type t = ([`L_s114_done[@js "done"] | `L_s236_pending[@js "pending"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs:
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange)
*)
module[@js.scope "IDBKeyRange"] IDBKeyRange : sig
  type t = [`IDBKeyRange] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBKeyRange]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBKeyRange]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBKeyRange ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns lower bound, or undefined if none.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lower)
  *)
  val get_lower: 'tags this -> any [@@js.get "lower"]
  
  (**
    Returns true if the lower open flag is set, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lowerOpen)
  *)
  val get_lowerOpen: 'tags this -> bool [@@js.get "lowerOpen"]
  
  (**
    Returns upper bound, or undefined if none.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upper)
  *)
  val get_upper: 'tags this -> any [@@js.get "upper"]
  
  (**
    Returns true if the upper open flag is set, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upperOpen)
  *)
  val get_upperOpen: 'tags this -> bool [@@js.get "upperOpen"]
  
  (**
    Returns true if key is included in the range, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/includes)
  *)
  val includes: 'tags this -> key:any -> bool [@@js.call "includes"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  
  (**
    Returns a new IDBKeyRange spanning from lower to upper. If lowerOpen is true, lower is not included in the range. If upperOpen is true, upper is not included in the range.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/bound)
  *)
  val bound: lower:any -> upper:any -> ?lowerOpen:bool -> ?upperOpen:bool -> unit -> t [@@js.global "bound"]
  
  (**
    Returns a new IDBKeyRange starting at key with no upper bound. If open is true, key is not included in the range.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lowerBound)
  *)
  val lowerBound: lower:any -> ?open_:bool -> unit -> t [@@js.global "lowerBound"]
  
  (**
    Returns a new IDBKeyRange spanning only key.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/only)
  *)
  val only: any -> t [@@js.global "only"]
  
  (**
    Returns a new IDBKeyRange with no lower bound and ending at key. If open is true, key is not included in the range.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upperBound)
  *)
  val upperBound: upper:any -> ?open_:bool -> unit -> t [@@js.global "upperBound"]
end
module IDBCursorDirection : sig
  type t = ([`L_s204_next[@js "next"] | `L_s205_nextunique[@js "nextunique"] | `L_s246_prev[@js "prev"] | `L_s247_prevunique[@js "prevunique"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  A type returned by some APIs which contains a list of DOMString (strings).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMStringList)
*)
module[@js.scope "DOMStringList"] DOMStringList : sig
  type t = [`DOMStringList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMStringList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMStringList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMStringList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> string IterableIterator.t *)
  
  (**
    Returns the number of strings in strings.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMStringList/length)
  *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (**
    Returns true if strings contains string, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMStringList/contains)
  *)
  val contains: 'tags this -> string:string -> bool [@@js.call "contains"]
  
  (**
    Returns the string with index index from strings.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMStringList/item)
  *)
  val item: 'tags this -> index:float -> string option [@@js.call "item"]
  val get: 'tags this -> float -> string [@@js.index_get]
  val set: 'tags this -> float -> string -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  An abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMException)
*)
module[@js.scope "DOMException"] DOMException : sig
  type t = [`DOMException] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMException]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMException]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMException ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMException/code) *)
  val get_code: 'tags this -> float [@@js.get "code"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMException/message) *)
  val get_message: 'tags this -> string [@@js.get "message"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMException/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  val get_INDEX_SIZE_ERR: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "INDEX_SIZE_ERR"]
  val get_DOMSTRING_SIZE_ERR: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "DOMSTRING_SIZE_ERR"]
  val get_HIERARCHY_REQUEST_ERR: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "HIERARCHY_REQUEST_ERR"]
  val get_WRONG_DOCUMENT_ERR: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "WRONG_DOCUMENT_ERR"]
  val get_INVALID_CHARACTER_ERR: 'tags this -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "INVALID_CHARACTER_ERR"]
  val get_NO_DATA_ALLOWED_ERR: 'tags this -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "NO_DATA_ALLOWED_ERR"]
  val get_NO_MODIFICATION_ALLOWED_ERR: 'tags this -> ([`L_n_7[@js 7]] [@js.enum]) [@@js.get "NO_MODIFICATION_ALLOWED_ERR"]
  val get_NOT_FOUND_ERR: 'tags this -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "NOT_FOUND_ERR"]
  val get_NOT_SUPPORTED_ERR: 'tags this -> ([`L_n_9[@js 9]] [@js.enum]) [@@js.get "NOT_SUPPORTED_ERR"]
  val get_INUSE_ATTRIBUTE_ERR: 'tags this -> ([`L_n_10[@js 10]] [@js.enum]) [@@js.get "INUSE_ATTRIBUTE_ERR"]
  val get_INVALID_STATE_ERR: 'tags this -> ([`L_n_11[@js 11]] [@js.enum]) [@@js.get "INVALID_STATE_ERR"]
  val get_SYNTAX_ERR: 'tags this -> ([`L_n_12[@js 12]] [@js.enum]) [@@js.get "SYNTAX_ERR"]
  val get_INVALID_MODIFICATION_ERR: 'tags this -> ([`L_n_13[@js 13]] [@js.enum]) [@@js.get "INVALID_MODIFICATION_ERR"]
  val get_NAMESPACE_ERR: 'tags this -> ([`L_n_14[@js 14]] [@js.enum]) [@@js.get "NAMESPACE_ERR"]
  val get_INVALID_ACCESS_ERR: 'tags this -> ([`L_n_15[@js 15]] [@js.enum]) [@@js.get "INVALID_ACCESS_ERR"]
  val get_VALIDATION_ERR: 'tags this -> ([`L_n_16[@js 16]] [@js.enum]) [@@js.get "VALIDATION_ERR"]
  val get_TYPE_MISMATCH_ERR: 'tags this -> ([`L_n_17[@js 17]] [@js.enum]) [@@js.get "TYPE_MISMATCH_ERR"]
  val get_SECURITY_ERR: 'tags this -> ([`L_n_18[@js 18]] [@js.enum]) [@@js.get "SECURITY_ERR"]
  val get_NETWORK_ERR: 'tags this -> ([`L_n_19[@js 19]] [@js.enum]) [@@js.get "NETWORK_ERR"]
  val get_ABORT_ERR: 'tags this -> ([`L_n_20[@js 20]] [@js.enum]) [@@js.get "ABORT_ERR"]
  val get_URL_MISMATCH_ERR: 'tags this -> ([`L_n_21[@js 21]] [@js.enum]) [@@js.get "URL_MISMATCH_ERR"]
  val get_QUOTA_EXCEEDED_ERR: 'tags this -> ([`L_n_22[@js 22]] [@js.enum]) [@@js.get "QUOTA_EXCEEDED_ERR"]
  val get_TIMEOUT_ERR: 'tags this -> ([`L_n_23[@js 23]] [@js.enum]) [@@js.get "TIMEOUT_ERR"]
  val get_INVALID_NODE_TYPE_ERR: 'tags this -> ([`L_n_24[@js 24]] [@js.enum]) [@@js.get "INVALID_NODE_TYPE_ERR"]
  val get_DATA_CLONE_ERR: 'tags this -> ([`L_n_25[@js 25]] [@js.enum]) [@@js.get "DATA_CLONE_ERR"]
  val create: code:float -> message:string -> name:string -> index_size_err:(([`L_n_1[@js 1]] [@js.enum])[@js "INDEX_SIZE_ERR"]) -> domstring_size_err:(([`L_n_2[@js 2]] [@js.enum])[@js "DOMSTRING_SIZE_ERR"]) -> hierarchy_request_err:(([`L_n_3[@js 3]] [@js.enum])[@js "HIERARCHY_REQUEST_ERR"]) -> wrong_document_err:(([`L_n_4[@js 4]] [@js.enum])[@js "WRONG_DOCUMENT_ERR"]) -> invalid_character_err:(([`L_n_5[@js 5]] [@js.enum])[@js "INVALID_CHARACTER_ERR"]) -> no_data_allowed_err:(([`L_n_6[@js 6]] [@js.enum])[@js "NO_DATA_ALLOWED_ERR"]) -> no_modification_allowed_err:(([`L_n_7[@js 7]] [@js.enum])[@js "NO_MODIFICATION_ALLOWED_ERR"]) -> not_found_err:(([`L_n_8[@js 8]] [@js.enum])[@js "NOT_FOUND_ERR"]) -> not_supported_err:(([`L_n_9[@js 9]] [@js.enum])[@js "NOT_SUPPORTED_ERR"]) -> inuse_attribute_err:(([`L_n_10[@js 10]] [@js.enum])[@js "INUSE_ATTRIBUTE_ERR"]) -> invalid_state_err:(([`L_n_11[@js 11]] [@js.enum])[@js "INVALID_STATE_ERR"]) -> syntax_err:(([`L_n_12[@js 12]] [@js.enum])[@js "SYNTAX_ERR"]) -> invalid_modification_err:(([`L_n_13[@js 13]] [@js.enum])[@js "INVALID_MODIFICATION_ERR"]) -> namespace_err:(([`L_n_14[@js 14]] [@js.enum])[@js "NAMESPACE_ERR"]) -> invalid_access_err:(([`L_n_15[@js 15]] [@js.enum])[@js "INVALID_ACCESS_ERR"]) -> validation_err:(([`L_n_16[@js 16]] [@js.enum])[@js "VALIDATION_ERR"]) -> type_mismatch_err:(([`L_n_17[@js 17]] [@js.enum])[@js "TYPE_MISMATCH_ERR"]) -> security_err:(([`L_n_18[@js 18]] [@js.enum])[@js "SECURITY_ERR"]) -> network_err:(([`L_n_19[@js 19]] [@js.enum])[@js "NETWORK_ERR"]) -> abort_err:(([`L_n_20[@js 20]] [@js.enum])[@js "ABORT_ERR"]) -> url_mismatch_err:(([`L_n_21[@js 21]] [@js.enum])[@js "URL_MISMATCH_ERR"]) -> quota_exceeded_err:(([`L_n_22[@js 22]] [@js.enum])[@js "QUOTA_EXCEEDED_ERR"]) -> timeout_err:(([`L_n_23[@js 23]] [@js.enum])[@js "TIMEOUT_ERR"]) -> invalid_node_type_err:(([`L_n_24[@js 24]] [@js.enum])[@js "INVALID_NODE_TYPE_ERR"]) -> data_clone_err:(([`L_n_25[@js 25]] [@js.enum])[@js "DATA_CLONE_ERR"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': ?message:string -> ?name:string -> unit -> t [@@js.create]
  val index_size_err: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "INDEX_SIZE_ERR"]
  val domstring_size_err: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "DOMSTRING_SIZE_ERR"]
  val hierarchy_request_err: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "HIERARCHY_REQUEST_ERR"]
  val wrong_document_err: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "WRONG_DOCUMENT_ERR"]
  val invalid_character_err: unit -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "INVALID_CHARACTER_ERR"]
  val no_data_allowed_err: unit -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "NO_DATA_ALLOWED_ERR"]
  val no_modification_allowed_err: unit -> ([`L_n_7[@js 7]] [@js.enum]) [@@js.get "NO_MODIFICATION_ALLOWED_ERR"]
  val not_found_err: unit -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "NOT_FOUND_ERR"]
  val not_supported_err: unit -> ([`L_n_9[@js 9]] [@js.enum]) [@@js.get "NOT_SUPPORTED_ERR"]
  val inuse_attribute_err: unit -> ([`L_n_10[@js 10]] [@js.enum]) [@@js.get "INUSE_ATTRIBUTE_ERR"]
  val invalid_state_err: unit -> ([`L_n_11[@js 11]] [@js.enum]) [@@js.get "INVALID_STATE_ERR"]
  val syntax_err: unit -> ([`L_n_12[@js 12]] [@js.enum]) [@@js.get "SYNTAX_ERR"]
  val invalid_modification_err: unit -> ([`L_n_13[@js 13]] [@js.enum]) [@@js.get "INVALID_MODIFICATION_ERR"]
  val namespace_err: unit -> ([`L_n_14[@js 14]] [@js.enum]) [@@js.get "NAMESPACE_ERR"]
  val invalid_access_err: unit -> ([`L_n_15[@js 15]] [@js.enum]) [@@js.get "INVALID_ACCESS_ERR"]
  val validation_err: unit -> ([`L_n_16[@js 16]] [@js.enum]) [@@js.get "VALIDATION_ERR"]
  val type_mismatch_err: unit -> ([`L_n_17[@js 17]] [@js.enum]) [@@js.get "TYPE_MISMATCH_ERR"]
  val security_err: unit -> ([`L_n_18[@js 18]] [@js.enum]) [@@js.get "SECURITY_ERR"]
  val network_err: unit -> ([`L_n_19[@js 19]] [@js.enum]) [@@js.get "NETWORK_ERR"]
  val abort_err: unit -> ([`L_n_20[@js 20]] [@js.enum]) [@@js.get "ABORT_ERR"]
  val url_mismatch_err: unit -> ([`L_n_21[@js 21]] [@js.enum]) [@@js.get "URL_MISMATCH_ERR"]
  val quota_exceeded_err: unit -> ([`L_n_22[@js 22]] [@js.enum]) [@@js.get "QUOTA_EXCEEDED_ERR"]
  val timeout_err: unit -> ([`L_n_23[@js 23]] [@js.enum]) [@@js.get "TIMEOUT_ERR"]
  val invalid_node_type_err: unit -> ([`L_n_24[@js 24]] [@js.enum]) [@@js.get "INVALID_NODE_TYPE_ERR"]
  val data_clone_err: unit -> ([`L_n_25[@js 25]] [@js.enum]) [@@js.get "DATA_CLONE_ERR"]
end

(**
  This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor)
*)
module[@js.scope "IDBCursor"] rec IDBCursor : sig
  type t = [`IDBCursor] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBCursor]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBCursor]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBCursor ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the direction ("next", "nextunique", "prev" or "prevunique") of the cursor.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/direction)
  *)
  val get_direction: 'tags this -> IDBCursorDirection.t [@@js.get "direction"]
  
  (**
    Returns the key of the cursor. Throws a "InvalidStateError" DOMException if the cursor is advancing or is finished.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/key)
  *)
  val get_key: 'tags this -> IDBValidKey.t [@@js.get "key"]
  
  (**
    Returns the effective key of the cursor. Throws a "InvalidStateError" DOMException if the cursor is advancing or is finished.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/primaryKey)
  *)
  val get_primaryKey: 'tags this -> IDBValidKey.t [@@js.get "primaryKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/request) *)
  val get_request: 'tags this -> IDBRequest.t_0 [@@js.get "request"]
  
  (**
    Returns the IDBObjectStore or IDBIndex the cursor was opened from.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/source)
  *)
  val get_source: 'tags this -> (IDBIndex.t, IDBObjectStore.t) union2 [@@js.get "source"]
  
  (**
    Advances the cursor through the next count records in range.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/advance)
  *)
  val advance: 'tags this -> count:float -> unit [@@js.call "advance"]
  
  (**
    Advances the cursor to the next record in range.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/continue)
  *)
  val continue: 'tags this -> ?key:IDBValidKey.t -> unit -> unit [@@js.call "continue"]
  
  (**
    Advances the cursor to the next record in range matching or after key and primaryKey. Throws an "InvalidAccessError" DOMException if the source is not an index.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/continuePrimaryKey)
  *)
  val continuePrimaryKey: 'tags this -> key:IDBValidKey.t -> primaryKey:IDBValidKey.t -> unit [@@js.call "continuePrimaryKey"]
  
  (**
    Delete the record pointed at by the cursor with a new value.
    
    If successful, request's result will be undefined.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/delete)
  *)
  val delete: 'tags this -> undefined IDBRequest.t [@@js.call "delete"]
  
  (**
    Updated the record pointed at by the cursor with a new value.
    
    Throws a "DataError" DOMException if the effective object store uses in-line keys and the key would have changed.
    
    If successful, request's result will be the record's key.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/update)
  *)
  val update: 'tags this -> value:any -> IDBValidKey.t IDBRequest.t [@@js.call "update"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue)
*)
and[@js.scope "IDBCursorWithValue"] IDBCursorWithValue : sig
  type t = [`IDBCursor | `IDBCursorWithValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBCursor | `IDBCursorWithValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBCursor | `IDBCursorWithValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBCursorWithValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the cursor's current value.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue/value)
  *)
  val get_value: 'tags this -> any [@@js.get "value"]
  val create: value:any -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  This IndexedDB API interface provides a connection to a database; you can use an IDBDatabase object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase)
*)
and[@js.scope "IDBDatabase"] IDBDatabase : sig
  type t = [`EventTarget | `IDBDatabase] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `IDBDatabase]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `IDBDatabase]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabase ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns a new transaction with the given mode ("readonly" or "readwrite") and scope which can be a single object store name or an array of names.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/transaction)
  *)
  val transaction: 'tags this -> storeNames:([`U1 of string | `U2 of string Iterable.t] [@js.union]) -> ?mode:IDBTransactionMode.t -> ?options:IDBTransactionOptions.t -> unit -> IDBTransaction.t [@@js.call "transaction"]
  
  (**
    Returns the name of the database.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Returns a list of the names of object stores in the database.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/objectStoreNames)
  *)
  val get_objectStoreNames: 'tags this -> DOMStringList.t [@@js.get "objectStoreNames"]
  val get_onabort: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onabort"]
  val set_onabort: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/close_event) *)
  val get_onclose: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/close_event) *)
  val set_onclose: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onclose"]
  val get_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onerror"]
  val set_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/versionchange_event) *)
  val get_onversionchange: 'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option [@@js.get "onversionchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/versionchange_event) *)
  val set_onversionchange: 'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option -> unit [@@js.set "onversionchange"]
  
  (**
    Returns the version of the database.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/version)
  *)
  val get_version: 'tags this -> float [@@js.get "version"]
  
  (**
    Closes the connection once all running transactions have finished.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/close)
  *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (**
    Creates a new object store with the given name and options and returns a new IDBObjectStore.
    
    Throws a "InvalidStateError" DOMException if not called within an upgrade transaction.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/createObjectStore)
  *)
  val createObjectStore: 'tags this -> name:string -> ?options:IDBObjectStoreParameters.t -> unit -> IDBObjectStore.t [@@js.call "createObjectStore"]
  
  (**
    Deletes the object store with the given name.
    
    Throws a "InvalidStateError" DOMException if not called within an upgrade transaction.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/deleteObjectStore)
  *)
  val deleteObjectStore: 'tags this -> name:string -> unit [@@js.call "deleteObjectStore"]
  
  (**
    Returns a new transaction with the given mode ("readonly" or "readwrite") and scope which can be a single object store name or an array of names.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/transaction)
  *)
  val transaction': 'tags this -> storeNames:([`U1 of string | `U2 of string list] [@js.union]) -> ?mode:IDBTransactionMode.t -> ?options:IDBTransactionOptions.t -> unit -> IDBTransaction.t [@@js.call "transaction"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'IDBDatabaseEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'IDBDatabaseEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex)
*)
and[@js.scope "IDBIndex"] IDBIndex : sig
  type t = [`IDBIndex] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBIndex]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBIndex]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBIndex ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/keyPath) *)
  val get_keyPath: 'tags this -> ([`String of string | `Other of string list] [@js.union on_field "dummy"]) Primitive.t [@@js.get "keyPath"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/multiEntry) *)
  val get_multiEntry: 'tags this -> bool [@@js.get "multiEntry"]
  
  (**
    Returns the name of the index.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Returns the name of the index.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/name)
  *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (**
    Returns the IDBObjectStore the index belongs to.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/objectStore)
  *)
  val get_objectStore: 'tags this -> IDBObjectStore.t [@@js.get "objectStore"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/unique) *)
  val get_unique: 'tags this -> bool [@@js.get "unique"]
  
  (**
    Retrieves the number of records matching the given key or key range in query.
    
    If successful, request's result will be the count.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/count)
  *)
  val count: 'tags this -> ?query:([`U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> unit -> float IDBRequest.t [@@js.call "count"]
  
  (**
    Retrieves the value of the first record matching the given key or key range in query.
    
    If successful, request's result will be the value, or undefined if there was no matching record.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/get)
  *)
  val get_: 'tags this -> query:([`U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> any IDBRequest.t [@@js.call "get"]
  
  (**
    Retrieves the values of the records matching the given key or key range in query (up to count if given).
    
    If successful, request's result will be an Array of the values.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/getAll)
  *)
  val getAll: 'tags this -> ?query:([`Null | `U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> ?count:float -> unit -> any list IDBRequest.t [@@js.call "getAll"]
  
  (**
    Retrieves the keys of records matching the given key or key range in query (up to count if given).
    
    If successful, request's result will be an Array of the keys.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/getAllKeys)
  *)
  val getAllKeys: 'tags this -> ?query:([`Null | `U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> ?count:float -> unit -> IDBValidKey.t list IDBRequest.t [@@js.call "getAllKeys"]
  
  (**
    Retrieves the key of the first record matching the given key or key range in query.
    
    If successful, request's result will be the key, or undefined if there was no matching record.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/getKey)
  *)
  val getKey: 'tags this -> query:([`U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> IDBValidKey.t option IDBRequest.t [@@js.call "getKey"]
  
  (**
    Opens a cursor over the records matching query, ordered by direction. If query is null, all records in index are matched.
    
    If successful, request's result will be an IDBCursorWithValue, or null if there were no matching records.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/openCursor)
  *)
  val openCursor: 'tags this -> ?query:([`Null | `U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> ?direction:IDBCursorDirection.t -> unit -> IDBCursorWithValue.t option IDBRequest.t [@@js.call "openCursor"]
  
  (**
    Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in index are matched.
    
    If successful, request's result will be an IDBCursor, or null if there were no matching records.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/openKeyCursor)
  *)
  val openKeyCursor: 'tags this -> ?query:([`Null | `U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> ?direction:IDBCursorDirection.t -> unit -> IDBCursor.t option IDBRequest.t [@@js.call "openKeyCursor"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndexÂ inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see ourÂ To-do NotificationsÂ app (view example live.)
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore)
*)
and[@js.scope "IDBObjectStore"] IDBObjectStore : sig
  type t = [`IDBObjectStore] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBObjectStore]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBObjectStore]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBObjectStore ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a "ConstraintError" DOMException.
    
    Throws an "InvalidStateError" DOMException if not called within an upgrade transaction.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/createIndex)
  *)
  val createIndex: 'tags this -> name:string -> keyPath:([`U1 of string | `U2 of string Iterable.t] [@js.union]) -> ?options:IDBIndexParameters.t -> unit -> IDBIndex.t [@@js.call "createIndex"]
  
  (**
    Returns true if the store has a key generator, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/autoIncrement)
  *)
  val get_autoIncrement: 'tags this -> bool [@@js.get "autoIncrement"]
  
  (**
    Returns a list of the names of indexes in the store.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/indexNames)
  *)
  val get_indexNames: 'tags this -> DOMStringList.t [@@js.get "indexNames"]
  
  (**
    Returns the key path of the store, or null if none.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/keyPath)
  *)
  val get_keyPath: 'tags this -> ([`String of string | `Other of string list] [@js.union on_field "dummy"]) Primitive.t [@@js.get "keyPath"]
  
  (**
    Returns the name of the store.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Returns the name of the store.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/name)
  *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (**
    Returns the associated transaction.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/transaction)
  *)
  val get_transaction: 'tags this -> IDBTransaction.t [@@js.get "transaction"]
  
  (**
    Adds or updates a record in store with the given value and key.
    
    If the store uses in-line keys and key is specified a "DataError" DOMException will be thrown.
    
    If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a "ConstraintError" DOMException.
    
    If successful, request's result will be the record's key.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/add)
  *)
  val add: 'tags this -> value:any -> ?key:IDBValidKey.t -> unit -> IDBValidKey.t IDBRequest.t [@@js.call "add"]
  
  (**
    Deletes all records in store.
    
    If successful, request's result will be undefined.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/clear)
  *)
  val clear: 'tags this -> undefined IDBRequest.t [@@js.call "clear"]
  
  (**
    Retrieves the number of records matching the given key or key range in query.
    
    If successful, request's result will be the count.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/count)
  *)
  val count: 'tags this -> ?query:([`U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> unit -> float IDBRequest.t [@@js.call "count"]
  
  (**
    Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a "ConstraintError" DOMException.
    
    Throws an "InvalidStateError" DOMException if not called within an upgrade transaction.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/createIndex)
  *)
  val createIndex': 'tags this -> name:string -> keyPath:([`U1 of string | `U2 of string list] [@js.union]) -> ?options:IDBIndexParameters.t -> unit -> IDBIndex.t [@@js.call "createIndex"]
  
  (**
    Deletes records in store with the given key or in the given key range in query.
    
    If successful, request's result will be undefined.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/delete)
  *)
  val delete: 'tags this -> query:([`U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> undefined IDBRequest.t [@@js.call "delete"]
  
  (**
    Deletes the index in store with the given name.
    
    Throws an "InvalidStateError" DOMException if not called within an upgrade transaction.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/deleteIndex)
  *)
  val deleteIndex: 'tags this -> name:string -> unit [@@js.call "deleteIndex"]
  
  (**
    Retrieves the value of the first record matching the given key or key range in query.
    
    If successful, request's result will be the value, or undefined if there was no matching record.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/get)
  *)
  val get_: 'tags this -> query:([`U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> any IDBRequest.t [@@js.call "get"]
  
  (**
    Retrieves the values of the records matching the given key or key range in query (up to count if given).
    
    If successful, request's result will be an Array of the values.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/getAll)
  *)
  val getAll: 'tags this -> ?query:([`Null | `U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> ?count:float -> unit -> any list IDBRequest.t [@@js.call "getAll"]
  
  (**
    Retrieves the keys of records matching the given key or key range in query (up to count if given).
    
    If successful, request's result will be an Array of the keys.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/getAllKeys)
  *)
  val getAllKeys: 'tags this -> ?query:([`Null | `U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> ?count:float -> unit -> IDBValidKey.t list IDBRequest.t [@@js.call "getAllKeys"]
  
  (**
    Retrieves the key of the first record matching the given key or key range in query.
    
    If successful, request's result will be the key, or undefined if there was no matching record.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/getKey)
  *)
  val getKey: 'tags this -> query:([`U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> IDBValidKey.t option IDBRequest.t [@@js.call "getKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/index) *)
  val index: 'tags this -> name:string -> IDBIndex.t [@@js.call "index"]
  
  (**
    Opens a cursor over the records matching query, ordered by direction. If query is null, all records in store are matched.
    
    If successful, request's result will be an IDBCursorWithValue pointing at the first matching record, or null if there were no matching records.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/openCursor)
  *)
  val openCursor: 'tags this -> ?query:([`Null | `U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> ?direction:IDBCursorDirection.t -> unit -> IDBCursorWithValue.t option IDBRequest.t [@@js.call "openCursor"]
  
  (**
    Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in store are matched.
    
    If successful, request's result will be an IDBCursor pointing at the first matching record, or null if there were no matching records.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/openKeyCursor)
  *)
  val openKeyCursor: 'tags this -> ?query:([`Null | `U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> ?direction:IDBCursorDirection.t -> unit -> IDBCursor.t option IDBRequest.t [@@js.call "openKeyCursor"]
  
  (**
    Adds or updates a record in store with the given value and key.
    
    If the store uses in-line keys and key is specified a "DataError" DOMException will be thrown.
    
    If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a "ConstraintError" DOMException.
    
    If successful, request's result will be the record's key.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/put)
  *)
  val put: 'tags this -> value:any -> ?key:IDBValidKey.t -> unit -> IDBValidKey.t IDBRequest.t [@@js.call "put"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the IDBRequest instance.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest)
*)
and[@js.scope "IDBRequest"] IDBRequest : sig
  type 'T t = [`EventTarget | `IDBRequest of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'T tags = [`EventTarget | `IDBRequest of 'T]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`EventTarget | `IDBRequest of 'T]
    type tags_0 = any tags
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `IDBRequest of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (**
    When a request is completed, returns the error (a DOMException), or null if the request succeeded. Throws a "InvalidStateError" DOMException if the request is still pending.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/error)
  *)
  val get_error: ('tags, 'T) this -> DOMException.t option [@@js.get "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/error_event) *)
  val get_onerror: ('tags, 'T) this -> (this:'T t -> ev:Event.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/error_event) *)
  val set_onerror: ('tags, 'T) this -> (this:'T t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/success_event) *)
  val get_onsuccess: ('tags, 'T) this -> (this:'T t -> ev:Event.t -> any) option [@@js.get "onsuccess"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/success_event) *)
  val set_onsuccess: ('tags, 'T) this -> (this:'T t -> ev:Event.t -> any) option -> unit [@@js.set "onsuccess"]
  
  (**
    Returns "pending" until a request is complete, then returns "done".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/readyState)
  *)
  val get_readyState: ('tags, 'T) this -> IDBRequestReadyState.t [@@js.get "readyState"]
  
  (**
    When a request is completed, returns the result, or undefined if the request failed. Throws a "InvalidStateError" DOMException if the request is still pending.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/result)
  *)
  val get_result: ('tags, 'T) this -> 'T [@@js.get "result"]
  
  (**
    Returns the IDBObjectStore, IDBIndex, or IDBCursor the request was made against, or null if is was an open request.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/source)
  *)
  val get_source: ('tags, 'T) this -> (IDBCursor.t, IDBIndex.t, IDBObjectStore.t) union3 [@@js.get "source"]
  
  (**
    Returns the IDBTransaction the request was made within. If this as an open request, then it returns an upgrade transaction while it is running, or null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/transaction)
  *)
  val get_transaction: ('tags, 'T) this -> IDBTransaction.t option [@@js.get "transaction"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: ('tags, 'T) this -> type_:'K -> listener:(this:'T t -> ev:(* FIXME: unknown type 'IDBRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': ('tags, 'T) this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: ('tags, 'T) this -> type_:'K -> listener:(this:'T t -> ev:(* FIXME: unknown type 'IDBRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': ('tags, 'T) this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: unit -> t_0 [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction) *)
and[@js.scope "IDBTransaction"] IDBTransaction : sig
  type t = [`EventTarget | `IDBTransaction] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `IDBTransaction]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `IDBTransaction]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBTransaction ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the transaction's connection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/db)
  *)
  val get_db: 'tags this -> IDBDatabase.t [@@js.get "db"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/durability) *)
  val get_durability: 'tags this -> IDBTransactionDurability.t [@@js.get "durability"]
  
  (**
    If the transaction was aborted, returns the error (a DOMException) providing the reason.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error)
  *)
  val get_error: 'tags this -> DOMException.t option [@@js.get "error"]
  
  (**
    Returns the mode the transaction was created with ("readonly" or "readwrite"), or "versionchange" for an upgrade transaction.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/mode)
  *)
  val get_mode: 'tags this -> IDBTransactionMode.t [@@js.get "mode"]
  
  (**
    Returns a list of the names of object stores in the transaction's scope. For an upgrade transaction this is all object stores in the database.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/objectStoreNames)
  *)
  val get_objectStoreNames: 'tags this -> DOMStringList.t [@@js.get "objectStoreNames"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/abort_event) *)
  val get_onabort: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/abort_event) *)
  val set_onabort: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/complete_event) *)
  val get_oncomplete: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "oncomplete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/complete_event) *)
  val set_oncomplete: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "oncomplete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (**
    Aborts the transaction. All pending requests will fail with a "AbortError" DOMException and all changes made to the database will be reverted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/abort)
  *)
  val abort: 'tags this -> unit [@@js.call "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/commit) *)
  val commit: 'tags this -> unit [@@js.call "commit"]
  
  (**
    Returns an IDBObjectStore in the transaction's scope.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/objectStore)
  *)
  val objectStore: 'tags this -> name:string -> IDBObjectStore.t [@@js.call "objectStore"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'IDBTransactionEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'IDBTransactionEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Also inherits methods from its parents IDBRequest and EventTarget.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest)
*)
module[@js.scope "IDBOpenDBRequest"] IDBOpenDBRequest : sig
  type t = [`EventTarget | `IDBOpenDBRequest | `IDBRequest of IDBDatabase.t] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `IDBOpenDBRequest | `IDBRequest of IDBDatabase.t]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `IDBOpenDBRequest | `IDBRequest of IDBDatabase.t]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBOpenDBRequest ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/blocked_event) *)
  val get_onblocked: 'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option [@@js.get "onblocked"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/blocked_event) *)
  val set_onblocked: 'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option -> unit [@@js.set "onblocked"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/upgradeneeded_event) *)
  val get_onupgradeneeded: 'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option [@@js.get "onupgradeneeded"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/upgradeneeded_event) *)
  val set_onupgradeneeded: 'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option -> unit [@@js.set "onupgradeneeded"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'IDBOpenDBRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'IDBOpenDBRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module IDBDatabaseInfo : sig
  type t = [`IDBDatabaseInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBDatabaseInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBDatabaseInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_name: 'tags this -> string option [@@js.get "name"]
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  val get_version: 'tags this -> float option [@@js.get "version"]
  val set_version: 'tags this -> float -> unit [@@js.set "version"]
  val create: ?name:string -> ?version:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module[@js.scope "indexedDB"] IndexedDBStatic : sig
  
  (**
    Compares two values as keys. Returns -1 if key1 precedes key2, 1 if key2 precedes key1, and 0 if the keys are equal.
    
    Throws a "DataError" DOMException if either input is not a valid key.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory/cmp)
  *)
  val cmp: first:any -> second:any -> float [@@js.global "cmp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory/databases) *)
  val databases: unit -> IDBDatabaseInfo.t list Promise.t [@@js.global "databases"]
  
  (**
    Attempts to delete the named database. If the database already exists and there are open connections that don't close in response to a versionchange event, the request will be blocked until all they close. If the request is successful request's result will be null.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory/deleteDatabase)
  *)
  val deleteDatabase: string -> IDBOpenDBRequest.t [@@js.global "deleteDatabase"]
  
  (**
    Attempts to open a connection to the named database with the current version, or 1 if it does not already exist. If the request is successful request's result will be the connection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory/open)
  *)
  val open_: name:string -> ?version:float -> unit -> IDBOpenDBRequest.t [@@js.global "open"]
end
module FontFaceSetLoadStatus : sig
  type t = ([`L_s177_loaded[@js "loaded"] | `L_s179_loading[@js "loading"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module FontFaceLoadStatus : sig
  type t = ([`L_s120_error[@js "error"] | `L_s177_loaded[@js "loaded"] | `L_s179_loading[@js "loading"] | `L_s325_unloaded[@js "unloaded"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module FontDisplay : sig
  type t = ([`L_s130_fallback[@js "fallback"] | `L_s228_optional[@js "optional"] | `L_s309_swap[@js "swap"] | `L_s60_auto[@js "auto"] | `L_s67_block[@js "block"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module FontFaceDescriptors : sig
  type t = [`FontFaceDescriptors] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FontFaceDescriptors]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FontFaceDescriptors]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FontFaceDescriptors ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_ascentOverride: 'tags this -> string option [@@js.get "ascentOverride"]
  val set_ascentOverride: 'tags this -> string -> unit [@@js.set "ascentOverride"]
  val get_descentOverride: 'tags this -> string option [@@js.get "descentOverride"]
  val set_descentOverride: 'tags this -> string -> unit [@@js.set "descentOverride"]
  val get_display: 'tags this -> FontDisplay.t option [@@js.get "display"]
  val set_display: 'tags this -> FontDisplay.t -> unit [@@js.set "display"]
  val get_featureSettings: 'tags this -> string option [@@js.get "featureSettings"]
  val set_featureSettings: 'tags this -> string -> unit [@@js.set "featureSettings"]
  val get_lineGapOverride: 'tags this -> string option [@@js.get "lineGapOverride"]
  val set_lineGapOverride: 'tags this -> string -> unit [@@js.set "lineGapOverride"]
  val get_stretch: 'tags this -> string option [@@js.get "stretch"]
  val set_stretch: 'tags this -> string -> unit [@@js.set "stretch"]
  val get_style: 'tags this -> string option [@@js.get "style"]
  val set_style: 'tags this -> string -> unit [@@js.set "style"]
  val get_unicodeRange: 'tags this -> string option [@@js.get "unicodeRange"]
  val set_unicodeRange: 'tags this -> string -> unit [@@js.set "unicodeRange"]
  val get_variant: 'tags this -> string option [@@js.get "variant"]
  val set_variant: 'tags this -> string -> unit [@@js.set "variant"]
  val get_weight: 'tags this -> string option [@@js.get "weight"]
  val set_weight: 'tags this -> string -> unit [@@js.set "weight"]
  val create: ?ascentOverride:string -> ?descentOverride:string -> ?display:FontDisplay.t -> ?featureSettings:string -> ?lineGapOverride:string -> ?stretch:string -> ?style:string -> ?unicodeRange:string -> ?variant:string -> ?weight:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module BinaryData : sig
  type t = (ArrayBuffer.t, ArrayBufferView.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace) *)
module[@js.scope "FontFace"] FontFace : sig
  type t = [`FontFace] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FontFace]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FontFace]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FontFace ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/ascentOverride) *)
  val get_ascentOverride: 'tags this -> string [@@js.get "ascentOverride"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/ascentOverride) *)
  val set_ascentOverride: 'tags this -> string -> unit [@@js.set "ascentOverride"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/descentOverride) *)
  val get_descentOverride: 'tags this -> string [@@js.get "descentOverride"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/descentOverride) *)
  val set_descentOverride: 'tags this -> string -> unit [@@js.set "descentOverride"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/display) *)
  val get_display: 'tags this -> FontDisplay.t [@@js.get "display"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/display) *)
  val set_display: 'tags this -> FontDisplay.t -> unit [@@js.set "display"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/family) *)
  val get_family: 'tags this -> string [@@js.get "family"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/family) *)
  val set_family: 'tags this -> string -> unit [@@js.set "family"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/featureSettings) *)
  val get_featureSettings: 'tags this -> string [@@js.get "featureSettings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/featureSettings) *)
  val set_featureSettings: 'tags this -> string -> unit [@@js.set "featureSettings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/lineGapOverride) *)
  val get_lineGapOverride: 'tags this -> string [@@js.get "lineGapOverride"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/lineGapOverride) *)
  val set_lineGapOverride: 'tags this -> string -> unit [@@js.set "lineGapOverride"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/loaded) *)
  val get_loaded: 'tags this -> t Promise.t [@@js.get "loaded"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/status) *)
  val get_status: 'tags this -> FontFaceLoadStatus.t [@@js.get "status"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/stretch) *)
  val get_stretch: 'tags this -> string [@@js.get "stretch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/stretch) *)
  val set_stretch: 'tags this -> string -> unit [@@js.set "stretch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/style) *)
  val get_style: 'tags this -> string [@@js.get "style"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/style) *)
  val set_style: 'tags this -> string -> unit [@@js.set "style"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/unicodeRange) *)
  val get_unicodeRange: 'tags this -> string [@@js.get "unicodeRange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/unicodeRange) *)
  val set_unicodeRange: 'tags this -> string -> unit [@@js.set "unicodeRange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/variant) *)
  val get_variant: 'tags this -> string [@@js.get "variant"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/variant) *)
  val set_variant: 'tags this -> string -> unit [@@js.set "variant"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/weight) *)
  val get_weight: 'tags this -> string [@@js.get "weight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/weight) *)
  val set_weight: 'tags this -> string -> unit [@@js.set "weight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/load) *)
  val load: 'tags this -> t Promise.t [@@js.call "load"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: family:string -> source:([`U1 of string | `U2 of BinaryData.t] [@js.union]) -> ?descriptors:FontFaceDescriptors.t -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet) *)
module[@js.scope "FontFaceSet"] FontFaceSet : sig
  type t = [`EventTarget | `FontFaceSet] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `FontFaceSet]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `FontFaceSet]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSet ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loading_event) *)
  val get_onloading: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onloading"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loading_event) *)
  val set_onloading: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onloading"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingdone_event) *)
  val get_onloadingdone: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onloadingdone"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingdone_event) *)
  val set_onloadingdone: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onloadingdone"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingerror_event) *)
  val get_onloadingerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onloadingerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingerror_event) *)
  val set_onloadingerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onloadingerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/ready) *)
  val get_ready: 'tags this -> t Promise.t [@@js.get "ready"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/status) *)
  val get_status: 'tags this -> FontFaceSetLoadStatus.t [@@js.get "status"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/check) *)
  val check: 'tags this -> font:string -> ?text:string -> unit -> bool [@@js.call "check"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/load) *)
  val load: 'tags this -> font:string -> ?text:string -> unit -> FontFace.t list Promise.t [@@js.call "load"]
  val forEach: 'tags this -> callbackfn:(value:FontFace.t -> key:FontFace.t -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'FontFaceSetEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'FontFaceSetEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: FontFace.t list -> t [@@js.create]
end
module[@js.scope "fonts"] FontsStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loading_event) *)
  val onloading: unit -> (this:FontFaceSet.t -> ev:Event.t -> any) option [@@js.get "onloading"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingdone_event) *)
  val onloadingdone: unit -> (this:FontFaceSet.t -> ev:Event.t -> any) option [@@js.get "onloadingdone"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingerror_event) *)
  val onloadingerror: unit -> (this:FontFaceSet.t -> ev:Event.t -> any) option [@@js.get "onloadingerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/ready) *)
  val ready: unit -> FontFaceSet.t Promise.t [@@js.get "ready"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/status) *)
  val status: unit -> FontFaceSetLoadStatus.t [@@js.get "status"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/check) *)
  val check: font:string -> ?text:string -> unit -> bool [@@js.global "check"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/load) *)
  val load: font:string -> ?text:string -> unit -> FontFace.t list Promise.t [@@js.global "load"]
  val forEach: callbackfn:(value:FontFace.t -> key:FontFace.t -> parent:FontFaceSet.t -> unit) -> ?thisArg:any -> unit -> unit [@@js.global "forEach"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: type_:'K -> listener:(this:FontFaceSet.t -> ev:(* FIXME: unknown type 'FontFaceSetEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: type_:'K -> listener:(this:FontFaceSet.t -> ev:(* FIXME: unknown type 'FontFaceSetEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "removeEventListener"]
end
module Algorithm : sig
  type t = [`Algorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Algorithm ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_name: 'tags this -> string [@@js.get "name"]
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  val create: name:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RsaPssParams : sig
  type t = [`Algorithm | `RsaPssParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `RsaPssParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `RsaPssParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RsaPssParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_saltLength: 'tags this -> float [@@js.get "saltLength"]
  val set_saltLength: 'tags this -> float -> unit [@@js.set "saltLength"]
  val create: saltLength:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RsaOaepParams : sig
  type t = [`Algorithm | `RsaOaepParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `RsaOaepParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `RsaOaepParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RsaOaepParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_label: 'tags this -> BufferSource.t option [@@js.get "label"]
  val set_label: 'tags this -> BufferSource.t -> unit [@@js.set "label"]
  val create: ?label:BufferSource.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module BigInteger : sig
  type t = Uint8Array.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RsaKeyGenParams : sig
  type t = [`Algorithm | `RsaKeyGenParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `RsaKeyGenParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `RsaKeyGenParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RsaKeyGenParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_modulusLength: 'tags this -> float [@@js.get "modulusLength"]
  val set_modulusLength: 'tags this -> float -> unit [@@js.set "modulusLength"]
  val get_publicExponent: 'tags this -> BigInteger.t [@@js.get "publicExponent"]
  val set_publicExponent: 'tags this -> BigInteger.t -> unit [@@js.set "publicExponent"]
  val create: modulusLength:float -> publicExponent:BigInteger.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AlgorithmIdentifier : sig
  type t = ([`String of string | `Other of Algorithm.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module HashAlgorithmIdentifier : sig
  type t = AlgorithmIdentifier.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RsaHashedKeyGenParams : sig
  type t = [`Algorithm | `RsaHashedKeyGenParams | `RsaKeyGenParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `RsaHashedKeyGenParams | `RsaKeyGenParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `RsaHashedKeyGenParams | `RsaKeyGenParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RsaHashedKeyGenParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_hash: 'tags this -> HashAlgorithmIdentifier.t [@@js.get "hash"]
  val set_hash: 'tags this -> HashAlgorithmIdentifier.t -> unit [@@js.set "hash"]
  val create: hash:HashAlgorithmIdentifier.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RsaHashedImportParams : sig
  type t = [`Algorithm | `RsaHashedImportParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `RsaHashedImportParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `RsaHashedImportParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RsaHashedImportParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_hash: 'tags this -> HashAlgorithmIdentifier.t [@@js.get "hash"]
  val set_hash: 'tags this -> HashAlgorithmIdentifier.t -> unit [@@js.set "hash"]
  val create: hash:HashAlgorithmIdentifier.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module Pbkdf2Params : sig
  type t = [`Algorithm | `Pbkdf2Params] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `Pbkdf2Params]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `Pbkdf2Params]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Pbkdf2Params ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_hash: 'tags this -> HashAlgorithmIdentifier.t [@@js.get "hash"]
  val set_hash: 'tags this -> HashAlgorithmIdentifier.t -> unit [@@js.set "hash"]
  val get_iterations: 'tags this -> float [@@js.get "iterations"]
  val set_iterations: 'tags this -> float -> unit [@@js.set "iterations"]
  val get_salt: 'tags this -> BufferSource.t [@@js.get "salt"]
  val set_salt: 'tags this -> BufferSource.t -> unit [@@js.set "salt"]
  val create: hash:HashAlgorithmIdentifier.t -> iterations:float -> salt:BufferSource.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module KeyFormat : sig
  type t = ([`L_s168_jwk[@js "jwk"] | `L_s241_pkcs8[@js "pkcs8"] | `L_s257_raw[@js "raw"] | `L_s298_spki[@js "spki"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RsaOtherPrimesInfo : sig
  type t = [`RsaOtherPrimesInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RsaOtherPrimesInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RsaOtherPrimesInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RsaOtherPrimesInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_d: 'tags this -> string option [@@js.get "d"]
  val set_d: 'tags this -> string -> unit [@@js.set "d"]
  val get_r: 'tags this -> string option [@@js.get "r"]
  val set_r: 'tags this -> string -> unit [@@js.set "r"]
  val get_t: 'tags this -> string option [@@js.get "t"]
  val set_t: 'tags this -> string -> unit [@@js.set "t"]
  val create: ?d:string -> ?r:string -> ?t:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module JsonWebKey : sig
  type t = [`JsonWebKey] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`JsonWebKey]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`JsonWebKey]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `JsonWebKey ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_alg: 'tags this -> string option [@@js.get "alg"]
  val set_alg: 'tags this -> string -> unit [@@js.set "alg"]
  val get_crv: 'tags this -> string option [@@js.get "crv"]
  val set_crv: 'tags this -> string -> unit [@@js.set "crv"]
  val get_d: 'tags this -> string option [@@js.get "d"]
  val set_d: 'tags this -> string -> unit [@@js.set "d"]
  val get_dp: 'tags this -> string option [@@js.get "dp"]
  val set_dp: 'tags this -> string -> unit [@@js.set "dp"]
  val get_dq: 'tags this -> string option [@@js.get "dq"]
  val set_dq: 'tags this -> string -> unit [@@js.set "dq"]
  val get_e: 'tags this -> string option [@@js.get "e"]
  val set_e: 'tags this -> string -> unit [@@js.set "e"]
  val get_ext: 'tags this -> bool option [@@js.get "ext"]
  val set_ext: 'tags this -> bool -> unit [@@js.set "ext"]
  val get_k: 'tags this -> string option [@@js.get "k"]
  val set_k: 'tags this -> string -> unit [@@js.set "k"]
  val get_key_ops: 'tags this -> string list option [@@js.get "key_ops"]
  val set_key_ops: 'tags this -> string list -> unit [@@js.set "key_ops"]
  val get_kty: 'tags this -> string option [@@js.get "kty"]
  val set_kty: 'tags this -> string -> unit [@@js.set "kty"]
  val get_n: 'tags this -> string option [@@js.get "n"]
  val set_n: 'tags this -> string -> unit [@@js.set "n"]
  val get_oth: 'tags this -> RsaOtherPrimesInfo.t list option [@@js.get "oth"]
  val set_oth: 'tags this -> RsaOtherPrimesInfo.t list -> unit [@@js.set "oth"]
  val get_p: 'tags this -> string option [@@js.get "p"]
  val set_p: 'tags this -> string -> unit [@@js.set "p"]
  val get_q: 'tags this -> string option [@@js.get "q"]
  val set_q: 'tags this -> string -> unit [@@js.set "q"]
  val get_qi: 'tags this -> string option [@@js.get "qi"]
  val set_qi: 'tags this -> string -> unit [@@js.set "qi"]
  val get_use: 'tags this -> string option [@@js.get "use"]
  val set_use: 'tags this -> string -> unit [@@js.set "use"]
  val get_x: 'tags this -> string option [@@js.get "x"]
  val set_x: 'tags this -> string -> unit [@@js.set "x"]
  val get_y: 'tags this -> string option [@@js.get "y"]
  val set_y: 'tags this -> string -> unit [@@js.set "y"]
  val create: ?alg:string -> ?crv:string -> ?d:string -> ?dp:string -> ?dq:string -> ?e:string -> ?ext:bool -> ?k:string -> ?key_ops:string list -> ?kty:string -> ?n:string -> ?oth:RsaOtherPrimesInfo.t list -> ?p:string -> ?q:string -> ?qi:string -> ?use:string -> ?x:string -> ?y:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module HmacKeyGenParams : sig
  type t = [`Algorithm | `HmacKeyGenParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `HmacKeyGenParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `HmacKeyGenParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HmacKeyGenParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_hash: 'tags this -> HashAlgorithmIdentifier.t [@@js.get "hash"]
  val set_hash: 'tags this -> HashAlgorithmIdentifier.t -> unit [@@js.set "hash"]
  val get_length: 'tags this -> float option [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val create: hash:HashAlgorithmIdentifier.t -> ?length:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module HmacImportParams : sig
  type t = [`Algorithm | `HmacImportParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `HmacImportParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `HmacImportParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HmacImportParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_hash: 'tags this -> HashAlgorithmIdentifier.t [@@js.get "hash"]
  val set_hash: 'tags this -> HashAlgorithmIdentifier.t -> unit [@@js.set "hash"]
  val get_length: 'tags this -> float option [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val create: hash:HashAlgorithmIdentifier.t -> ?length:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module HkdfParams : sig
  type t = [`Algorithm | `HkdfParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `HkdfParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `HkdfParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HkdfParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_hash: 'tags this -> HashAlgorithmIdentifier.t [@@js.get "hash"]
  val set_hash: 'tags this -> HashAlgorithmIdentifier.t -> unit [@@js.set "hash"]
  val get_info: 'tags this -> BufferSource.t [@@js.get "info"]
  val set_info: 'tags this -> BufferSource.t -> unit [@@js.set "info"]
  val get_salt: 'tags this -> BufferSource.t [@@js.get "salt"]
  val set_salt: 'tags this -> BufferSource.t -> unit [@@js.set "salt"]
  val create: hash:HashAlgorithmIdentifier.t -> info:BufferSource.t -> salt:BufferSource.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module EcdsaParams : sig
  type t = [`Algorithm | `EcdsaParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `EcdsaParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `EcdsaParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EcdsaParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_hash: 'tags this -> HashAlgorithmIdentifier.t [@@js.get "hash"]
  val set_hash: 'tags this -> HashAlgorithmIdentifier.t -> unit [@@js.set "hash"]
  val create: hash:HashAlgorithmIdentifier.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module KeyUsage : sig
  type t = ([`L_s103_deriveBits[@js "deriveBits"] | `L_s104_deriveKey[@js "deriveKey"] | `L_s117_encrypt[@js "encrypt"] | `L_s287_sign[@js "sign"] | `L_s327_unwrapKey[@js "unwrapKey"] | `L_s332_verify[@js "verify"] | `L_s342_wrapKey[@js "wrapKey"] | `L_s96_decrypt[@js "decrypt"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module KeyType : sig
  type t = ([`L_s248_private[@js "private"] | `L_s252_public[@js "public"] | `L_s280_secret[@js "secret"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module KeyAlgorithm : sig
  type t = [`KeyAlgorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`KeyAlgorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`KeyAlgorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `KeyAlgorithm ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_name: 'tags this -> string [@@js.get "name"]
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  val create: name:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The CryptoKey dictionary of the Web Crypto API represents a cryptographic key.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CryptoKey)
*)
module[@js.scope "CryptoKey"] CryptoKey : sig
  type t = [`CryptoKey] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CryptoKey]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CryptoKey]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CryptoKey ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CryptoKey/algorithm) *)
  val get_algorithm: 'tags this -> KeyAlgorithm.t [@@js.get "algorithm"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CryptoKey/extractable) *)
  val get_extractable: 'tags this -> bool [@@js.get "extractable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CryptoKey/type) *)
  val get_type: 'tags this -> KeyType.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CryptoKey/usages) *)
  val get_usages: 'tags this -> KeyUsage.t list [@@js.get "usages"]
  val create: algorithm:KeyAlgorithm.t -> extractable:bool -> type_:(KeyType.t[@js "type"]) -> usages:KeyUsage.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module EcdhKeyDeriveParams : sig
  type t = [`Algorithm | `EcdhKeyDeriveParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `EcdhKeyDeriveParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `EcdhKeyDeriveParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EcdhKeyDeriveParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_public: 'tags this -> CryptoKey.t [@@js.get "public"]
  val set_public: 'tags this -> CryptoKey.t -> unit [@@js.set "public"]
  val create: public:CryptoKey.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NamedCurve : sig
  type t = string
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module EcKeyImportParams : sig
  type t = [`Algorithm | `EcKeyImportParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `EcKeyImportParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `EcKeyImportParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EcKeyImportParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_namedCurve: 'tags this -> NamedCurve.t [@@js.get "namedCurve"]
  val set_namedCurve: 'tags this -> NamedCurve.t -> unit [@@js.set "namedCurve"]
  val create: namedCurve:NamedCurve.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module EcKeyGenParams : sig
  type t = [`Algorithm | `EcKeyGenParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `EcKeyGenParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `EcKeyGenParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EcKeyGenParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_namedCurve: 'tags this -> NamedCurve.t [@@js.get "namedCurve"]
  val set_namedCurve: 'tags this -> NamedCurve.t -> unit [@@js.set "namedCurve"]
  val create: namedCurve:NamedCurve.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CryptoKeyPair : sig
  type t = [`CryptoKeyPair] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CryptoKeyPair]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CryptoKeyPair]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CryptoKeyPair ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_privateKey: 'tags this -> CryptoKey.t [@@js.get "privateKey"]
  val set_privateKey: 'tags this -> CryptoKey.t -> unit [@@js.set "privateKey"]
  val get_publicKey: 'tags this -> CryptoKey.t [@@js.get "publicKey"]
  val set_publicKey: 'tags this -> CryptoKey.t -> unit [@@js.set "publicKey"]
  val create: privateKey:CryptoKey.t -> publicKey:CryptoKey.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AesKeyGenParams : sig
  type t = [`AesKeyGenParams | `Algorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AesKeyGenParams | `Algorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AesKeyGenParams | `Algorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AesKeyGenParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_length: 'tags this -> float [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val create: length:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AesKeyAlgorithm : sig
  type t = [`AesKeyAlgorithm | `KeyAlgorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AesKeyAlgorithm | `KeyAlgorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AesKeyAlgorithm | `KeyAlgorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AesKeyAlgorithm ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_length: 'tags this -> float [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val create: length:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AesGcmParams : sig
  type t = [`AesGcmParams | `Algorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AesGcmParams | `Algorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AesGcmParams | `Algorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AesGcmParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_additionalData: 'tags this -> BufferSource.t option [@@js.get "additionalData"]
  val set_additionalData: 'tags this -> BufferSource.t -> unit [@@js.set "additionalData"]
  val get_iv: 'tags this -> BufferSource.t [@@js.get "iv"]
  val set_iv: 'tags this -> BufferSource.t -> unit [@@js.set "iv"]
  val get_tagLength: 'tags this -> float option [@@js.get "tagLength"]
  val set_tagLength: 'tags this -> float -> unit [@@js.set "tagLength"]
  val create: ?additionalData:BufferSource.t -> iv:BufferSource.t -> ?tagLength:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AesDerivedKeyParams : sig
  type t = [`AesDerivedKeyParams | `Algorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AesDerivedKeyParams | `Algorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AesDerivedKeyParams | `Algorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AesDerivedKeyParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_length: 'tags this -> float [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val create: length:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AesCtrParams : sig
  type t = [`AesCtrParams | `Algorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AesCtrParams | `Algorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AesCtrParams | `Algorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AesCtrParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_counter: 'tags this -> BufferSource.t [@@js.get "counter"]
  val set_counter: 'tags this -> BufferSource.t -> unit [@@js.set "counter"]
  val get_length: 'tags this -> float [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val create: counter:BufferSource.t -> length:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AesCbcParams : sig
  type t = [`AesCbcParams | `Algorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AesCbcParams | `Algorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AesCbcParams | `Algorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AesCbcParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_iv: 'tags this -> BufferSource.t [@@js.get "iv"]
  val set_iv: 'tags this -> BufferSource.t -> unit [@@js.set "iv"]
  val create: iv:BufferSource.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via Window.crypto).
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto)
*)
module[@js.scope "SubtleCrypto"] SubtleCrypto : sig
  type t = [`SubtleCrypto] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SubtleCrypto]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SubtleCrypto]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SubtleCrypto ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveKey) *)
  val deriveKey: 'tags this -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of EcdhKeyDeriveParams.t | `U3 of HkdfParams.t | `U4 of Pbkdf2Params.t] [@js.union]) -> baseKey:CryptoKey.t -> derivedKeyType:([`U1 of AlgorithmIdentifier.t | `U2 of AesDerivedKeyParams.t | `U3 of HmacImportParams.t | `U4 of HkdfParams.t | `U5 of Pbkdf2Params.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t Iterable.t -> CryptoKey.t Promise.t [@@js.call "deriveKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey) *)
  val generateKey: 'tags this -> algorithm:([`U1 of RsaHashedKeyGenParams.t | `U2 of EcKeyGenParams.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t [@@js.call "generateKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey) *)
  val generateKey': 'tags this -> algorithm:([`U1 of AesKeyGenParams.t | `U2 of HmacKeyGenParams.t | `U3 of Pbkdf2Params.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t [@@js.call "generateKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey) *)
  val generateKey'': 'tags this -> algorithm:AlgorithmIdentifier.t -> extractable:bool -> keyUsages:KeyUsage.t Iterable.t -> (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t [@@js.call "generateKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey) *)
  val importKey: 'tags this -> format:([`L_s168_jwk[@js "jwk"]] [@js.enum]) -> keyData:JsonWebKey.t -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaHashedImportParams.t | `U3 of EcKeyImportParams.t | `U4 of HmacImportParams.t | `U5 of AesKeyAlgorithm.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t [@@js.call "importKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey) *)
  val importKey': 'tags this -> format:(KeyFormat.t, ([`L_s168_jwk[@js "jwk"]] [@js.enum])) Exclude.t -> keyData:BufferSource.t -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaHashedImportParams.t | `U3 of EcKeyImportParams.t | `U4 of HmacImportParams.t | `U5 of AesKeyAlgorithm.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t Iterable.t -> CryptoKey.t Promise.t [@@js.call "importKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/unwrapKey) *)
  val unwrapKey: 'tags this -> format:KeyFormat.t -> wrappedKey:BufferSource.t -> unwrappingKey:CryptoKey.t -> unwrapAlgorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaOaepParams.t | `U3 of AesCtrParams.t | `U4 of AesCbcParams.t | `U5 of AesGcmParams.t] [@js.union]) -> unwrappedKeyAlgorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaHashedImportParams.t | `U3 of EcKeyImportParams.t | `U4 of HmacImportParams.t | `U5 of AesKeyAlgorithm.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t Iterable.t -> CryptoKey.t Promise.t [@@js.call "unwrapKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/decrypt) *)
  val decrypt: 'tags this -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaOaepParams.t | `U3 of AesCtrParams.t | `U4 of AesCbcParams.t | `U5 of AesGcmParams.t] [@js.union]) -> key:CryptoKey.t -> data:BufferSource.t -> ArrayBuffer.t Promise.t [@@js.call "decrypt"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveBits) *)
  val deriveBits: 'tags this -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of EcdhKeyDeriveParams.t | `U3 of HkdfParams.t | `U4 of Pbkdf2Params.t] [@js.union]) -> baseKey:CryptoKey.t -> length:float -> ArrayBuffer.t Promise.t [@@js.call "deriveBits"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveKey) *)
  val deriveKey': 'tags this -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of EcdhKeyDeriveParams.t | `U3 of HkdfParams.t | `U4 of Pbkdf2Params.t] [@js.union]) -> baseKey:CryptoKey.t -> derivedKeyType:([`U1 of AlgorithmIdentifier.t | `U2 of AesDerivedKeyParams.t | `U3 of HmacImportParams.t | `U4 of HkdfParams.t | `U5 of Pbkdf2Params.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t [@@js.call "deriveKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/digest) *)
  val digest: 'tags this -> algorithm:AlgorithmIdentifier.t -> data:BufferSource.t -> ArrayBuffer.t Promise.t [@@js.call "digest"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/encrypt) *)
  val encrypt: 'tags this -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaOaepParams.t | `U3 of AesCtrParams.t | `U4 of AesCbcParams.t | `U5 of AesGcmParams.t] [@js.union]) -> key:CryptoKey.t -> data:BufferSource.t -> ArrayBuffer.t Promise.t [@@js.call "encrypt"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/exportKey) *)
  val exportKey: 'tags this -> format:([`L_s168_jwk[@js "jwk"]] [@js.enum]) -> key:CryptoKey.t -> JsonWebKey.t Promise.t [@@js.call "exportKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/exportKey) *)
  val exportKey': 'tags this -> format:(KeyFormat.t, ([`L_s168_jwk[@js "jwk"]] [@js.enum])) Exclude.t -> key:CryptoKey.t -> ArrayBuffer.t Promise.t [@@js.call "exportKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey) *)
  val generateKey''': 'tags this -> algorithm:([`U1 of RsaHashedKeyGenParams.t | `U2 of EcKeyGenParams.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t [@@js.call "generateKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey) *)
  val generateKey'''': 'tags this -> algorithm:([`U1 of AesKeyGenParams.t | `U2 of HmacKeyGenParams.t | `U3 of Pbkdf2Params.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t [@@js.call "generateKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey) *)
  val generateKey''''': 'tags this -> algorithm:AlgorithmIdentifier.t -> extractable:bool -> keyUsages:KeyUsage.t list -> (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t [@@js.call "generateKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey) *)
  val importKey'': 'tags this -> format:([`L_s168_jwk[@js "jwk"]] [@js.enum]) -> keyData:JsonWebKey.t -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaHashedImportParams.t | `U3 of EcKeyImportParams.t | `U4 of HmacImportParams.t | `U5 of AesKeyAlgorithm.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t [@@js.call "importKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey) *)
  val importKey''': 'tags this -> format:(KeyFormat.t, ([`L_s168_jwk[@js "jwk"]] [@js.enum])) Exclude.t -> keyData:BufferSource.t -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaHashedImportParams.t | `U3 of EcKeyImportParams.t | `U4 of HmacImportParams.t | `U5 of AesKeyAlgorithm.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t [@@js.call "importKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/sign) *)
  val sign: 'tags this -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaPssParams.t | `U3 of EcdsaParams.t] [@js.union]) -> key:CryptoKey.t -> data:BufferSource.t -> ArrayBuffer.t Promise.t [@@js.call "sign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/unwrapKey) *)
  val unwrapKey': 'tags this -> format:KeyFormat.t -> wrappedKey:BufferSource.t -> unwrappingKey:CryptoKey.t -> unwrapAlgorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaOaepParams.t | `U3 of AesCtrParams.t | `U4 of AesCbcParams.t | `U5 of AesGcmParams.t] [@js.union]) -> unwrappedKeyAlgorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaHashedImportParams.t | `U3 of EcKeyImportParams.t | `U4 of HmacImportParams.t | `U5 of AesKeyAlgorithm.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t [@@js.call "unwrapKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/verify) *)
  val verify: 'tags this -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaPssParams.t | `U3 of EcdsaParams.t] [@js.union]) -> key:CryptoKey.t -> signature:BufferSource.t -> data:BufferSource.t -> bool Promise.t [@@js.call "verify"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/wrapKey) *)
  val wrapKey: 'tags this -> format:KeyFormat.t -> key:CryptoKey.t -> wrappingKey:CryptoKey.t -> wrapAlgorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaOaepParams.t | `U3 of AesCtrParams.t | `U4 of AesCbcParams.t | `U5 of AesGcmParams.t] [@js.union]) -> ArrayBuffer.t Promise.t [@@js.call "wrapKey"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module[@js.scope "crypto"] CryptoStatic : sig
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Crypto/subtle)
  *)
  val subtle: unit -> SubtleCrypto.t [@@js.get "subtle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Crypto/getRandomValues) *)
  val getRandomValues: 'T -> 'T [@@js.global "getRandomValues"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Crypto/randomUUID)
  *)
  val randomUUID: unit -> (* FIXME: unknown type '`${string}-${string}-${string}-${string}-${string}`' *)any [@@js.global "randomUUID"]
end
module[@js.scope "console"] ConsoleStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/assert) *)
  val assert_: ?condition:bool -> data:(any list [@js.variadic]) -> unit -> unit [@@js.global "assert"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/clear) *)
  val clear: unit -> unit [@@js.global "clear"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/count) *)
  val count: ?label:string -> unit -> unit [@@js.global "count"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/countReset) *)
  val countReset: ?label:string -> unit -> unit [@@js.global "countReset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/debug) *)
  val debug: (any list [@js.variadic]) -> unit [@@js.global "debug"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/dir) *)
  val dir: ?item:any -> ?options:any -> unit -> unit [@@js.global "dir"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/dirxml) *)
  val dirxml: (any list [@js.variadic]) -> unit [@@js.global "dirxml"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/error) *)
  val error: (any list [@js.variadic]) -> unit [@@js.global "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/group) *)
  val group: (any list [@js.variadic]) -> unit [@@js.global "group"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/groupCollapsed) *)
  val groupCollapsed: (any list [@js.variadic]) -> unit [@@js.global "groupCollapsed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/groupEnd) *)
  val groupEnd: unit -> unit [@@js.global "groupEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/info) *)
  val info: (any list [@js.variadic]) -> unit [@@js.global "info"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/log) *)
  val log: (any list [@js.variadic]) -> unit [@@js.global "log"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/table) *)
  val table: ?tabularData:any -> ?properties:string list -> unit -> unit [@@js.global "table"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/time) *)
  val time: ?label:string -> unit -> unit [@@js.global "time"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/timeEnd) *)
  val timeEnd: ?label:string -> unit -> unit [@@js.global "timeEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/timeLog) *)
  val timeLog: ?label:string -> data:(any list [@js.variadic]) -> unit -> unit [@@js.global "timeLog"]
  
  (**
    This method does not display anything unless used in the inspector.
     Adds an event with the label `label` to the Timeline panel of the inspector.
  *)
  val timeStamp: ?label:string -> unit -> unit [@@js.global "timeStamp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/trace) *)
  val trace: (any list [@js.variadic]) -> unit [@@js.global "trace"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/warn) *)
  val warn: (any list [@js.variadic]) -> unit [@@js.global "warn"]
end
module CacheQueryOptions : sig
  type t = [`CacheQueryOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CacheQueryOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CacheQueryOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CacheQueryOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_ignoreMethod: 'tags this -> bool option [@@js.get "ignoreMethod"]
  val set_ignoreMethod: 'tags this -> bool -> unit [@@js.set "ignoreMethod"]
  val get_ignoreSearch: 'tags this -> bool option [@@js.get "ignoreSearch"]
  val set_ignoreSearch: 'tags this -> bool -> unit [@@js.set "ignoreSearch"]
  val get_ignoreVary: 'tags this -> bool option [@@js.get "ignoreVary"]
  val set_ignoreVary: 'tags this -> bool -> unit [@@js.set "ignoreVary"]
  val create: ?ignoreMethod:bool -> ?ignoreSearch:bool -> ?ignoreVary:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MultiCacheQueryOptions : sig
  type t = [`CacheQueryOptions | `MultiCacheQueryOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CacheQueryOptions | `MultiCacheQueryOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CacheQueryOptions | `MultiCacheQueryOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MultiCacheQueryOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_cacheName: 'tags this -> string option [@@js.get "cacheName"]
  val set_cacheName: 'tags this -> string -> unit [@@js.set "cacheName"]
  val create: ?cacheName:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ResponseType : sig
  type t = ([`L_s120_error[@js "error"] | `L_s223_opaque[@js "opaque"] | `L_s224_opaqueredirect[@js "opaqueredirect"] | `L_s63_basic[@js "basic"] | `L_s94_cors[@js "cors"] | `L_s97_default[@js "default"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  This Fetch API interface allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consistsÂ of zero or more name and value pairs. Â You can add to this using methods like append() (see Examples.)Â In all methods of this interface, header names are matched by case-insensitive byte sequence.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Headers)
*)
module[@js.scope "Headers"] rec Headers : sig
  type t = [`Headers] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Headers]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Headers]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> (string * string) IterableIterator.t *)
  
  (** Returns an iterator allowing to go through all key/value pairs contained in this object. *)
  val entries: 'tags this -> (string * string) IterableIterator.t [@@js.call "entries"]
  
  (** Returns an iterator allowing to go through all keys of the key/value pairs contained in this object. *)
  val keys: 'tags this -> string IterableIterator.t [@@js.call "keys"]
  
  (** Returns an iterator allowing to go through all values of the key/value pairs contained in this object. *)
  val values: 'tags this -> string IterableIterator.t [@@js.call "values"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Headers/append) *)
  val append: 'tags this -> name:string -> value:string -> unit [@@js.call "append"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Headers/delete) *)
  val delete: 'tags this -> name:string -> unit [@@js.call "delete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Headers/get) *)
  val get_: 'tags this -> name:string -> string option [@@js.call "get"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Headers/has) *)
  val has: 'tags this -> name:string -> bool [@@js.call "has"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Headers/set) *)
  val set_: 'tags this -> name:string -> value:string -> unit [@@js.call "set"]
  val forEach: 'tags this -> callbackfn:(value:string -> key:string -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?init:HeadersInit.t -> unit -> t [@@js.create]
end
and HeadersInit : sig
  type t = ((string * string) list, Headers.t, (string, string) Record.t) union3
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ResponseInit : sig
  type t = [`ResponseInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ResponseInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ResponseInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ResponseInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_headers: 'tags this -> HeadersInit.t option [@@js.get "headers"]
  val set_headers: 'tags this -> HeadersInit.t -> unit [@@js.set "headers"]
  val get_status: 'tags this -> float option [@@js.get "status"]
  val set_status: 'tags this -> float -> unit [@@js.set "status"]
  val get_statusText: 'tags this -> string option [@@js.get "statusText"]
  val set_statusText: 'tags this -> string -> unit [@@js.set "statusText"]
  val create: ?headers:HeadersInit.t -> ?status:float -> ?statusText:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams)
  
  
  `URLSearchParams` class is a global reference for `require('url').URLSearchParams`
  https://nodejs.org/api/url.html#class-urlsearchparams
*)
module[@js.scope "URLSearchParams"] URLSearchParams : sig
  type t = [`URLSearchParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`URLSearchParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`URLSearchParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `URLSearchParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> (string * string) IterableIterator.t *)
  
  (** Returns an array of key, value pairs for every entry in the search params. *)
  val entries: 'tags this -> (string * string) IterableIterator.t [@@js.call "entries"]
  
  (** Returns a list of keys in the search params. *)
  val keys: 'tags this -> string IterableIterator.t [@@js.call "keys"]
  
  (** Returns a list of values in the search params. *)
  val values: 'tags this -> string IterableIterator.t [@@js.call "values"]
  
  (**
    Appends a specified key/value pair as a new search parameter.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams/append)
  *)
  val append: 'tags this -> name:string -> value:string -> unit [@@js.call "append"]
  
  (**
    Deletes the given search parameter, and its associated value, from the list of all search parameters.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams/delete)
  *)
  val delete: 'tags this -> name:string -> unit [@@js.call "delete"]
  
  (**
    Returns the first value associated to the given search parameter.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams/get)
  *)
  val get_: 'tags this -> name:string -> string option [@@js.call "get"]
  
  (**
    Returns all the values association with a given search parameter.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams/getAll)
  *)
  val getAll: 'tags this -> name:string -> string list [@@js.call "getAll"]
  
  (**
    Returns a Boolean indicating if such a search parameter exists.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams/has)
  *)
  val has: 'tags this -> name:string -> bool [@@js.call "has"]
  
  (**
    Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams/set)
  *)
  val set_: 'tags this -> name:string -> value:string -> unit [@@js.call "set"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams/sort) *)
  val sort: 'tags this -> unit [@@js.call "sort"]
  
  (** Returns a string containing a query string suitable for use in a URL. Does not include the question mark. *)
  val toString: 'tags this -> string [@@js.call "toString"]
  val forEach: 'tags this -> callbackfn:(value:string -> key:string -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?init:([`U1 of string list list | `U2 of (string, string) Record.t | `U3 of string | `U4 of t] [@js.union]) -> unit -> t [@@js.create]
end

(**
  The URLÂ interface represents an object providing static methods used for creating object URLs.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL)
  
  
  `URL` class is a global reference for `require('url').URL`
  https://nodejs.org/api/url.html#the-whatwg-url-api
*)
module[@js.scope "URL"] URL : sig
  type t = [`URL] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`URL]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`URL]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `URL ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/hash) *)
  val get_hash: 'tags this -> string [@@js.get "hash"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/hash) *)
  val set_hash: 'tags this -> string -> unit [@@js.set "hash"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/host) *)
  val get_host: 'tags this -> string [@@js.get "host"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/host) *)
  val set_host: 'tags this -> string -> unit [@@js.set "host"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/hostname) *)
  val get_hostname: 'tags this -> string [@@js.get "hostname"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/hostname) *)
  val set_hostname: 'tags this -> string -> unit [@@js.set "hostname"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/href) *)
  val get_href: 'tags this -> string [@@js.get "href"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/href) *)
  val set_href: 'tags this -> string -> unit [@@js.set "href"]
  val toString: 'tags this -> string [@@js.call "toString"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/origin) *)
  val get_origin: 'tags this -> string [@@js.get "origin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/password) *)
  val get_password: 'tags this -> string [@@js.get "password"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/password) *)
  val set_password: 'tags this -> string -> unit [@@js.set "password"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/pathname) *)
  val get_pathname: 'tags this -> string [@@js.get "pathname"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/pathname) *)
  val set_pathname: 'tags this -> string -> unit [@@js.set "pathname"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/port) *)
  val get_port: 'tags this -> string [@@js.get "port"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/port) *)
  val set_port: 'tags this -> string -> unit [@@js.set "port"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/protocol) *)
  val get_protocol: 'tags this -> string [@@js.get "protocol"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/protocol) *)
  val set_protocol: 'tags this -> string -> unit [@@js.set "protocol"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/search) *)
  val get_search: 'tags this -> string [@@js.get "search"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/search) *)
  val set_search: 'tags this -> string -> unit [@@js.set "search"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/searchParams) *)
  val get_searchParams: 'tags this -> URLSearchParams.t [@@js.get "searchParams"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/username) *)
  val get_username: 'tags this -> string [@@js.get "username"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/username) *)
  val set_username: 'tags this -> string -> unit [@@js.set "username"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/toJSON) *)
  val toJSON: 'tags this -> string [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: url:([`U1 of string | `U2 of t] [@js.union]) -> ?base:([`U1 of string | `U2 of t] [@js.union]) -> unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/createObjectURL) *)
  val createObjectURL: Blob.t -> string [@@js.global "createObjectURL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/revokeObjectURL) *)
  val revokeObjectURL: string -> unit [@@js.global "revokeObjectURL"]
end
module FormDataEntryValue : sig
  type t = ([`String of string | `Other of File.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to "multipart/form-data".
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData)
*)
module[@js.scope "FormData"] FormData : sig
  type t = [`FormData] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FormData]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FormData]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FormData ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> (string * FormDataEntryValue.t) IterableIterator.t *)
  
  (** Returns an array of key, value pairs for every entry in the list. *)
  val entries: 'tags this -> (string * FormDataEntryValue.t) IterableIterator.t [@@js.call "entries"]
  
  (** Returns a list of keys in the list. *)
  val keys: 'tags this -> string IterableIterator.t [@@js.call "keys"]
  
  (** Returns a list of values in the list. *)
  val values: 'tags this -> FormDataEntryValue.t IterableIterator.t [@@js.call "values"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/append) *)
  val append: 'tags this -> name:string -> value:([`U1 of string | `U2 of Blob.t] [@js.union]) -> unit [@@js.call "append"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/append) *)
  val append': 'tags this -> name:string -> value:string -> unit [@@js.call "append"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/append) *)
  val append'': 'tags this -> name:string -> blobValue:Blob.t -> ?filename:string -> unit -> unit [@@js.call "append"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/delete) *)
  val delete: 'tags this -> name:string -> unit [@@js.call "delete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/get) *)
  val get_: 'tags this -> name:string -> FormDataEntryValue.t option [@@js.call "get"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/getAll) *)
  val getAll: 'tags this -> name:string -> FormDataEntryValue.t list [@@js.call "getAll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/has) *)
  val has: 'tags this -> name:string -> bool [@@js.call "has"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/set) *)
  val set_: 'tags this -> name:string -> value:([`U1 of string | `U2 of Blob.t] [@js.union]) -> unit [@@js.call "set"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/set) *)
  val set_': 'tags this -> name:string -> value:string -> unit [@@js.call "set"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/set) *)
  val set_'': 'tags this -> name:string -> blobValue:Blob.t -> ?filename:string -> unit -> unit [@@js.call "set"]
  val forEach: 'tags this -> callbackfn:(value:FormDataEntryValue.t -> key:string -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module XMLHttpRequestBodyInit : sig
  type t = ([`String of string | `Other of (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t) union4] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module BodyInit : sig
  type t = (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module Body : sig
  type t = [`Body] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Body]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Body]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Body ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/body) *)
  val get_body: 'tags this -> Uint8Array.t ReadableStream.t option [@@js.get "body"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/bodyUsed) *)
  val get_bodyUsed: 'tags this -> bool [@@js.get "bodyUsed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/arrayBuffer) *)
  val arrayBuffer: 'tags this -> ArrayBuffer.t Promise.t [@@js.call "arrayBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/blob) *)
  val blob: 'tags this -> Blob.t Promise.t [@@js.call "blob"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/formData) *)
  val formData: 'tags this -> FormData.t Promise.t [@@js.call "formData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/json) *)
  val json: 'tags this -> any Promise.t [@@js.call "json"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/text) *)
  val text: 'tags this -> string Promise.t [@@js.call "text"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Fetch API interface represents the response to a request.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response)
*)
module[@js.scope "Response"] Response : sig
  type t = [`Body | `Response] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Body | `Response]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Body | `Response]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Response ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/headers) *)
  val get_headers: 'tags this -> Headers.t [@@js.get "headers"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/ok) *)
  val get_ok: 'tags this -> bool [@@js.get "ok"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/redirected) *)
  val get_redirected: 'tags this -> bool [@@js.get "redirected"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/status) *)
  val get_status: 'tags this -> float [@@js.get "status"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/statusText) *)
  val get_statusText: 'tags this -> string [@@js.get "statusText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/type) *)
  val get_type: 'tags this -> ResponseType.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/url) *)
  val get_url: 'tags this -> string [@@js.get "url"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/clone) *)
  val clone: 'tags this -> t [@@js.call "clone"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?body:BodyInit.t option -> ?init:ResponseInit.t -> unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/error) *)
  val error: unit -> t [@@js.global "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/redirect) *)
  val redirect: url:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?status:float -> unit -> t [@@js.global "redirect"]
end
module RequestRedirect : sig
  type t = ([`L_s120_error[@js "error"] | `L_s135_follow[@js "follow"] | `L_s188_manual[@js "manual"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RequestMode : sig
  type t = ([`L_s201_navigate[@js "navigate"] | `L_s207_no_cors[@js "no-cors"] | `L_s275_same_origin[@js "same-origin"] | `L_s94_cors[@js "cors"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RequestCredentials : sig
  type t = ([`L_s161_include[@js "include"] | `L_s220_omit[@js "omit"] | `L_s275_same_origin[@js "same-origin"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RequestCache : sig
  type t = ([`L_s137_force_cache[@js "force-cache"] | `L_s206_no_cache[@js "no-cache"] | `L_s211_no_store[@js "no-store"] | `L_s222_only_if_cached[@js "only-if-cached"] | `L_s267_reload[@js "reload"] | `L_s97_default[@js "default"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ReferrerPolicy : sig
  type t = ([`L_s0[@js ""] | `L_s209_no_referrer[@js "no-referrer"] | `L_s210_no_referrer_when_downgrade[@js "no-referrer-when-downgrade"] | `L_s229_origin[@js "origin"] | `L_s230_origin_when_cross_origin[@js "origin-when-cross-origin"] | `L_s275_same_origin[@js "same-origin"] | `L_s304_strict_origin[@js "strict-origin"] | `L_s305_strict_origin_when_cross_origin[@js "strict-origin-when-cross-origin"] | `L_s326_unsafe_url[@js "unsafe-url"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RequestInit : sig
  type t = [`RequestInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RequestInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RequestInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RequestInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** A BodyInit object or null to set request's body. *)
  val get_body: 'tags this -> BodyInit.t option [@@js.get "body"]
  
  (** A BodyInit object or null to set request's body. *)
  val set_body: 'tags this -> BodyInit.t option -> unit [@@js.set "body"]
  
  (** A string indicating how the request will interact with the browser's cache to set request's cache. *)
  val get_cache: 'tags this -> RequestCache.t option [@@js.get "cache"]
  
  (** A string indicating how the request will interact with the browser's cache to set request's cache. *)
  val set_cache: 'tags this -> RequestCache.t -> unit [@@js.set "cache"]
  
  (** A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials. *)
  val get_credentials: 'tags this -> RequestCredentials.t option [@@js.get "credentials"]
  
  (** A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials. *)
  val set_credentials: 'tags this -> RequestCredentials.t -> unit [@@js.set "credentials"]
  
  (** A Headers object, an object literal, or an array of two-item arrays to set request's headers. *)
  val get_headers: 'tags this -> HeadersInit.t option [@@js.get "headers"]
  
  (** A Headers object, an object literal, or an array of two-item arrays to set request's headers. *)
  val set_headers: 'tags this -> HeadersInit.t -> unit [@@js.set "headers"]
  
  (** A cryptographic hash of the resource to be fetched by request. Sets request's integrity. *)
  val get_integrity: 'tags this -> string option [@@js.get "integrity"]
  
  (** A cryptographic hash of the resource to be fetched by request. Sets request's integrity. *)
  val set_integrity: 'tags this -> string -> unit [@@js.set "integrity"]
  
  (** A boolean to set request's keepalive. *)
  val get_keepalive: 'tags this -> bool option [@@js.get "keepalive"]
  
  (** A boolean to set request's keepalive. *)
  val set_keepalive: 'tags this -> bool -> unit [@@js.set "keepalive"]
  
  (** A string to set request's method. *)
  val get_method: 'tags this -> string option [@@js.get "method"]
  
  (** A string to set request's method. *)
  val set_method: 'tags this -> string -> unit [@@js.set "method"]
  
  (** A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode. *)
  val get_mode: 'tags this -> RequestMode.t option [@@js.get "mode"]
  
  (** A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode. *)
  val set_mode: 'tags this -> RequestMode.t -> unit [@@js.set "mode"]
  
  (** A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect. *)
  val get_redirect: 'tags this -> RequestRedirect.t option [@@js.get "redirect"]
  
  (** A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect. *)
  val set_redirect: 'tags this -> RequestRedirect.t -> unit [@@js.set "redirect"]
  
  (** A string whose value is a same-origin URL, "about:client", or the empty string, to set request's referrer. *)
  val get_referrer: 'tags this -> string option [@@js.get "referrer"]
  
  (** A string whose value is a same-origin URL, "about:client", or the empty string, to set request's referrer. *)
  val set_referrer: 'tags this -> string -> unit [@@js.set "referrer"]
  
  (** A referrer policy to set request's referrerPolicy. *)
  val get_referrerPolicy: 'tags this -> ReferrerPolicy.t option [@@js.get "referrerPolicy"]
  
  (** A referrer policy to set request's referrerPolicy. *)
  val set_referrerPolicy: 'tags this -> ReferrerPolicy.t -> unit [@@js.set "referrerPolicy"]
  
  (** An AbortSignal to set request's signal. *)
  val get_signal: 'tags this -> AbortSignal.t option [@@js.get "signal"]
  
  (** An AbortSignal to set request's signal. *)
  val set_signal: 'tags this -> AbortSignal.t option -> unit [@@js.set "signal"]
  
  (** Can only be null. Used to disassociate request from any Window. *)
  val get_window: 'tags this -> undefined option [@@js.get "window"]
  
  (** Can only be null. Used to disassociate request from any Window. *)
  val set_window: 'tags this -> null -> unit [@@js.set "window"]
  val create: ?body:BodyInit.t -> ?cache:RequestCache.t -> ?credentials:RequestCredentials.t -> ?headers:HeadersInit.t -> ?integrity:string -> ?keepalive:bool -> ?method_:(string[@js "method"]) -> ?mode:RequestMode.t -> ?redirect:RequestRedirect.t -> ?referrer:string -> ?referrerPolicy:ReferrerPolicy.t -> ?signal:AbortSignal.t -> ?window:never -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RequestDestination : sig
  type t = ([`L_s0[@js ""] | `L_s113_document[@js "document"] | `L_s115_embed[@js "embed"] | `L_s136_font[@js "font"] | `L_s138_frame[@js "frame"] | `L_s158_iframe[@js "iframe"] | `L_s159_image[@js "image"] | `L_s187_manifest[@js "manifest"] | `L_s218_object[@js "object"] | `L_s234_paintworklet[@js "paintworklet"] | `L_s268_report[@js "report"] | `L_s279_script[@js "script"] | `L_s285_sharedworker[@js "sharedworker"] | `L_s306_style[@js "style"] | `L_s317_track[@js "track"] | `L_s334_video[@js "video"] | `L_s341_worker[@js "worker"] | `L_s346_xslt[@js "xslt"] | `L_s57_audio[@js "audio"] | `L_s58_audioworklet[@js "audioworklet"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  This Fetch API interface represents a resource request.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request)
*)
module[@js.scope "Request"] rec Request : sig
  type t = [`Body | `Request] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Body | `Request]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Body | `Request]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Request ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/cache)
  *)
  val get_cache: 'tags this -> RequestCache.t [@@js.get "cache"]
  
  (**
    Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/credentials)
  *)
  val get_credentials: 'tags this -> RequestCredentials.t [@@js.get "credentials"]
  
  (**
    Returns the kind of resource requested by request, e.g., "document" or "script".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/destination)
  *)
  val get_destination: 'tags this -> RequestDestination.t [@@js.get "destination"]
  
  (**
    Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the "Host" header.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/headers)
  *)
  val get_headers: 'tags this -> Headers.t [@@js.get "headers"]
  
  (**
    Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. \[SRI\]
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/integrity)
  *)
  val get_integrity: 'tags this -> string [@@js.get "integrity"]
  
  (**
    Returns a boolean indicating whether or not request can outlive the global in which it was created.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/keepalive)
  *)
  val get_keepalive: 'tags this -> bool [@@js.get "keepalive"]
  
  (**
    Returns request's HTTP method, which is "GET" by default.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/method)
  *)
  val get_method: 'tags this -> string [@@js.get "method"]
  
  (**
    Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/mode)
  *)
  val get_mode: 'tags this -> RequestMode.t [@@js.get "mode"]
  
  (**
    Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/redirect)
  *)
  val get_redirect: 'tags this -> RequestRedirect.t [@@js.get "redirect"]
  
  (**
    Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and "about:client" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/referrer)
  *)
  val get_referrer: 'tags this -> string [@@js.get "referrer"]
  
  (**
    Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/referrerPolicy)
  *)
  val get_referrerPolicy: 'tags this -> ReferrerPolicy.t [@@js.get "referrerPolicy"]
  
  (**
    Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/signal)
  *)
  val get_signal: 'tags this -> AbortSignal.t [@@js.get "signal"]
  
  (**
    Returns the URL of request as a string.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/url)
  *)
  val get_url: 'tags this -> string [@@js.get "url"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/clone) *)
  val clone: 'tags this -> t [@@js.call "clone"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: input:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> ?init:RequestInit.t -> unit -> t [@@js.create]
end
and RequestInfo : sig
  type t = ([`String of string | `Other of Request.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Provides a storage mechanism for Request / Response object pairs that are cached, for example as part of the ServiceWorker life cycle. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache)
*)
module[@js.scope "Cache"] Cache : sig
  type t = [`Cache] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Cache]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Cache]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Cache ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache/addAll) *)
  val addAll: 'tags this -> requests:RequestInfo.t Iterable.t -> unit Promise.t [@@js.call "addAll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache/add) *)
  val add: 'tags this -> request:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> unit Promise.t [@@js.call "add"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache/addAll) *)
  val addAll': 'tags this -> requests:RequestInfo.t list -> unit Promise.t [@@js.call "addAll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache/delete) *)
  val delete: 'tags this -> request:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> ?options:CacheQueryOptions.t -> unit -> bool Promise.t [@@js.call "delete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache/keys) *)
  val keys: 'tags this -> ?request:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> ?options:CacheQueryOptions.t -> unit -> Request.t list Promise.t [@@js.call "keys"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache/match) *)
  val match_: 'tags this -> request:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> ?options:CacheQueryOptions.t -> unit -> Response.t option Promise.t [@@js.call "match"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache/matchAll) *)
  val matchAll: 'tags this -> ?request:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> ?options:CacheQueryOptions.t -> unit -> Response.t list Promise.t [@@js.call "matchAll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache/put) *)
  val put: 'tags this -> request:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> response:Response.t -> unit Promise.t [@@js.call "put"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module[@js.scope "caches"] CachesStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/delete) *)
  val delete: string -> bool Promise.t [@@js.global "delete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/has) *)
  val has: string -> bool Promise.t [@@js.global "has"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/keys) *)
  val keys: unit -> string list Promise.t [@@js.global "keys"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/match) *)
  val match_: request:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> ?options:MultiCacheQueryOptions.t -> unit -> Response.t option Promise.t [@@js.global "match"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/open) *)
  val open_: string -> Cache.t Promise.t [@@js.global "open"]
end
module XMLHttpRequestResponseType : sig
  type t = ([`L_s0[@js ""] | `L_s113_document[@js "document"] | `L_s167_json[@js "json"] | `L_s311_text[@js "text"] | `L_s56_arraybuffer[@js "arraybuffer"] | `L_s66_blob[@js "blob"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ProgressEventInit : sig
  type t = [`EventInit | `ProgressEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `ProgressEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `ProgressEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ProgressEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_lengthComputable: 'tags this -> bool option [@@js.get "lengthComputable"]
  val set_lengthComputable: 'tags this -> bool -> unit [@@js.set "lengthComputable"]
  val get_loaded: 'tags this -> float option [@@js.get "loaded"]
  val set_loaded: 'tags this -> float -> unit [@@js.set "loaded"]
  val get_total: 'tags this -> float option [@@js.get "total"]
  val set_total: 'tags this -> float -> unit [@@js.set "total"]
  val create: ?lengthComputable:bool -> ?loaded:float -> ?total:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an <img>, <audio>, <video>, <style> or <link>).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ProgressEvent)
*)
module[@js.scope "ProgressEvent"] ProgressEvent : sig
  type 'T t = [`Event | `ProgressEvent of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  type t_0 = EventTarget.t t
  [@@@js.stop]
  type 'T tags = [`Event | `ProgressEvent of 'T]
  type tags_0 = EventTarget.t tags
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`Event | `ProgressEvent of 'T]
    type tags_0 = EventTarget.t tags
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `ProgressEvent of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ProgressEvent/lengthComputable) *)
  val get_lengthComputable: ('tags, 'T) this -> bool [@@js.get "lengthComputable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ProgressEvent/loaded) *)
  val get_loaded: ('tags, 'T) this -> float [@@js.get "loaded"]
  
  (**
    Returns the object to which event is dispatched (its target).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/target)
  *)
  val get_target: ('tags, 'T) this -> 'T option [@@js.get "target"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ProgressEvent/total) *)
  val get_total: ('tags, 'T) this -> float [@@js.get "total"]
  val create: lengthComputable:bool -> loaded:float -> ?target:'T -> total:float -> unit -> 'T t [@@js.builder]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:ProgressEventInit.t -> unit -> t_0 [@@js.create]
end

(**
  Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest)
*)
module[@js.scope "XMLHttpRequest"] rec XMLHttpRequest : sig
  type t = [`EventTarget | `XMLHttpRequest | `XMLHttpRequestEventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `XMLHttpRequest | `XMLHttpRequestEventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `XMLHttpRequest | `XMLHttpRequestEventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XMLHttpRequest ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readystatechange_event) *)
  val get_onreadystatechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onreadystatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readystatechange_event) *)
  val set_onreadystatechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onreadystatechange"]
  
  (**
    Returns client's state.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readyState)
  *)
  val get_readyState: 'tags this -> float [@@js.get "readyState"]
  
  (**
    Returns the response body.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/response)
  *)
  val get_response: 'tags this -> any [@@js.get "response"]
  
  (**
    Returns response as text.
    
    Throws an "InvalidStateError" DOMException if responseType is not the empty string or "text".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseText)
  *)
  val get_responseText: 'tags this -> string [@@js.get "responseText"]
  
  (**
    Returns the response type.
    
    Can be set to change the response type. Values are: the empty string (default), "arraybuffer", "blob", "document", "json", and "text".
    
    When set: setting to "document" is ignored if current global object is not a Window object.
    
    When set: throws an "InvalidStateError" DOMException if state is loading or done.
    
    When set: throws an "InvalidAccessError" DOMException if the synchronous flag is set and current global object is a Window object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseType)
  *)
  val get_responseType: 'tags this -> XMLHttpRequestResponseType.t [@@js.get "responseType"]
  
  (**
    Returns the response type.
    
    Can be set to change the response type. Values are: the empty string (default), "arraybuffer", "blob", "document", "json", and "text".
    
    When set: setting to "document" is ignored if current global object is not a Window object.
    
    When set: throws an "InvalidStateError" DOMException if state is loading or done.
    
    When set: throws an "InvalidAccessError" DOMException if the synchronous flag is set and current global object is a Window object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseType)
  *)
  val set_responseType: 'tags this -> XMLHttpRequestResponseType.t -> unit [@@js.set "responseType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseURL) *)
  val get_responseURL: 'tags this -> string [@@js.get "responseURL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/status) *)
  val get_status: 'tags this -> float [@@js.get "status"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/statusText) *)
  val get_statusText: 'tags this -> string [@@js.get "statusText"]
  
  (**
    Can be set to a time in milliseconds. When set to a non-zero value will cause fetching to terminate after the given time has passed. When the time has passed, the request has not yet completed, and this's synchronous flag is unset, a timeout event will then be dispatched, or a "TimeoutError" DOMException will be thrown otherwise (for the send() method).
    
    When set: throws an "InvalidAccessError" DOMException if the synchronous flag is set and current global object is a Window object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/timeout)
  *)
  val get_timeout: 'tags this -> float [@@js.get "timeout"]
  
  (**
    Can be set to a time in milliseconds. When set to a non-zero value will cause fetching to terminate after the given time has passed. When the time has passed, the request has not yet completed, and this's synchronous flag is unset, a timeout event will then be dispatched, or a "TimeoutError" DOMException will be thrown otherwise (for the send() method).
    
    When set: throws an "InvalidAccessError" DOMException if the synchronous flag is set and current global object is a Window object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/timeout)
  *)
  val set_timeout: 'tags this -> float -> unit [@@js.set "timeout"]
  
  (**
    Returns the associated XMLHttpRequestUpload object. It can be used to gather transmission information when data is transferred to a server.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/upload)
  *)
  val get_upload: 'tags this -> XMLHttpRequestUpload.t [@@js.get "upload"]
  
  (**
    True when credentials are to be included in a cross-origin request. False when they are to be excluded in a cross-origin request and when cookies are to be ignored in its response. Initially false.
    
    When set: throws an "InvalidStateError" DOMException if state is not unsent or opened, or if the send() flag is set.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/withCredentials)
  *)
  val get_withCredentials: 'tags this -> bool [@@js.get "withCredentials"]
  
  (**
    True when credentials are to be included in a cross-origin request. False when they are to be excluded in a cross-origin request and when cookies are to be ignored in its response. Initially false.
    
    When set: throws an "InvalidStateError" DOMException if state is not unsent or opened, or if the send() flag is set.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/withCredentials)
  *)
  val set_withCredentials: 'tags this -> bool -> unit [@@js.set "withCredentials"]
  
  (**
    Cancels any network activity.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/abort)
  *)
  val abort: 'tags this -> unit [@@js.call "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/getAllResponseHeaders) *)
  val getAllResponseHeaders: 'tags this -> string [@@js.call "getAllResponseHeaders"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/getResponseHeader) *)
  val getResponseHeader: 'tags this -> name:string -> string option [@@js.call "getResponseHeader"]
  
  (**
    Sets the request method, request URL, and synchronous flag.
    
    Throws a "SyntaxError" DOMException if either method is not a valid method or url cannot be parsed.
    
    Throws a "SecurityError" DOMException if method is a case-insensitive match for `CONNECT`, `TRACE`, or `TRACK`.
    
    Throws an "InvalidAccessError" DOMException if async is false, current global object is a Window object, and the timeout attribute is not zero or the responseType attribute is not the empty string.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/open)
  *)
  val open_: 'tags this -> method_:string -> url:([`U1 of string | `U2 of URL.t] [@js.union]) -> unit [@@js.call "open"]
  
  (**
    Sets the request method, request URL, and synchronous flag.
    
    Throws a "SyntaxError" DOMException if either method is not a valid method or url cannot be parsed.
    
    Throws a "SecurityError" DOMException if method is a case-insensitive match for `CONNECT`, `TRACE`, or `TRACK`.
    
    Throws an "InvalidAccessError" DOMException if async is false, current global object is a Window object, and the timeout attribute is not zero or the responseType attribute is not the empty string.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/open)
  *)
  val open_': 'tags this -> method_:string -> url:([`U1 of string | `U2 of URL.t] [@js.union]) -> async:bool -> ?username:string option -> ?password:string option -> unit -> unit [@@js.call "open"]
  
  (**
    Acts as if the `Content-Type` header value for a response is mime. (It does not change the header.)
    
    Throws an "InvalidStateError" DOMException if state is loading or done.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/overrideMimeType)
  *)
  val overrideMimeType: 'tags this -> mime:string -> unit [@@js.call "overrideMimeType"]
  
  (**
    Initiates the request. The body argument provides the request body, if any, and is ignored if the request method is GET or HEAD.
    
    Throws an "InvalidStateError" DOMException if either state is not opened or the send() flag is set.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/send)
  *)
  val send: 'tags this -> ?body:XMLHttpRequestBodyInit.t option -> unit -> unit [@@js.call "send"]
  
  (**
    Combines a header in author request headers.
    
    Throws an "InvalidStateError" DOMException if either state is not opened or the send() flag is set.
    
    Throws a "SyntaxError" DOMException if name is not a header name or if value is not a header value.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/setRequestHeader)
  *)
  val setRequestHeader: 'tags this -> name:string -> value:string -> unit [@@js.call "setRequestHeader"]
  val get_UNSENT: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "UNSENT"]
  val get_OPENED: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "OPENED"]
  val get_HEADERS_RECEIVED: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "HEADERS_RECEIVED"]
  val get_LOADING: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "LOADING"]
  val get_DONE: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "DONE"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'XMLHttpRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'XMLHttpRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val unsent: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "UNSENT"]
  val opened: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "OPENED"]
  val headers_received: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "HEADERS_RECEIVED"]
  val loading: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "LOADING"]
  val done_: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "DONE"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestEventTarget) *)
and[@js.scope "XMLHttpRequestEventTarget"] XMLHttpRequestEventTarget : sig
  type t = [`EventTarget | `XMLHttpRequestEventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `XMLHttpRequestEventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `XMLHttpRequestEventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XMLHttpRequestEventTarget ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_onabort: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option [@@js.get "onabort"]
  val set_onabort: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit [@@js.set "onabort"]
  val get_onerror: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option [@@js.get "onerror"]
  val set_onerror: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit [@@js.set "onerror"]
  val get_onload: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option [@@js.get "onload"]
  val set_onload: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit [@@js.set "onload"]
  val get_onloadend: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option [@@js.get "onloadend"]
  val set_onloadend: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit [@@js.set "onloadend"]
  val get_onloadstart: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option [@@js.get "onloadstart"]
  val set_onloadstart: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit [@@js.set "onloadstart"]
  val get_onprogress: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option [@@js.get "onprogress"]
  val set_onprogress: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit [@@js.set "onprogress"]
  val get_ontimeout: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option [@@js.get "ontimeout"]
  val set_ontimeout: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit [@@js.set "ontimeout"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'XMLHttpRequestEventTargetEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'XMLHttpRequestEventTargetEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestUpload) *)
and[@js.scope "XMLHttpRequestUpload"] XMLHttpRequestUpload : sig
  type t = [`EventTarget | `XMLHttpRequestEventTarget | `XMLHttpRequestUpload] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `XMLHttpRequestEventTarget | `XMLHttpRequestUpload]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `XMLHttpRequestEventTarget | `XMLHttpRequestUpload]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XMLHttpRequestUpload ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'XMLHttpRequestEventTargetEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'XMLHttpRequestEventTargetEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module XMLHttpRequestEventTargetEventMap : sig
  type t = [`XMLHttpRequestEventTargetEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`XMLHttpRequestEventTargetEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`XMLHttpRequestEventTargetEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XMLHttpRequestEventTargetEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_abort: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t [@@js.get "abort"]
  val set_abort: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit [@@js.set "abort"]
  val get_error: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t [@@js.get "error"]
  val set_error: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit [@@js.set "error"]
  val get_load: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t [@@js.get "load"]
  val set_load: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit [@@js.set "load"]
  val get_loadend: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t [@@js.get "loadend"]
  val set_loadend: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit [@@js.set "loadend"]
  val get_loadstart: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t [@@js.get "loadstart"]
  val set_loadstart: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit [@@js.set "loadstart"]
  val get_progress: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t [@@js.get "progress"]
  val set_progress: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit [@@js.set "progress"]
  val get_timeout: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t [@@js.get "timeout"]
  val set_timeout: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit [@@js.set "timeout"]
  val create: abort:XMLHttpRequestEventTarget.t ProgressEvent.t -> error:XMLHttpRequestEventTarget.t ProgressEvent.t -> load:XMLHttpRequestEventTarget.t ProgressEvent.t -> loadend:XMLHttpRequestEventTarget.t ProgressEvent.t -> loadstart:XMLHttpRequestEventTarget.t ProgressEvent.t -> progress:XMLHttpRequestEventTarget.t ProgressEvent.t -> timeout:XMLHttpRequestEventTarget.t ProgressEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module XMLHttpRequestEventMap : sig
  type t = [`XMLHttpRequestEventMap | `XMLHttpRequestEventTargetEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`XMLHttpRequestEventMap | `XMLHttpRequestEventTargetEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`XMLHttpRequestEventMap | `XMLHttpRequestEventTargetEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XMLHttpRequestEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_readystatechange: 'tags this -> Event.t [@@js.get "readystatechange"]
  val set_readystatechange: 'tags this -> Event.t -> unit [@@js.set "readystatechange"]
  val create: readystatechange:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ServiceWorkerState : sig
  type t = ([`L_s164_installed[@js "installed"] | `L_s165_installing[@js "installing"] | `L_s235_parsed[@js "parsed"] | `L_s264_redundant[@js "redundant"] | `L_s47_activated[@js "activated"] | `L_s48_activating[@js "activating"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController) *)
module[@js.scope "TransformStreamDefaultController"] TransformStreamDefaultController : sig
  type 'O t = [`TransformStreamDefaultController of 'O] intf [@@js.custom { of_js=(fun _O -> Obj.magic); to_js=(fun _O -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'O tags = [`TransformStreamDefaultController of 'O]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'O tags = [`TransformStreamDefaultController of 'O]
    type tags_0 = any tags
  ]
  type ('tags, 'O) this = 'tags intf constraint 'tags = [> `TransformStreamDefaultController of 'O ]
  val t_to_js: ('O -> Ojs.t) -> 'O t -> Ojs.t
  val t_of_js: (Ojs.t -> 'O) -> Ojs.t -> 'O t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/desiredSize) *)
  val get_desiredSize: ('tags, 'O) this -> float option [@@js.get "desiredSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/enqueue) *)
  val enqueue: ('tags, 'O) this -> ?chunk:'O -> unit -> unit [@@js.call "enqueue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/error) *)
  val error: ('tags, 'O) this -> ?reason:any -> unit -> unit [@@js.call "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/terminate) *)
  val terminate: ('tags, 'O) this -> unit [@@js.call "terminate"]
  val cast_from: ('tags, 'O) this -> 'O t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: unit -> t_0 [@@js.create]
end
module TransformerTransformCallback : sig
  type ('I, 'O) t = [`TransformerTransformCallback of ('I * 'O)] intf [@@js.custom { of_js=(fun _I _O -> Obj.magic); to_js=(fun _I _O -> Obj.magic) }]
  [@@@js.stop]
  type ('I, 'O) tags = [`TransformerTransformCallback of ('I * 'O)]
  [@@@js.start]
  [@@@js.implem 
    type ('I, 'O) tags = [`TransformerTransformCallback of ('I * 'O)]
  ]
  type ('tags, 'I, 'O) this = 'tags intf constraint 'tags = [> `TransformerTransformCallback of ('I * 'O) ]
  val t_to_js: ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t
  val t_of_js: (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t
  val apply: ('tags, 'I, 'O) this -> chunk:'I -> controller:'O TransformStreamDefaultController.t -> (unit, unit PromiseLike.t) union2 [@@js.apply]
  val cast_from: ('tags, 'I, 'O) this -> ('I, 'O) t [@@js.custom let cast_from = Obj.magic]
end
module TransformerStartCallback : sig
  type 'O t = [`TransformerStartCallback of 'O] intf [@@js.custom { of_js=(fun _O -> Obj.magic); to_js=(fun _O -> Obj.magic) }]
  [@@@js.stop]
  type 'O tags = [`TransformerStartCallback of 'O]
  [@@@js.start]
  [@@@js.implem 
    type 'O tags = [`TransformerStartCallback of 'O]
  ]
  type ('tags, 'O) this = 'tags intf constraint 'tags = [> `TransformerStartCallback of 'O ]
  val t_to_js: ('O -> Ojs.t) -> 'O t -> Ojs.t
  val t_of_js: (Ojs.t -> 'O) -> Ojs.t -> 'O t
  val apply: ('tags, 'O) this -> controller:'O TransformStreamDefaultController.t -> any [@@js.apply]
  val cast_from: ('tags, 'O) this -> 'O t [@@js.custom let cast_from = Obj.magic]
end
module TransformerFlushCallback : sig
  type 'O t = [`TransformerFlushCallback of 'O] intf [@@js.custom { of_js=(fun _O -> Obj.magic); to_js=(fun _O -> Obj.magic) }]
  [@@@js.stop]
  type 'O tags = [`TransformerFlushCallback of 'O]
  [@@@js.start]
  [@@@js.implem 
    type 'O tags = [`TransformerFlushCallback of 'O]
  ]
  type ('tags, 'O) this = 'tags intf constraint 'tags = [> `TransformerFlushCallback of 'O ]
  val t_to_js: ('O -> Ojs.t) -> 'O t -> Ojs.t
  val t_of_js: (Ojs.t -> 'O) -> Ojs.t -> 'O t
  val apply: ('tags, 'O) this -> controller:'O TransformStreamDefaultController.t -> (unit, unit PromiseLike.t) union2 [@@js.apply]
  val cast_from: ('tags, 'O) this -> 'O t [@@js.custom let cast_from = Obj.magic]
end
module Transformer : sig
  type ('I, 'O) t = [`Transformer of ('I * 'O)] intf [@@js.custom { of_js=(fun _I _O -> Obj.magic); to_js=(fun _I _O -> Obj.magic) }]
  type 'I t_1 = ('I, any) t
  type t_0 = (any, any) t
  [@@@js.stop]
  type ('I, 'O) tags = [`Transformer of ('I * 'O)]
  type 'I tags_1 = ('I, any) tags
  type tags_0 = (any, any) tags
  [@@@js.start]
  [@@@js.implem 
    type ('I, 'O) tags = [`Transformer of ('I * 'O)]
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
  ]
  type ('tags, 'I, 'O) this = 'tags intf constraint 'tags = [> `Transformer of ('I * 'O) ]
  val t_to_js: ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t
  val t_of_js: (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t
  val t_1_to_js: ('I -> Ojs.t) -> 'I t_1 -> Ojs.t
  val t_1_of_js: (Ojs.t -> 'I) -> Ojs.t -> 'I t_1
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_flush: ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t option [@@js.get "flush"]
  val set_flush: ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t -> unit [@@js.set "flush"]
  val get_readableType: ('tags, 'I, 'O) this -> undefined [@@js.get "readableType"]
  val set_readableType: ('tags, 'I, 'O) this -> undefined -> unit [@@js.set "readableType"]
  val get_start: ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t option [@@js.get "start"]
  val set_start: ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t -> unit [@@js.set "start"]
  val get_transform: ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t option [@@js.get "transform"]
  val set_transform: ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t -> unit [@@js.set "transform"]
  val get_writableType: ('tags, 'I, 'O) this -> undefined [@@js.get "writableType"]
  val set_writableType: ('tags, 'I, 'O) this -> undefined -> unit [@@js.set "writableType"]
  val create: ?flush:'O TransformerFlushCallback.t -> ?readableType:never -> ?start:'O TransformerStartCallback.t -> ?transform:('I, 'O) TransformerTransformCallback.t -> ?writableType:never -> unit -> ('I, 'O) t [@@js.builder]
  val cast_from: ('tags, 'I, 'O) this -> ('I, 'O) t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStream) *)
module[@js.scope "TransformStream"] TransformStream : sig
  type ('I, 'O) t = [`TransformStream of ('I * 'O)] intf [@@js.custom { of_js=(fun _I _O -> Obj.magic); to_js=(fun _I _O -> Obj.magic) }]
  type 'I t_1 = ('I, any) t
  type t_0 = (any, any) t
  [@@@js.stop]
  type ('I, 'O) tags = [`TransformStream of ('I * 'O)]
  type 'I tags_1 = ('I, any) tags
  type tags_0 = (any, any) tags
  [@@@js.start]
  [@@@js.implem 
    type ('I, 'O) tags = [`TransformStream of ('I * 'O)]
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
  ]
  type ('tags, 'I, 'O) this = 'tags intf constraint 'tags = [> `TransformStream of ('I * 'O) ]
  val t_to_js: ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t
  val t_of_js: (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t
  val t_1_to_js: ('I -> Ojs.t) -> 'I t_1 -> Ojs.t
  val t_1_of_js: (Ojs.t -> 'I) -> Ojs.t -> 'I t_1
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStream/readable) *)
  val get_readable: ('tags, 'I, 'O) this -> 'O ReadableStream.t [@@js.get "readable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStream/writable) *)
  val get_writable: ('tags, 'I, 'O) this -> 'I WritableStream.t [@@js.get "writable"]
  val create: readable:'O ReadableStream.t -> writable:'I WritableStream.t -> unit -> ('I, 'O) t [@@js.builder]
  val cast_from: ('tags, 'I, 'O) this -> ('I, 'O) t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create': ?transformer:('I, 'O) Transformer.t -> ?writableStrategy:'I QueuingStrategy.t -> ?readableStrategy:'O QueuingStrategy.t -> unit -> ('I, 'O) t [@@js.create]
end
module OffscreenRenderingContextId : sig
  type t = ([`L_s1_2d[@js "2d"] | `L_s336_webgl[@js "webgl"] | `L_s337_webgl2[@js "webgl2"] | `L_s338_webgpu[@js "webgpu"] | `L_s65_bitmaprenderer[@js "bitmaprenderer"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GLint : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat)
*)
module[@js.scope "WebGLShaderPrecisionFormat"] WebGLShaderPrecisionFormat : sig
  type t = [`WebGLShaderPrecisionFormat] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLShaderPrecisionFormat]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLShaderPrecisionFormat]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLShaderPrecisionFormat ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/precision) *)
  val get_precision: 'tags this -> GLint.t [@@js.get "precision"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/rangeMax) *)
  val get_rangeMax: 'tags this -> GLint.t [@@js.get "rangeMax"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/rangeMin) *)
  val get_rangeMin: 'tags this -> GLint.t [@@js.get "rangeMin"]
  val create: precision:GLint.t -> rangeMax:GLint.t -> rangeMin:GLint.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  Part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderbuffer)
*)
module[@js.scope "WebGLRenderbuffer"] WebGLRenderbuffer : sig
  type t = [`WebGLRenderbuffer] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLRenderbuffer]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLRenderbuffer]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLRenderbuffer ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Part of the WebGL API and represents a collection of buffers that serve as a rendering destination.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLFramebuffer)
*)
module[@js.scope "WebGLFramebuffer"] WebGLFramebuffer : sig
  type t = [`WebGLFramebuffer] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLFramebuffer]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLFramebuffer]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLFramebuffer ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module WebGLPowerPreference : sig
  type t = ([`L_s151_high_performance[@js "high-performance"] | `L_s184_low_power[@js "low-power"] | `L_s97_default[@js "default"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module WebGLContextAttributes : sig
  type t = [`WebGLContextAttributes] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLContextAttributes]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLContextAttributes]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLContextAttributes ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_alpha: 'tags this -> bool option [@@js.get "alpha"]
  val set_alpha: 'tags this -> bool -> unit [@@js.set "alpha"]
  val get_antialias: 'tags this -> bool option [@@js.get "antialias"]
  val set_antialias: 'tags this -> bool -> unit [@@js.set "antialias"]
  val get_depth: 'tags this -> bool option [@@js.get "depth"]
  val set_depth: 'tags this -> bool -> unit [@@js.set "depth"]
  val get_desynchronized: 'tags this -> bool option [@@js.get "desynchronized"]
  val set_desynchronized: 'tags this -> bool -> unit [@@js.set "desynchronized"]
  val get_failIfMajorPerformanceCaveat: 'tags this -> bool option [@@js.get "failIfMajorPerformanceCaveat"]
  val set_failIfMajorPerformanceCaveat: 'tags this -> bool -> unit [@@js.set "failIfMajorPerformanceCaveat"]
  val get_powerPreference: 'tags this -> WebGLPowerPreference.t option [@@js.get "powerPreference"]
  val set_powerPreference: 'tags this -> WebGLPowerPreference.t -> unit [@@js.set "powerPreference"]
  val get_premultipliedAlpha: 'tags this -> bool option [@@js.get "premultipliedAlpha"]
  val set_premultipliedAlpha: 'tags this -> bool -> unit [@@js.set "premultipliedAlpha"]
  val get_preserveDrawingBuffer: 'tags this -> bool option [@@js.get "preserveDrawingBuffer"]
  val set_preserveDrawingBuffer: 'tags this -> bool -> unit [@@js.set "preserveDrawingBuffer"]
  val get_stencil: 'tags this -> bool option [@@js.get "stencil"]
  val set_stencil: 'tags this -> bool -> unit [@@js.set "stencil"]
  val create: ?alpha:bool -> ?antialias:bool -> ?depth:bool -> ?desynchronized:bool -> ?failIfMajorPerformanceCaveat:bool -> ?powerPreference:WebGLPowerPreference.t -> ?premultipliedAlpha:bool -> ?preserveDrawingBuffer:bool -> ?stencil:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module GLuint : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GLsizei : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GLenum : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw) *)
module WEBGL_multi_draw : sig
  type t = [`WEBGL_multi_draw] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_multi_draw]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_multi_draw]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_multi_draw ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysInstancedWEBGL) *)
  val multiDrawArraysInstancedWEBGL: 'tags this -> mode:GLenum.t -> firstsList:([`U1 of Int32Array.t | `U2 of GLint.t Iterable.t] [@js.union]) -> firstsOffset:GLuint.t -> countsList:([`U1 of Int32Array.t | `U2 of GLsizei.t Iterable.t] [@js.union]) -> countsOffset:GLuint.t -> instanceCountsList:([`U1 of Int32Array.t | `U2 of GLsizei.t Iterable.t] [@js.union]) -> instanceCountsOffset:GLuint.t -> drawcount:GLsizei.t -> unit [@@js.call "multiDrawArraysInstancedWEBGL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysWEBGL) *)
  val multiDrawArraysWEBGL: 'tags this -> mode:GLenum.t -> firstsList:([`U1 of Int32Array.t | `U2 of GLint.t Iterable.t] [@js.union]) -> firstsOffset:GLuint.t -> countsList:([`U1 of Int32Array.t | `U2 of GLsizei.t Iterable.t] [@js.union]) -> countsOffset:GLuint.t -> drawcount:GLsizei.t -> unit [@@js.call "multiDrawArraysWEBGL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsInstancedWEBGL) *)
  val multiDrawElementsInstancedWEBGL: 'tags this -> mode:GLenum.t -> countsList:([`U1 of Int32Array.t | `U2 of GLsizei.t Iterable.t] [@js.union]) -> countsOffset:GLuint.t -> type_:GLenum.t -> offsetsList:([`U1 of Int32Array.t | `U2 of GLsizei.t Iterable.t] [@js.union]) -> offsetsOffset:GLuint.t -> instanceCountsList:([`U1 of Int32Array.t | `U2 of GLsizei.t Iterable.t] [@js.union]) -> instanceCountsOffset:GLuint.t -> drawcount:GLsizei.t -> unit [@@js.call "multiDrawElementsInstancedWEBGL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsWEBGL) *)
  val multiDrawElementsWEBGL: 'tags this -> mode:GLenum.t -> countsList:([`U1 of Int32Array.t | `U2 of GLsizei.t Iterable.t] [@js.union]) -> countsOffset:GLuint.t -> type_:GLenum.t -> offsetsList:([`U1 of Int32Array.t | `U2 of GLsizei.t Iterable.t] [@js.union]) -> offsetsOffset:GLuint.t -> drawcount:GLsizei.t -> unit [@@js.call "multiDrawElementsWEBGL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysInstancedWEBGL) *)
  val multiDrawArraysInstancedWEBGL': 'tags this -> mode:GLenum.t -> firstsList:([`U1 of Int32Array.t | `U2 of GLint.t list] [@js.union]) -> firstsOffset:GLuint.t -> countsList:([`U1 of Int32Array.t | `U2 of GLsizei.t list] [@js.union]) -> countsOffset:GLuint.t -> instanceCountsList:([`U1 of Int32Array.t | `U2 of GLsizei.t list] [@js.union]) -> instanceCountsOffset:GLuint.t -> drawcount:GLsizei.t -> unit [@@js.call "multiDrawArraysInstancedWEBGL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysWEBGL) *)
  val multiDrawArraysWEBGL': 'tags this -> mode:GLenum.t -> firstsList:([`U1 of Int32Array.t | `U2 of GLint.t list] [@js.union]) -> firstsOffset:GLuint.t -> countsList:([`U1 of Int32Array.t | `U2 of GLsizei.t list] [@js.union]) -> countsOffset:GLuint.t -> drawcount:GLsizei.t -> unit [@@js.call "multiDrawArraysWEBGL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsInstancedWEBGL) *)
  val multiDrawElementsInstancedWEBGL': 'tags this -> mode:GLenum.t -> countsList:([`U1 of Int32Array.t | `U2 of GLsizei.t list] [@js.union]) -> countsOffset:GLuint.t -> type_:GLenum.t -> offsetsList:([`U1 of Int32Array.t | `U2 of GLsizei.t list] [@js.union]) -> offsetsOffset:GLuint.t -> instanceCountsList:([`U1 of Int32Array.t | `U2 of GLsizei.t list] [@js.union]) -> instanceCountsOffset:GLuint.t -> drawcount:GLsizei.t -> unit [@@js.call "multiDrawElementsInstancedWEBGL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsWEBGL) *)
  val multiDrawElementsWEBGL': 'tags this -> mode:GLenum.t -> countsList:([`U1 of Int32Array.t | `U2 of GLsizei.t list] [@js.union]) -> countsOffset:GLuint.t -> type_:GLenum.t -> offsetsList:([`U1 of Int32Array.t | `U2 of GLsizei.t list] [@js.union]) -> offsetsOffset:GLuint.t -> drawcount:GLsizei.t -> unit [@@js.call "multiDrawElementsWEBGL"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context) *)
module WEBGL_lose_context : sig
  type t = [`WEBGL_lose_context] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_lose_context]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_lose_context]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_lose_context ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context/loseContext) *)
  val loseContext: 'tags this -> unit [@@js.call "loseContext"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context/restoreContext) *)
  val restoreContext: 'tags this -> unit [@@js.call "restoreContext"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers) *)
module WEBGL_draw_buffers : sig
  type t = [`WEBGL_draw_buffers] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_draw_buffers]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_draw_buffers]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_draw_buffers ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers/drawBuffersWEBGL) *)
  val drawBuffersWEBGL: 'tags this -> buffers:GLenum.t Iterable.t -> unit [@@js.call "drawBuffersWEBGL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers/drawBuffersWEBGL) *)
  val drawBuffersWEBGL': 'tags this -> buffers:GLenum.t list -> unit [@@js.call "drawBuffersWEBGL"]
  val get_COLOR_ATTACHMENT0_WEBGL: 'tags this -> ([`L_n_36064[@js 36064]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT0_WEBGL"]
  val get_COLOR_ATTACHMENT1_WEBGL: 'tags this -> ([`L_n_36065[@js 36065]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT1_WEBGL"]
  val get_COLOR_ATTACHMENT2_WEBGL: 'tags this -> ([`L_n_36066[@js 36066]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT2_WEBGL"]
  val get_COLOR_ATTACHMENT3_WEBGL: 'tags this -> ([`L_n_36067[@js 36067]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT3_WEBGL"]
  val get_COLOR_ATTACHMENT4_WEBGL: 'tags this -> ([`L_n_36068[@js 36068]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT4_WEBGL"]
  val get_COLOR_ATTACHMENT5_WEBGL: 'tags this -> ([`L_n_36069[@js 36069]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT5_WEBGL"]
  val get_COLOR_ATTACHMENT6_WEBGL: 'tags this -> ([`L_n_36070[@js 36070]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT6_WEBGL"]
  val get_COLOR_ATTACHMENT7_WEBGL: 'tags this -> ([`L_n_36071[@js 36071]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT7_WEBGL"]
  val get_COLOR_ATTACHMENT8_WEBGL: 'tags this -> ([`L_n_36072[@js 36072]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT8_WEBGL"]
  val get_COLOR_ATTACHMENT9_WEBGL: 'tags this -> ([`L_n_36073[@js 36073]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT9_WEBGL"]
  val get_COLOR_ATTACHMENT10_WEBGL: 'tags this -> ([`L_n_36074[@js 36074]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT10_WEBGL"]
  val get_COLOR_ATTACHMENT11_WEBGL: 'tags this -> ([`L_n_36075[@js 36075]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT11_WEBGL"]
  val get_COLOR_ATTACHMENT12_WEBGL: 'tags this -> ([`L_n_36076[@js 36076]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT12_WEBGL"]
  val get_COLOR_ATTACHMENT13_WEBGL: 'tags this -> ([`L_n_36077[@js 36077]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT13_WEBGL"]
  val get_COLOR_ATTACHMENT14_WEBGL: 'tags this -> ([`L_n_36078[@js 36078]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT14_WEBGL"]
  val get_COLOR_ATTACHMENT15_WEBGL: 'tags this -> ([`L_n_36079[@js 36079]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT15_WEBGL"]
  val get_DRAW_BUFFER0_WEBGL: 'tags this -> ([`L_n_34853[@js 34853]] [@js.enum]) [@@js.get "DRAW_BUFFER0_WEBGL"]
  val get_DRAW_BUFFER1_WEBGL: 'tags this -> ([`L_n_34854[@js 34854]] [@js.enum]) [@@js.get "DRAW_BUFFER1_WEBGL"]
  val get_DRAW_BUFFER2_WEBGL: 'tags this -> ([`L_n_34855[@js 34855]] [@js.enum]) [@@js.get "DRAW_BUFFER2_WEBGL"]
  val get_DRAW_BUFFER3_WEBGL: 'tags this -> ([`L_n_34856[@js 34856]] [@js.enum]) [@@js.get "DRAW_BUFFER3_WEBGL"]
  val get_DRAW_BUFFER4_WEBGL: 'tags this -> ([`L_n_34857[@js 34857]] [@js.enum]) [@@js.get "DRAW_BUFFER4_WEBGL"]
  val get_DRAW_BUFFER5_WEBGL: 'tags this -> ([`L_n_34858[@js 34858]] [@js.enum]) [@@js.get "DRAW_BUFFER5_WEBGL"]
  val get_DRAW_BUFFER6_WEBGL: 'tags this -> ([`L_n_34859[@js 34859]] [@js.enum]) [@@js.get "DRAW_BUFFER6_WEBGL"]
  val get_DRAW_BUFFER7_WEBGL: 'tags this -> ([`L_n_34860[@js 34860]] [@js.enum]) [@@js.get "DRAW_BUFFER7_WEBGL"]
  val get_DRAW_BUFFER8_WEBGL: 'tags this -> ([`L_n_34861[@js 34861]] [@js.enum]) [@@js.get "DRAW_BUFFER8_WEBGL"]
  val get_DRAW_BUFFER9_WEBGL: 'tags this -> ([`L_n_34862[@js 34862]] [@js.enum]) [@@js.get "DRAW_BUFFER9_WEBGL"]
  val get_DRAW_BUFFER10_WEBGL: 'tags this -> ([`L_n_34863[@js 34863]] [@js.enum]) [@@js.get "DRAW_BUFFER10_WEBGL"]
  val get_DRAW_BUFFER11_WEBGL: 'tags this -> ([`L_n_34864[@js 34864]] [@js.enum]) [@@js.get "DRAW_BUFFER11_WEBGL"]
  val get_DRAW_BUFFER12_WEBGL: 'tags this -> ([`L_n_34865[@js 34865]] [@js.enum]) [@@js.get "DRAW_BUFFER12_WEBGL"]
  val get_DRAW_BUFFER13_WEBGL: 'tags this -> ([`L_n_34866[@js 34866]] [@js.enum]) [@@js.get "DRAW_BUFFER13_WEBGL"]
  val get_DRAW_BUFFER14_WEBGL: 'tags this -> ([`L_n_34867[@js 34867]] [@js.enum]) [@@js.get "DRAW_BUFFER14_WEBGL"]
  val get_DRAW_BUFFER15_WEBGL: 'tags this -> ([`L_n_34868[@js 34868]] [@js.enum]) [@@js.get "DRAW_BUFFER15_WEBGL"]
  val get_MAX_COLOR_ATTACHMENTS_WEBGL: 'tags this -> ([`L_n_36063[@js 36063]] [@js.enum]) [@@js.get "MAX_COLOR_ATTACHMENTS_WEBGL"]
  val get_MAX_DRAW_BUFFERS_WEBGL: 'tags this -> ([`L_n_34852[@js 34852]] [@js.enum]) [@@js.get "MAX_DRAW_BUFFERS_WEBGL"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The WEBGL_depth_texture extension is part of the WebGL API and defines 2D depth and depth-stencil textures.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_depth_texture)
*)
module WEBGL_depth_texture : sig
  type t = [`WEBGL_depth_texture] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_depth_texture]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_depth_texture]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_depth_texture ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_UNSIGNED_INT_24_8_WEBGL: 'tags this -> ([`L_n_34042[@js 34042]] [@js.enum]) [@@js.get "UNSIGNED_INT_24_8_WEBGL"]
  val create: unsigned_int_24_8_webgl:(([`L_n_34042[@js 34042]] [@js.enum])[@js "UNSIGNED_INT_24_8_WEBGL"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLShader)
*)
module[@js.scope "WebGLShader"] WebGLShader : sig
  type t = [`WebGLShader] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLShader]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLShader]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLShader ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_shaders) *)
module WEBGL_debug_shaders : sig
  type t = [`WEBGL_debug_shaders] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_debug_shaders]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_debug_shaders]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_debug_shaders ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_shaders/getTranslatedShaderSource) *)
  val getTranslatedShaderSource: 'tags this -> shader:WebGLShader.t -> string [@@js.call "getTranslatedShaderSource"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The WEBGL_debug_renderer_info extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_renderer_info)
*)
module WEBGL_debug_renderer_info : sig
  type t = [`WEBGL_debug_renderer_info] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_debug_renderer_info]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_debug_renderer_info]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_debug_renderer_info ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_UNMASKED_VENDOR_WEBGL: 'tags this -> ([`L_n_37445[@js 37445]] [@js.enum]) [@@js.get "UNMASKED_VENDOR_WEBGL"]
  val get_UNMASKED_RENDERER_WEBGL: 'tags this -> ([`L_n_37446[@js 37446]] [@js.enum]) [@@js.get "UNMASKED_RENDERER_WEBGL"]
  val create: unmasked_vendor_webgl:(([`L_n_37445[@js 37445]] [@js.enum])[@js "UNMASKED_VENDOR_WEBGL"]) -> unmasked_renderer_webgl:(([`L_n_37446[@js 37446]] [@js.enum])[@js "UNMASKED_RENDERER_WEBGL"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb) *)
module WEBGL_compressed_texture_s3tc_srgb : sig
  type t = [`WEBGL_compressed_texture_s3tc_srgb] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_compressed_texture_s3tc_srgb]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_compressed_texture_s3tc_srgb]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc_srgb ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_COMPRESSED_SRGB_S3TC_DXT1_EXT: 'tags this -> ([`L_n_35916[@js 35916]] [@js.enum]) [@@js.get "COMPRESSED_SRGB_S3TC_DXT1_EXT"]
  val get_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: 'tags this -> ([`L_n_35917[@js 35917]] [@js.enum]) [@@js.get "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"]
  val get_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: 'tags this -> ([`L_n_35918[@js 35918]] [@js.enum]) [@@js.get "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"]
  val get_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: 'tags this -> ([`L_n_35919[@js 35919]] [@js.enum]) [@@js.get "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"]
  val create: compressed_srgb_s3tc_dxt1_ext:(([`L_n_35916[@js 35916]] [@js.enum])[@js "COMPRESSED_SRGB_S3TC_DXT1_EXT"]) -> compressed_srgb_alpha_s3tc_dxt1_ext:(([`L_n_35917[@js 35917]] [@js.enum])[@js "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"]) -> compressed_srgb_alpha_s3tc_dxt3_ext:(([`L_n_35918[@js 35918]] [@js.enum])[@js "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"]) -> compressed_srgb_alpha_s3tc_dxt5_ext:(([`L_n_35919[@js 35919]] [@js.enum])[@js "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The WEBGL_compressed_texture_s3tc extension is part of the WebGL API and exposes four S3TC compressed texture formats.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_s3tc)
*)
module WEBGL_compressed_texture_s3tc : sig
  type t = [`WEBGL_compressed_texture_s3tc] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_compressed_texture_s3tc]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_compressed_texture_s3tc]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_COMPRESSED_RGB_S3TC_DXT1_EXT: 'tags this -> ([`L_n_33776[@js 33776]] [@js.enum]) [@@js.get "COMPRESSED_RGB_S3TC_DXT1_EXT"]
  val get_COMPRESSED_RGBA_S3TC_DXT1_EXT: 'tags this -> ([`L_n_33777[@js 33777]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_S3TC_DXT1_EXT"]
  val get_COMPRESSED_RGBA_S3TC_DXT3_EXT: 'tags this -> ([`L_n_33778[@js 33778]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_S3TC_DXT3_EXT"]
  val get_COMPRESSED_RGBA_S3TC_DXT5_EXT: 'tags this -> ([`L_n_33779[@js 33779]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_S3TC_DXT5_EXT"]
  val create: compressed_rgb_s3tc_dxt1_ext:(([`L_n_33776[@js 33776]] [@js.enum])[@js "COMPRESSED_RGB_S3TC_DXT1_EXT"]) -> compressed_rgba_s3tc_dxt1_ext:(([`L_n_33777[@js 33777]] [@js.enum])[@js "COMPRESSED_RGBA_S3TC_DXT1_EXT"]) -> compressed_rgba_s3tc_dxt3_ext:(([`L_n_33778[@js 33778]] [@js.enum])[@js "COMPRESSED_RGBA_S3TC_DXT3_EXT"]) -> compressed_rgba_s3tc_dxt5_ext:(([`L_n_33779[@js 33779]] [@js.enum])[@js "COMPRESSED_RGBA_S3TC_DXT5_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_pvrtc) *)
module WEBGL_compressed_texture_pvrtc : sig
  type t = [`WEBGL_compressed_texture_pvrtc] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_compressed_texture_pvrtc]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_compressed_texture_pvrtc]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_compressed_texture_pvrtc ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 'tags this -> ([`L_n_35840[@js 35840]] [@js.enum]) [@@js.get "COMPRESSED_RGB_PVRTC_4BPPV1_IMG"]
  val get_COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 'tags this -> ([`L_n_35841[@js 35841]] [@js.enum]) [@@js.get "COMPRESSED_RGB_PVRTC_2BPPV1_IMG"]
  val get_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 'tags this -> ([`L_n_35842[@js 35842]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"]
  val get_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 'tags this -> ([`L_n_35843[@js 35843]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"]
  val create: compressed_rgb_pvrtc_4bppv1_img:(([`L_n_35840[@js 35840]] [@js.enum])[@js "COMPRESSED_RGB_PVRTC_4BPPV1_IMG"]) -> compressed_rgb_pvrtc_2bppv1_img:(([`L_n_35841[@js 35841]] [@js.enum])[@js "COMPRESSED_RGB_PVRTC_2BPPV1_IMG"]) -> compressed_rgba_pvrtc_4bppv1_img:(([`L_n_35842[@js 35842]] [@js.enum])[@js "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"]) -> compressed_rgba_pvrtc_2bppv1_img:(([`L_n_35843[@js 35843]] [@js.enum])[@js "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_etc1) *)
module WEBGL_compressed_texture_etc1 : sig
  type t = [`WEBGL_compressed_texture_etc1] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_compressed_texture_etc1]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_compressed_texture_etc1]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc1 ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_COMPRESSED_RGB_ETC1_WEBGL: 'tags this -> ([`L_n_36196[@js 36196]] [@js.enum]) [@@js.get "COMPRESSED_RGB_ETC1_WEBGL"]
  val create: compressed_rgb_etc1_webgl:(([`L_n_36196[@js 36196]] [@js.enum])[@js "COMPRESSED_RGB_ETC1_WEBGL"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_etc) *)
module WEBGL_compressed_texture_etc : sig
  type t = [`WEBGL_compressed_texture_etc] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_compressed_texture_etc]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_compressed_texture_etc]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_COMPRESSED_R11_EAC: 'tags this -> ([`L_n_37488[@js 37488]] [@js.enum]) [@@js.get "COMPRESSED_R11_EAC"]
  val get_COMPRESSED_SIGNED_R11_EAC: 'tags this -> ([`L_n_37489[@js 37489]] [@js.enum]) [@@js.get "COMPRESSED_SIGNED_R11_EAC"]
  val get_COMPRESSED_RG11_EAC: 'tags this -> ([`L_n_37490[@js 37490]] [@js.enum]) [@@js.get "COMPRESSED_RG11_EAC"]
  val get_COMPRESSED_SIGNED_RG11_EAC: 'tags this -> ([`L_n_37491[@js 37491]] [@js.enum]) [@@js.get "COMPRESSED_SIGNED_RG11_EAC"]
  val get_COMPRESSED_RGB8_ETC2: 'tags this -> ([`L_n_37492[@js 37492]] [@js.enum]) [@@js.get "COMPRESSED_RGB8_ETC2"]
  val get_COMPRESSED_SRGB8_ETC2: 'tags this -> ([`L_n_37493[@js 37493]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ETC2"]
  val get_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 'tags this -> ([`L_n_37494[@js 37494]] [@js.enum]) [@@js.get "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"]
  val get_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 'tags this -> ([`L_n_37495[@js 37495]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"]
  val get_COMPRESSED_RGBA8_ETC2_EAC: 'tags this -> ([`L_n_37496[@js 37496]] [@js.enum]) [@@js.get "COMPRESSED_RGBA8_ETC2_EAC"]
  val get_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 'tags this -> ([`L_n_37497[@js 37497]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"]
  val create: compressed_r11_eac:(([`L_n_37488[@js 37488]] [@js.enum])[@js "COMPRESSED_R11_EAC"]) -> compressed_signed_r11_eac:(([`L_n_37489[@js 37489]] [@js.enum])[@js "COMPRESSED_SIGNED_R11_EAC"]) -> compressed_rg11_eac:(([`L_n_37490[@js 37490]] [@js.enum])[@js "COMPRESSED_RG11_EAC"]) -> compressed_signed_rg11_eac:(([`L_n_37491[@js 37491]] [@js.enum])[@js "COMPRESSED_SIGNED_RG11_EAC"]) -> compressed_rgb8_etc2:(([`L_n_37492[@js 37492]] [@js.enum])[@js "COMPRESSED_RGB8_ETC2"]) -> compressed_srgb8_etc2:(([`L_n_37493[@js 37493]] [@js.enum])[@js "COMPRESSED_SRGB8_ETC2"]) -> compressed_rgb8_punchthrough_alpha1_etc2:(([`L_n_37494[@js 37494]] [@js.enum])[@js "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"]) -> compressed_srgb8_punchthrough_alpha1_etc2:(([`L_n_37495[@js 37495]] [@js.enum])[@js "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"]) -> compressed_rgba8_etc2_eac:(([`L_n_37496[@js 37496]] [@js.enum])[@js "COMPRESSED_RGBA8_ETC2_EAC"]) -> compressed_srgb8_alpha8_etc2_eac:(([`L_n_37497[@js 37497]] [@js.enum])[@js "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_astc) *)
module WEBGL_compressed_texture_astc : sig
  type t = [`WEBGL_compressed_texture_astc] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_compressed_texture_astc]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_compressed_texture_astc]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_compressed_texture_astc ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_astc/getSupportedProfiles) *)
  val getSupportedProfiles: 'tags this -> string list [@@js.call "getSupportedProfiles"]
  val get_COMPRESSED_RGBA_ASTC_4x4_KHR: 'tags this -> ([`L_n_37808[@js 37808]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_4x4_KHR"]
  val get_COMPRESSED_RGBA_ASTC_5x4_KHR: 'tags this -> ([`L_n_37809[@js 37809]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_5x4_KHR"]
  val get_COMPRESSED_RGBA_ASTC_5x5_KHR: 'tags this -> ([`L_n_37810[@js 37810]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_5x5_KHR"]
  val get_COMPRESSED_RGBA_ASTC_6x5_KHR: 'tags this -> ([`L_n_37811[@js 37811]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_6x5_KHR"]
  val get_COMPRESSED_RGBA_ASTC_6x6_KHR: 'tags this -> ([`L_n_37812[@js 37812]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_6x6_KHR"]
  val get_COMPRESSED_RGBA_ASTC_8x5_KHR: 'tags this -> ([`L_n_37813[@js 37813]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_8x5_KHR"]
  val get_COMPRESSED_RGBA_ASTC_8x6_KHR: 'tags this -> ([`L_n_37814[@js 37814]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_8x6_KHR"]
  val get_COMPRESSED_RGBA_ASTC_8x8_KHR: 'tags this -> ([`L_n_37815[@js 37815]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_8x8_KHR"]
  val get_COMPRESSED_RGBA_ASTC_10x5_KHR: 'tags this -> ([`L_n_37816[@js 37816]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_10x5_KHR"]
  val get_COMPRESSED_RGBA_ASTC_10x6_KHR: 'tags this -> ([`L_n_37817[@js 37817]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_10x6_KHR"]
  val get_COMPRESSED_RGBA_ASTC_10x8_KHR: 'tags this -> ([`L_n_37818[@js 37818]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_10x8_KHR"]
  val get_COMPRESSED_RGBA_ASTC_10x10_KHR: 'tags this -> ([`L_n_37819[@js 37819]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_10x10_KHR"]
  val get_COMPRESSED_RGBA_ASTC_12x10_KHR: 'tags this -> ([`L_n_37820[@js 37820]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_12x10_KHR"]
  val get_COMPRESSED_RGBA_ASTC_12x12_KHR: 'tags this -> ([`L_n_37821[@js 37821]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_12x12_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: 'tags this -> ([`L_n_37840[@js 37840]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: 'tags this -> ([`L_n_37841[@js 37841]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: 'tags this -> ([`L_n_37842[@js 37842]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: 'tags this -> ([`L_n_37843[@js 37843]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: 'tags this -> ([`L_n_37844[@js 37844]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: 'tags this -> ([`L_n_37845[@js 37845]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: 'tags this -> ([`L_n_37846[@js 37846]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: 'tags this -> ([`L_n_37847[@js 37847]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: 'tags this -> ([`L_n_37848[@js 37848]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: 'tags this -> ([`L_n_37849[@js 37849]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: 'tags this -> ([`L_n_37850[@js 37850]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: 'tags this -> ([`L_n_37851[@js 37851]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: 'tags this -> ([`L_n_37852[@js 37852]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: 'tags this -> ([`L_n_37853[@js 37853]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_color_buffer_float) *)
module WEBGL_color_buffer_float : sig
  type t = [`WEBGL_color_buffer_float] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_color_buffer_float]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_color_buffer_float]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_color_buffer_float ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_RGBA32F_EXT: 'tags this -> ([`L_n_34836[@js 34836]] [@js.enum]) [@@js.get "RGBA32F_EXT"]
  val get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 'tags this -> ([`L_n_33297[@js 33297]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"]
  val get_UNSIGNED_NORMALIZED_EXT: 'tags this -> ([`L_n_35863[@js 35863]] [@js.enum]) [@@js.get "UNSIGNED_NORMALIZED_EXT"]
  val create: rgba32f_ext:(([`L_n_34836[@js 34836]] [@js.enum])[@js "RGBA32F_EXT"]) -> framebuffer_attachment_component_type_ext:(([`L_n_33297[@js 33297]] [@js.enum])[@js "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"]) -> unsigned_normalized_ext:(([`L_n_35863[@js 35863]] [@js.enum])[@js "UNSIGNED_NORMALIZED_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLTexture)
*)
module[@js.scope "WebGLTexture"] WebGLTexture : sig
  type t = [`WebGLTexture] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLTexture]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLTexture]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLTexture ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OVR_multiview2) *)
module OVR_multiview2 : sig
  type t = [`OVR_multiview2] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OVR_multiview2]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OVR_multiview2]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OVR_multiview2 ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OVR_multiview2/framebufferTextureMultiviewOVR) *)
  val framebufferTextureMultiviewOVR: 'tags this -> target:GLenum.t -> attachment:GLenum.t -> texture:WebGLTexture.t option -> level:GLint.t -> baseViewIndex:GLint.t -> numViews:GLsizei.t -> unit [@@js.call "framebufferTextureMultiviewOVR"]
  val get_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR: 'tags this -> ([`L_n_38448[@js 38448]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR"]
  val get_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR: 'tags this -> ([`L_n_38450[@js 38450]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR"]
  val get_MAX_VIEWS_OVR: 'tags this -> ([`L_n_38449[@js 38449]] [@js.enum]) [@@js.get "MAX_VIEWS_OVR"]
  val get_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: 'tags this -> ([`L_n_38451[@js 38451]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLVertexArrayObjectOES) *)
module WebGLVertexArrayObjectOES : sig
  type t = [`WebGLVertexArrayObjectOES] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLVertexArrayObjectOES]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLVertexArrayObjectOES]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLVertexArrayObjectOES ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module GLboolean : sig
  type t = bool
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object) *)
module OES_vertex_array_object : sig
  type t = [`OES_vertex_array_object] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_vertex_array_object]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_vertex_array_object]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_vertex_array_object ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/bindVertexArrayOES) *)
  val bindVertexArrayOES: 'tags this -> arrayObject:WebGLVertexArrayObjectOES.t option -> unit [@@js.call "bindVertexArrayOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/createVertexArrayOES) *)
  val createVertexArrayOES: 'tags this -> WebGLVertexArrayObjectOES.t option [@@js.call "createVertexArrayOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/deleteVertexArrayOES) *)
  val deleteVertexArrayOES: 'tags this -> arrayObject:WebGLVertexArrayObjectOES.t option -> unit [@@js.call "deleteVertexArrayOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/isVertexArrayOES) *)
  val isVertexArrayOES: 'tags this -> arrayObject:WebGLVertexArrayObjectOES.t option -> GLboolean.t [@@js.call "isVertexArrayOES"]
  val get_VERTEX_ARRAY_BINDING_OES: 'tags this -> ([`L_n_34229[@js 34229]] [@js.enum]) [@@js.get "VERTEX_ARRAY_BINDING_OES"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The OES_texture_half_float_linear extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_texture_half_float_linear)
*)
module OES_texture_half_float_linear : sig
  type t = [`OES_texture_half_float_linear] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_texture_half_float_linear]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_texture_half_float_linear]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_texture_half_float_linear ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The OES_texture_half_float extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_texture_half_float)
*)
module OES_texture_half_float : sig
  type t = [`OES_texture_half_float] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_texture_half_float]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_texture_half_float]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_texture_half_float ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_HALF_FLOAT_OES: 'tags this -> ([`L_n_36193[@js 36193]] [@js.enum]) [@@js.get "HALF_FLOAT_OES"]
  val create: half_float_oes:(([`L_n_36193[@js 36193]] [@js.enum])[@js "HALF_FLOAT_OES"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The OES_texture_float_linear extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_texture_float_linear)
*)
module OES_texture_float_linear : sig
  type t = [`OES_texture_float_linear] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_texture_float_linear]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_texture_float_linear]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_texture_float_linear ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The OES_texture_float extension is part of the WebGL API and exposes floating-point pixel types for textures.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_texture_float)
*)
module OES_texture_float : sig
  type t = [`OES_texture_float] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_texture_float]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_texture_float]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_texture_float ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The OES_standard_derivatives extension is part of the WebGL API and adds the GLSL derivative functions dFdx, dFdy, and fwidth.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_standard_derivatives)
*)
module OES_standard_derivatives : sig
  type t = [`OES_standard_derivatives] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_standard_derivatives]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_standard_derivatives]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_standard_derivatives ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 'tags this -> ([`L_n_35723[@js 35723]] [@js.enum]) [@@js.get "FRAGMENT_SHADER_DERIVATIVE_HINT_OES"]
  val create: fragment_shader_derivative_hint_oes:(([`L_n_35723[@js 35723]] [@js.enum])[@js "FRAGMENT_SHADER_DERIVATIVE_HINT_OES"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_fbo_render_mipmap) *)
module OES_fbo_render_mipmap : sig
  type t = [`OES_fbo_render_mipmap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_fbo_render_mipmap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_fbo_render_mipmap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_fbo_render_mipmap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The OES_element_index_uint extension is part of the WebGL API and adds support for gl.UNSIGNED_INT types to WebGLRenderingContext.drawElements().
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_element_index_uint)
*)
module OES_element_index_uint : sig
  type t = [`OES_element_index_uint] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_element_index_uint]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_element_index_uint]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_element_index_uint ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KHR_parallel_shader_compile) *)
module KHR_parallel_shader_compile : sig
  type t = [`KHR_parallel_shader_compile] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`KHR_parallel_shader_compile]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`KHR_parallel_shader_compile]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `KHR_parallel_shader_compile ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_COMPLETION_STATUS_KHR: 'tags this -> ([`L_n_37297[@js 37297]] [@js.enum]) [@@js.get "COMPLETION_STATUS_KHR"]
  val create: completion_status_khr:(([`L_n_37297[@js 37297]] [@js.enum])[@js "COMPLETION_STATUS_KHR"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module GLclampf : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  The EXT_texture_filter_anisotropic extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_texture_filter_anisotropic)
*)
module EXT_texture_filter_anisotropic : sig
  type t = [`EXT_texture_filter_anisotropic] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_texture_filter_anisotropic]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_texture_filter_anisotropic]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_texture_filter_anisotropic ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_TEXTURE_MAX_ANISOTROPY_EXT: 'tags this -> ([`L_n_34046[@js 34046]] [@js.enum]) [@@js.get "TEXTURE_MAX_ANISOTROPY_EXT"]
  val get_MAX_TEXTURE_MAX_ANISOTROPY_EXT: 'tags this -> ([`L_n_34047[@js 34047]] [@js.enum]) [@@js.get "MAX_TEXTURE_MAX_ANISOTROPY_EXT"]
  val create: texture_max_anisotropy_ext:(([`L_n_34046[@js 34046]] [@js.enum])[@js "TEXTURE_MAX_ANISOTROPY_EXT"]) -> max_texture_max_anisotropy_ext:(([`L_n_34047[@js 34047]] [@js.enum])[@js "MAX_TEXTURE_MAX_ANISOTROPY_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_texture_compression_rgtc) *)
module EXT_texture_compression_rgtc : sig
  type t = [`EXT_texture_compression_rgtc] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_texture_compression_rgtc]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_texture_compression_rgtc]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_texture_compression_rgtc ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_COMPRESSED_RED_RGTC1_EXT: 'tags this -> ([`L_n_36283[@js 36283]] [@js.enum]) [@@js.get "COMPRESSED_RED_RGTC1_EXT"]
  val get_COMPRESSED_SIGNED_RED_RGTC1_EXT: 'tags this -> ([`L_n_36284[@js 36284]] [@js.enum]) [@@js.get "COMPRESSED_SIGNED_RED_RGTC1_EXT"]
  val get_COMPRESSED_RED_GREEN_RGTC2_EXT: 'tags this -> ([`L_n_36285[@js 36285]] [@js.enum]) [@@js.get "COMPRESSED_RED_GREEN_RGTC2_EXT"]
  val get_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: 'tags this -> ([`L_n_36286[@js 36286]] [@js.enum]) [@@js.get "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT"]
  val create: compressed_red_rgtc1_ext:(([`L_n_36283[@js 36283]] [@js.enum])[@js "COMPRESSED_RED_RGTC1_EXT"]) -> compressed_signed_red_rgtc1_ext:(([`L_n_36284[@js 36284]] [@js.enum])[@js "COMPRESSED_SIGNED_RED_RGTC1_EXT"]) -> compressed_red_green_rgtc2_ext:(([`L_n_36285[@js 36285]] [@js.enum])[@js "COMPRESSED_RED_GREEN_RGTC2_EXT"]) -> compressed_signed_red_green_rgtc2_ext:(([`L_n_36286[@js 36286]] [@js.enum])[@js "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_texture_compression_bptc) *)
module EXT_texture_compression_bptc : sig
  type t = [`EXT_texture_compression_bptc] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_texture_compression_bptc]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_texture_compression_bptc]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_texture_compression_bptc ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_COMPRESSED_RGBA_BPTC_UNORM_EXT: 'tags this -> ([`L_n_36492[@js 36492]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_BPTC_UNORM_EXT"]
  val get_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT: 'tags this -> ([`L_n_36493[@js 36493]] [@js.enum]) [@@js.get "COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT"]
  val get_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT: 'tags this -> ([`L_n_36494[@js 36494]] [@js.enum]) [@@js.get "COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT"]
  val get_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT: 'tags this -> ([`L_n_36495[@js 36495]] [@js.enum]) [@@js.get "COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT"]
  val create: compressed_rgba_bptc_unorm_ext:(([`L_n_36492[@js 36492]] [@js.enum])[@js "COMPRESSED_RGBA_BPTC_UNORM_EXT"]) -> compressed_srgb_alpha_bptc_unorm_ext:(([`L_n_36493[@js 36493]] [@js.enum])[@js "COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT"]) -> compressed_rgb_bptc_signed_float_ext:(([`L_n_36494[@js 36494]] [@js.enum])[@js "COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT"]) -> compressed_rgb_bptc_unsigned_float_ext:(([`L_n_36495[@js 36495]] [@js.enum])[@js "COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_shader_texture_lod) *)
module EXT_shader_texture_lod : sig
  type t = [`EXT_shader_texture_lod] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_shader_texture_lod]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_shader_texture_lod]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_shader_texture_lod ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_sRGB) *)
module EXT_sRGB : sig
  type t = [`EXT_sRGB] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_sRGB]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_sRGB]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_sRGB ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_SRGB_EXT: 'tags this -> ([`L_n_35904[@js 35904]] [@js.enum]) [@@js.get "SRGB_EXT"]
  val get_SRGB_ALPHA_EXT: 'tags this -> ([`L_n_35906[@js 35906]] [@js.enum]) [@@js.get "SRGB_ALPHA_EXT"]
  val get_SRGB8_ALPHA8_EXT: 'tags this -> ([`L_n_35907[@js 35907]] [@js.enum]) [@@js.get "SRGB8_ALPHA8_EXT"]
  val get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: 'tags this -> ([`L_n_33296[@js 33296]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT"]
  val create: srgb_ext:(([`L_n_35904[@js 35904]] [@js.enum])[@js "SRGB_EXT"]) -> srgb_alpha_ext:(([`L_n_35906[@js 35906]] [@js.enum])[@js "SRGB_ALPHA_EXT"]) -> srgb8_alpha8_ext:(([`L_n_35907[@js 35907]] [@js.enum])[@js "SRGB8_ALPHA8_EXT"]) -> framebuffer_attachment_color_encoding_ext:(([`L_n_33296[@js 33296]] [@js.enum])[@js "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The EXT_frag_depth extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_frag_depth)
*)
module EXT_frag_depth : sig
  type t = [`EXT_frag_depth] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_frag_depth]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_frag_depth]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_frag_depth ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_float_blend) *)
module EXT_float_blend : sig
  type t = [`EXT_float_blend] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_float_blend]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_float_blend]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_float_blend ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_color_buffer_half_float) *)
module EXT_color_buffer_half_float : sig
  type t = [`EXT_color_buffer_half_float] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_color_buffer_half_float]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_color_buffer_half_float]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_color_buffer_half_float ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_RGBA16F_EXT: 'tags this -> ([`L_n_34842[@js 34842]] [@js.enum]) [@@js.get "RGBA16F_EXT"]
  val get_RGB16F_EXT: 'tags this -> ([`L_n_34843[@js 34843]] [@js.enum]) [@@js.get "RGB16F_EXT"]
  val get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 'tags this -> ([`L_n_33297[@js 33297]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"]
  val get_UNSIGNED_NORMALIZED_EXT: 'tags this -> ([`L_n_35863[@js 35863]] [@js.enum]) [@@js.get "UNSIGNED_NORMALIZED_EXT"]
  val create: rgba16f_ext:(([`L_n_34842[@js 34842]] [@js.enum])[@js "RGBA16F_EXT"]) -> rgb16f_ext:(([`L_n_34843[@js 34843]] [@js.enum])[@js "RGB16F_EXT"]) -> framebuffer_attachment_component_type_ext:(([`L_n_33297[@js 33297]] [@js.enum])[@js "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"]) -> unsigned_normalized_ext:(([`L_n_35863[@js 35863]] [@js.enum])[@js "UNSIGNED_NORMALIZED_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_color_buffer_float) *)
module EXT_color_buffer_float : sig
  type t = [`EXT_color_buffer_float] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_color_buffer_float]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_color_buffer_float]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_color_buffer_float ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_blend_minmax) *)
module EXT_blend_minmax : sig
  type t = [`EXT_blend_minmax] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_blend_minmax]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_blend_minmax]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_blend_minmax ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_MIN_EXT: 'tags this -> ([`L_n_32775[@js 32775]] [@js.enum]) [@@js.get "MIN_EXT"]
  val get_MAX_EXT: 'tags this -> ([`L_n_32776[@js 32776]] [@js.enum]) [@@js.get "MAX_EXT"]
  val create: min_ext:(([`L_n_32775[@js 32775]] [@js.enum])[@js "MIN_EXT"]) -> max_ext:(([`L_n_32776[@js 32776]] [@js.enum])[@js "MAX_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Part of the WebGL API and represents the location of a uniform variable in a shader program.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLUniformLocation)
*)
module[@js.scope "WebGLUniformLocation"] WebGLUniformLocation : sig
  type t = [`WebGLUniformLocation] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLUniformLocation]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLUniformLocation]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLUniformLocation ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The WebGLProgram is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLProgram)
*)
module[@js.scope "WebGLProgram"] WebGLProgram : sig
  type t = [`WebGLProgram] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLProgram]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLProgram]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLProgram ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLBuffer)
*)
module[@js.scope "WebGLBuffer"] WebGLBuffer : sig
  type t = [`WebGLBuffer] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLBuffer]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLBuffer]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLBuffer ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo)
*)
module[@js.scope "WebGLActiveInfo"] WebGLActiveInfo : sig
  type t = [`WebGLActiveInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLActiveInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLActiveInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLActiveInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/size) *)
  val get_size: 'tags this -> GLint.t [@@js.get "size"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/type) *)
  val get_type: 'tags this -> GLenum.t [@@js.get "type"]
  val create: name:string -> size:GLint.t -> type_:(GLenum.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module GLbitfield : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GLfloat : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module Float32List : sig
  type t = (GLfloat.t list, Float32Array.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module PredefinedColorSpace : sig
  type t = ([`L_s112_display_p3[@js "display-p3"] | `L_s300_srgb[@js "srgb"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GLintptr : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  The ANGLE_instanced_arrays extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays)
*)
module ANGLE_instanced_arrays : sig
  type t = [`ANGLE_instanced_arrays] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ANGLE_instanced_arrays]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ANGLE_instanced_arrays]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ANGLE_instanced_arrays ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays/drawArraysInstancedANGLE) *)
  val drawArraysInstancedANGLE: 'tags this -> mode:GLenum.t -> first:GLint.t -> count:GLsizei.t -> primcount:GLsizei.t -> unit [@@js.call "drawArraysInstancedANGLE"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays/drawElementsInstancedANGLE) *)
  val drawElementsInstancedANGLE: 'tags this -> mode:GLenum.t -> count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> primcount:GLsizei.t -> unit [@@js.call "drawElementsInstancedANGLE"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays/vertexAttribDivisorANGLE) *)
  val vertexAttribDivisorANGLE: 'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit [@@js.call "vertexAttribDivisorANGLE"]
  val get_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 'tags this -> ([`L_n_35070[@js 35070]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module WebGLRenderingContextBase : sig
  type t = [`WebGLRenderingContextBase] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLRenderingContextBase]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLRenderingContextBase]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLRenderingContextBase ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib1fv: 'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t -> unit [@@js.call "vertexAttrib1fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib2fv: 'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t -> unit [@@js.call "vertexAttrib2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib3fv: 'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t -> unit [@@js.call "vertexAttrib3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib4fv: 'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t -> unit [@@js.call "vertexAttrib4fv"]
  val get_drawingBufferColorSpace: 'tags this -> PredefinedColorSpace.t [@@js.get "drawingBufferColorSpace"]
  val set_drawingBufferColorSpace: 'tags this -> PredefinedColorSpace.t -> unit [@@js.set "drawingBufferColorSpace"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawingBufferHeight) *)
  val get_drawingBufferHeight: 'tags this -> GLsizei.t [@@js.get "drawingBufferHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawingBufferWidth) *)
  val get_drawingBufferWidth: 'tags this -> GLsizei.t [@@js.get "drawingBufferWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/activeTexture) *)
  val activeTexture: 'tags this -> texture:GLenum.t -> unit [@@js.call "activeTexture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/attachShader) *)
  val attachShader: 'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit [@@js.call "attachShader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindAttribLocation) *)
  val bindAttribLocation: 'tags this -> program:WebGLProgram.t -> index:GLuint.t -> name:string -> unit [@@js.call "bindAttribLocation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindBuffer) *)
  val bindBuffer: 'tags this -> target:GLenum.t -> buffer:WebGLBuffer.t option -> unit [@@js.call "bindBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindFramebuffer) *)
  val bindFramebuffer: 'tags this -> target:GLenum.t -> framebuffer:WebGLFramebuffer.t option -> unit [@@js.call "bindFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindRenderbuffer) *)
  val bindRenderbuffer: 'tags this -> target:GLenum.t -> renderbuffer:WebGLRenderbuffer.t option -> unit [@@js.call "bindRenderbuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindTexture) *)
  val bindTexture: 'tags this -> target:GLenum.t -> texture:WebGLTexture.t option -> unit [@@js.call "bindTexture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendColor) *)
  val blendColor: 'tags this -> red:GLclampf.t -> green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit [@@js.call "blendColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendEquation) *)
  val blendEquation: 'tags this -> mode:GLenum.t -> unit [@@js.call "blendEquation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendEquationSeparate) *)
  val blendEquationSeparate: 'tags this -> modeRGB:GLenum.t -> modeAlpha:GLenum.t -> unit [@@js.call "blendEquationSeparate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendFunc) *)
  val blendFunc: 'tags this -> sfactor:GLenum.t -> dfactor:GLenum.t -> unit [@@js.call "blendFunc"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendFuncSeparate) *)
  val blendFuncSeparate: 'tags this -> srcRGB:GLenum.t -> dstRGB:GLenum.t -> srcAlpha:GLenum.t -> dstAlpha:GLenum.t -> unit [@@js.call "blendFuncSeparate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/checkFramebufferStatus) *)
  val checkFramebufferStatus: 'tags this -> target:GLenum.t -> GLenum.t [@@js.call "checkFramebufferStatus"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clear) *)
  val clear: 'tags this -> mask:GLbitfield.t -> unit [@@js.call "clear"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clearColor) *)
  val clearColor: 'tags this -> red:GLclampf.t -> green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit [@@js.call "clearColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clearDepth) *)
  val clearDepth: 'tags this -> depth:GLclampf.t -> unit [@@js.call "clearDepth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clearStencil) *)
  val clearStencil: 'tags this -> s:GLint.t -> unit [@@js.call "clearStencil"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/colorMask) *)
  val colorMask: 'tags this -> red:GLboolean.t -> green:GLboolean.t -> blue:GLboolean.t -> alpha:GLboolean.t -> unit [@@js.call "colorMask"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compileShader) *)
  val compileShader: 'tags this -> shader:WebGLShader.t -> unit [@@js.call "compileShader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/copyTexImage2D) *)
  val copyTexImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLenum.t -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> unit [@@js.call "copyTexImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/copyTexSubImage2D) *)
  val copyTexSubImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "copyTexSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createBuffer) *)
  val createBuffer: 'tags this -> WebGLBuffer.t option [@@js.call "createBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createFramebuffer) *)
  val createFramebuffer: 'tags this -> WebGLFramebuffer.t option [@@js.call "createFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createProgram) *)
  val createProgram: 'tags this -> WebGLProgram.t option [@@js.call "createProgram"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createRenderbuffer) *)
  val createRenderbuffer: 'tags this -> WebGLRenderbuffer.t option [@@js.call "createRenderbuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createShader) *)
  val createShader: 'tags this -> type_:GLenum.t -> WebGLShader.t option [@@js.call "createShader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createTexture) *)
  val createTexture: 'tags this -> WebGLTexture.t option [@@js.call "createTexture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/cullFace) *)
  val cullFace: 'tags this -> mode:GLenum.t -> unit [@@js.call "cullFace"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteBuffer) *)
  val deleteBuffer: 'tags this -> buffer:WebGLBuffer.t option -> unit [@@js.call "deleteBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteFramebuffer) *)
  val deleteFramebuffer: 'tags this -> framebuffer:WebGLFramebuffer.t option -> unit [@@js.call "deleteFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteProgram) *)
  val deleteProgram: 'tags this -> program:WebGLProgram.t option -> unit [@@js.call "deleteProgram"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteRenderbuffer) *)
  val deleteRenderbuffer: 'tags this -> renderbuffer:WebGLRenderbuffer.t option -> unit [@@js.call "deleteRenderbuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteShader) *)
  val deleteShader: 'tags this -> shader:WebGLShader.t option -> unit [@@js.call "deleteShader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteTexture) *)
  val deleteTexture: 'tags this -> texture:WebGLTexture.t option -> unit [@@js.call "deleteTexture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/depthFunc) *)
  val depthFunc: 'tags this -> func:GLenum.t -> unit [@@js.call "depthFunc"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/depthMask) *)
  val depthMask: 'tags this -> flag:GLboolean.t -> unit [@@js.call "depthMask"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/depthRange) *)
  val depthRange: 'tags this -> zNear:GLclampf.t -> zFar:GLclampf.t -> unit [@@js.call "depthRange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/detachShader) *)
  val detachShader: 'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit [@@js.call "detachShader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/disable) *)
  val disable: 'tags this -> cap:GLenum.t -> unit [@@js.call "disable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/disableVertexAttribArray) *)
  val disableVertexAttribArray: 'tags this -> index:GLuint.t -> unit [@@js.call "disableVertexAttribArray"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawArrays) *)
  val drawArrays: 'tags this -> mode:GLenum.t -> first:GLint.t -> count:GLsizei.t -> unit [@@js.call "drawArrays"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawElements) *)
  val drawElements: 'tags this -> mode:GLenum.t -> count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit [@@js.call "drawElements"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/enable) *)
  val enable: 'tags this -> cap:GLenum.t -> unit [@@js.call "enable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/enableVertexAttribArray) *)
  val enableVertexAttribArray: 'tags this -> index:GLuint.t -> unit [@@js.call "enableVertexAttribArray"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/finish) *)
  val finish: 'tags this -> unit [@@js.call "finish"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/flush) *)
  val flush: 'tags this -> unit [@@js.call "flush"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/framebufferRenderbuffer) *)
  val framebufferRenderbuffer: 'tags this -> target:GLenum.t -> attachment:GLenum.t -> renderbuffertarget:GLenum.t -> renderbuffer:WebGLRenderbuffer.t option -> unit [@@js.call "framebufferRenderbuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/framebufferTexture2D) *)
  val framebufferTexture2D: 'tags this -> target:GLenum.t -> attachment:GLenum.t -> textarget:GLenum.t -> texture:WebGLTexture.t option -> level:GLint.t -> unit [@@js.call "framebufferTexture2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/frontFace) *)
  val frontFace: 'tags this -> mode:GLenum.t -> unit [@@js.call "frontFace"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/generateMipmap) *)
  val generateMipmap: 'tags this -> target:GLenum.t -> unit [@@js.call "generateMipmap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getActiveAttrib) *)
  val getActiveAttrib: 'tags this -> program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option [@@js.call "getActiveAttrib"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getActiveUniform) *)
  val getActiveUniform: 'tags this -> program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option [@@js.call "getActiveUniform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getAttachedShaders) *)
  val getAttachedShaders: 'tags this -> program:WebGLProgram.t -> WebGLShader.t list option [@@js.call "getAttachedShaders"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getAttribLocation) *)
  val getAttribLocation: 'tags this -> program:WebGLProgram.t -> name:string -> GLint.t [@@js.call "getAttribLocation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getBufferParameter) *)
  val getBufferParameter: 'tags this -> target:GLenum.t -> pname:GLenum.t -> any [@@js.call "getBufferParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getContextAttributes) *)
  val getContextAttributes: 'tags this -> WebGLContextAttributes.t option [@@js.call "getContextAttributes"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getError) *)
  val getError: 'tags this -> GLenum.t [@@js.call "getError"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension: 'tags this -> extensionName:([`L_s2_ANGLE_instanced_arrays[@js "ANGLE_instanced_arrays"]] [@js.enum]) -> ANGLE_instanced_arrays.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension': 'tags this -> extensionName:([`L_s5_EXT_blend_minmax[@js "EXT_blend_minmax"]] [@js.enum]) -> EXT_blend_minmax.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'': 'tags this -> extensionName:([`L_s6_EXT_color_buffer_float[@js "EXT_color_buffer_float"]] [@js.enum]) -> EXT_color_buffer_float.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''': 'tags this -> extensionName:([`L_s7_EXT_color_buffer_half_float[@js "EXT_color_buffer_half_float"]] [@js.enum]) -> EXT_color_buffer_half_float.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''': 'tags this -> extensionName:([`L_s8_EXT_float_blend[@js "EXT_float_blend"]] [@js.enum]) -> EXT_float_blend.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''': 'tags this -> extensionName:([`L_s9_EXT_frag_depth[@js "EXT_frag_depth"]] [@js.enum]) -> EXT_frag_depth.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''': 'tags this -> extensionName:([`L_s10_EXT_sRGB[@js "EXT_sRGB"]] [@js.enum]) -> EXT_sRGB.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''': 'tags this -> extensionName:([`L_s11_EXT_shader_texture_lod[@js "EXT_shader_texture_lod"]] [@js.enum]) -> EXT_shader_texture_lod.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''': 'tags this -> extensionName:([`L_s12_EXT_texture_compression_bptc[@js "EXT_texture_compression_bptc"]] [@js.enum]) -> EXT_texture_compression_bptc.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''': 'tags this -> extensionName:([`L_s13_EXT_texture_compression_rgtc[@js "EXT_texture_compression_rgtc"]] [@js.enum]) -> EXT_texture_compression_rgtc.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''': 'tags this -> extensionName:([`L_s14_EXT_texture_filter_anisotropic[@js "EXT_texture_filter_anisotropic"]] [@js.enum]) -> EXT_texture_filter_anisotropic.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''': 'tags this -> extensionName:([`L_s19_KHR_parallel_shader_compile[@js "KHR_parallel_shader_compile"]] [@js.enum]) -> KHR_parallel_shader_compile.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''': 'tags this -> extensionName:([`L_s21_OES_element_index_uint[@js "OES_element_index_uint"]] [@js.enum]) -> OES_element_index_uint.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''': 'tags this -> extensionName:([`L_s22_OES_fbo_render_mipmap[@js "OES_fbo_render_mipmap"]] [@js.enum]) -> OES_fbo_render_mipmap.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''': 'tags this -> extensionName:([`L_s23_OES_standard_derivatives[@js "OES_standard_derivatives"]] [@js.enum]) -> OES_standard_derivatives.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''': 'tags this -> extensionName:([`L_s24_OES_texture_float[@js "OES_texture_float"]] [@js.enum]) -> OES_texture_float.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''': 'tags this -> extensionName:([`L_s25_OES_texture_float_linear[@js "OES_texture_float_linear"]] [@js.enum]) -> OES_texture_float_linear.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''': 'tags this -> extensionName:([`L_s26_OES_texture_half_float[@js "OES_texture_half_float"]] [@js.enum]) -> OES_texture_half_float.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''': 'tags this -> extensionName:([`L_s27_OES_texture_half_float_linear[@js "OES_texture_half_float_linear"]] [@js.enum]) -> OES_texture_half_float_linear.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''''': 'tags this -> extensionName:([`L_s28_OES_vertex_array_object[@js "OES_vertex_array_object"]] [@js.enum]) -> OES_vertex_array_object.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''''': 'tags this -> extensionName:([`L_s29_OVR_multiview2[@js "OVR_multiview2"]] [@js.enum]) -> OVR_multiview2.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''''''': 'tags this -> extensionName:([`L_s32_WEBGL_color_buffer_float[@js "WEBGL_color_buffer_float"]] [@js.enum]) -> WEBGL_color_buffer_float.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''''''': 'tags this -> extensionName:([`L_s33_WEBGL_compressed_texture_astc[@js "WEBGL_compressed_texture_astc"]] [@js.enum]) -> WEBGL_compressed_texture_astc.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''''''''': 'tags this -> extensionName:([`L_s34_WEBGL_compressed_texture_etc[@js "WEBGL_compressed_texture_etc"]] [@js.enum]) -> WEBGL_compressed_texture_etc.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''''''''': 'tags this -> extensionName:([`L_s35_WEBGL_compressed_texture_etc1[@js "WEBGL_compressed_texture_etc1"]] [@js.enum]) -> WEBGL_compressed_texture_etc1.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s36_WEBGL_compressed_texture_pvrtc[@js "WEBGL_compressed_texture_pvrtc"]] [@js.enum]) -> WEBGL_compressed_texture_pvrtc.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s37_WEBGL_compressed_texture_s3tc[@js "WEBGL_compressed_texture_s3tc"]] [@js.enum]) -> WEBGL_compressed_texture_s3tc.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s38_WEBGL_compressed_texture_s3tc_srgb[@js "WEBGL_compressed_texture_s3tc_srgb"]] [@js.enum]) -> WEBGL_compressed_texture_s3tc_srgb.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s39_WEBGL_debug_renderer_info[@js "WEBGL_debug_renderer_info"]] [@js.enum]) -> WEBGL_debug_renderer_info.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s40_WEBGL_debug_shaders[@js "WEBGL_debug_shaders"]] [@js.enum]) -> WEBGL_debug_shaders.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s41_WEBGL_depth_texture[@js "WEBGL_depth_texture"]] [@js.enum]) -> WEBGL_depth_texture.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s42_WEBGL_draw_buffers[@js "WEBGL_draw_buffers"]] [@js.enum]) -> WEBGL_draw_buffers.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s43_WEBGL_lose_context[@js "WEBGL_lose_context"]] [@js.enum]) -> WEBGL_lose_context.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s44_WEBGL_multi_draw[@js "WEBGL_multi_draw"]] [@js.enum]) -> WEBGL_multi_draw.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''''''''''''''''''': 'tags this -> name:string -> any [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getFramebufferAttachmentParameter) *)
  val getFramebufferAttachmentParameter: 'tags this -> target:GLenum.t -> attachment:GLenum.t -> pname:GLenum.t -> any [@@js.call "getFramebufferAttachmentParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getParameter) *)
  val getParameter: 'tags this -> pname:GLenum.t -> any [@@js.call "getParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getProgramInfoLog) *)
  val getProgramInfoLog: 'tags this -> program:WebGLProgram.t -> string option [@@js.call "getProgramInfoLog"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getProgramParameter) *)
  val getProgramParameter: 'tags this -> program:WebGLProgram.t -> pname:GLenum.t -> any [@@js.call "getProgramParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getRenderbufferParameter) *)
  val getRenderbufferParameter: 'tags this -> target:GLenum.t -> pname:GLenum.t -> any [@@js.call "getRenderbufferParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderInfoLog) *)
  val getShaderInfoLog: 'tags this -> shader:WebGLShader.t -> string option [@@js.call "getShaderInfoLog"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderParameter) *)
  val getShaderParameter: 'tags this -> shader:WebGLShader.t -> pname:GLenum.t -> any [@@js.call "getShaderParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderPrecisionFormat) *)
  val getShaderPrecisionFormat: 'tags this -> shadertype:GLenum.t -> precisiontype:GLenum.t -> WebGLShaderPrecisionFormat.t option [@@js.call "getShaderPrecisionFormat"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderSource) *)
  val getShaderSource: 'tags this -> shader:WebGLShader.t -> string option [@@js.call "getShaderSource"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getSupportedExtensions) *)
  val getSupportedExtensions: 'tags this -> string list option [@@js.call "getSupportedExtensions"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getTexParameter) *)
  val getTexParameter: 'tags this -> target:GLenum.t -> pname:GLenum.t -> any [@@js.call "getTexParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getUniform) *)
  val getUniform: 'tags this -> program:WebGLProgram.t -> location:WebGLUniformLocation.t -> any [@@js.call "getUniform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getUniformLocation) *)
  val getUniformLocation: 'tags this -> program:WebGLProgram.t -> name:string -> WebGLUniformLocation.t option [@@js.call "getUniformLocation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getVertexAttrib) *)
  val getVertexAttrib: 'tags this -> index:GLuint.t -> pname:GLenum.t -> any [@@js.call "getVertexAttrib"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getVertexAttribOffset) *)
  val getVertexAttribOffset: 'tags this -> index:GLuint.t -> pname:GLenum.t -> GLintptr.t [@@js.call "getVertexAttribOffset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/hint) *)
  val hint: 'tags this -> target:GLenum.t -> mode:GLenum.t -> unit [@@js.call "hint"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isBuffer) *)
  val isBuffer: 'tags this -> buffer:WebGLBuffer.t option -> GLboolean.t [@@js.call "isBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isContextLost) *)
  val isContextLost: 'tags this -> bool [@@js.call "isContextLost"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isEnabled) *)
  val isEnabled: 'tags this -> cap:GLenum.t -> GLboolean.t [@@js.call "isEnabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isFramebuffer) *)
  val isFramebuffer: 'tags this -> framebuffer:WebGLFramebuffer.t option -> GLboolean.t [@@js.call "isFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isProgram) *)
  val isProgram: 'tags this -> program:WebGLProgram.t option -> GLboolean.t [@@js.call "isProgram"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isRenderbuffer) *)
  val isRenderbuffer: 'tags this -> renderbuffer:WebGLRenderbuffer.t option -> GLboolean.t [@@js.call "isRenderbuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isShader) *)
  val isShader: 'tags this -> shader:WebGLShader.t option -> GLboolean.t [@@js.call "isShader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isTexture) *)
  val isTexture: 'tags this -> texture:WebGLTexture.t option -> GLboolean.t [@@js.call "isTexture"]
  val lineWidth: 'tags this -> width:GLfloat.t -> unit [@@js.call "lineWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/linkProgram) *)
  val linkProgram: 'tags this -> program:WebGLProgram.t -> unit [@@js.call "linkProgram"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/pixelStorei) *)
  val pixelStorei: 'tags this -> pname:GLenum.t -> param:([`U1 of GLint.t | `U2 of GLboolean.t] [@js.union]) -> unit [@@js.call "pixelStorei"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/polygonOffset) *)
  val polygonOffset: 'tags this -> factor:GLfloat.t -> units:GLfloat.t -> unit [@@js.call "polygonOffset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/renderbufferStorage) *)
  val renderbufferStorage: 'tags this -> target:GLenum.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "renderbufferStorage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/sampleCoverage) *)
  val sampleCoverage: 'tags this -> value:GLclampf.t -> invert:GLboolean.t -> unit [@@js.call "sampleCoverage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/scissor) *)
  val scissor: 'tags this -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "scissor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/shaderSource) *)
  val shaderSource: 'tags this -> shader:WebGLShader.t -> source:string -> unit [@@js.call "shaderSource"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilFunc) *)
  val stencilFunc: 'tags this -> func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit [@@js.call "stencilFunc"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilFuncSeparate) *)
  val stencilFuncSeparate: 'tags this -> face:GLenum.t -> func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit [@@js.call "stencilFuncSeparate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilMask) *)
  val stencilMask: 'tags this -> mask:GLuint.t -> unit [@@js.call "stencilMask"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilMaskSeparate) *)
  val stencilMaskSeparate: 'tags this -> face:GLenum.t -> mask:GLuint.t -> unit [@@js.call "stencilMaskSeparate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilOp) *)
  val stencilOp: 'tags this -> fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit [@@js.call "stencilOp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilOpSeparate) *)
  val stencilOpSeparate: 'tags this -> face:GLenum.t -> fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit [@@js.call "stencilOpSeparate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texParameter) *)
  val texParameterf: 'tags this -> target:GLenum.t -> pname:GLenum.t -> param:GLfloat.t -> unit [@@js.call "texParameterf"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texParameter) *)
  val texParameteri: 'tags this -> target:GLenum.t -> pname:GLenum.t -> param:GLint.t -> unit [@@js.call "texParameteri"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1f: 'tags this -> location:WebGLUniformLocation.t option -> x:GLfloat.t -> unit [@@js.call "uniform1f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1i: 'tags this -> location:WebGLUniformLocation.t option -> x:GLint.t -> unit [@@js.call "uniform1i"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2f: 'tags this -> location:WebGLUniformLocation.t option -> x:GLfloat.t -> y:GLfloat.t -> unit [@@js.call "uniform2f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2i: 'tags this -> location:WebGLUniformLocation.t option -> x:GLint.t -> y:GLint.t -> unit [@@js.call "uniform2i"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3f: 'tags this -> location:WebGLUniformLocation.t option -> x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit [@@js.call "uniform3f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3i: 'tags this -> location:WebGLUniformLocation.t option -> x:GLint.t -> y:GLint.t -> z:GLint.t -> unit [@@js.call "uniform3i"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4f: 'tags this -> location:WebGLUniformLocation.t option -> x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit [@@js.call "uniform4f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4i: 'tags this -> location:WebGLUniformLocation.t option -> x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit [@@js.call "uniform4i"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/useProgram) *)
  val useProgram: 'tags this -> program:WebGLProgram.t option -> unit [@@js.call "useProgram"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/validateProgram) *)
  val validateProgram: 'tags this -> program:WebGLProgram.t -> unit [@@js.call "validateProgram"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib1f: 'tags this -> index:GLuint.t -> x:GLfloat.t -> unit [@@js.call "vertexAttrib1f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib1fv': 'tags this -> index:GLuint.t -> values:Float32List.t -> unit [@@js.call "vertexAttrib1fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib2f: 'tags this -> index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> unit [@@js.call "vertexAttrib2f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib2fv': 'tags this -> index:GLuint.t -> values:Float32List.t -> unit [@@js.call "vertexAttrib2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib3f: 'tags this -> index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit [@@js.call "vertexAttrib3f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib3fv': 'tags this -> index:GLuint.t -> values:Float32List.t -> unit [@@js.call "vertexAttrib3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib4f: 'tags this -> index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit [@@js.call "vertexAttrib4f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib4fv': 'tags this -> index:GLuint.t -> values:Float32List.t -> unit [@@js.call "vertexAttrib4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) *)
  val vertexAttribPointer: 'tags this -> index:GLuint.t -> size:GLint.t -> type_:GLenum.t -> normalized:GLboolean.t -> stride:GLsizei.t -> offset:GLintptr.t -> unit [@@js.call "vertexAttribPointer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/viewport) *)
  val viewport: 'tags this -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "viewport"]
  val get_DEPTH_BUFFER_BIT: 'tags this -> ([`L_n_256[@js 256]] [@js.enum]) [@@js.get "DEPTH_BUFFER_BIT"]
  val get_STENCIL_BUFFER_BIT: 'tags this -> ([`L_n_1024[@js 1024]] [@js.enum]) [@@js.get "STENCIL_BUFFER_BIT"]
  val get_COLOR_BUFFER_BIT: 'tags this -> ([`L_n_16384[@js 16384]] [@js.enum]) [@@js.get "COLOR_BUFFER_BIT"]
  val get_POINTS: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "POINTS"]
  val get_LINES: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "LINES"]
  val get_LINE_LOOP: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "LINE_LOOP"]
  val get_LINE_STRIP: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "LINE_STRIP"]
  val get_TRIANGLES: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "TRIANGLES"]
  val get_TRIANGLE_STRIP: 'tags this -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "TRIANGLE_STRIP"]
  val get_TRIANGLE_FAN: 'tags this -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "TRIANGLE_FAN"]
  val get_ZERO: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "ZERO"]
  val get_ONE: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "ONE"]
  val get_SRC_COLOR: 'tags this -> ([`L_n_768[@js 768]] [@js.enum]) [@@js.get "SRC_COLOR"]
  val get_ONE_MINUS_SRC_COLOR: 'tags this -> ([`L_n_769[@js 769]] [@js.enum]) [@@js.get "ONE_MINUS_SRC_COLOR"]
  val get_SRC_ALPHA: 'tags this -> ([`L_n_770[@js 770]] [@js.enum]) [@@js.get "SRC_ALPHA"]
  val get_ONE_MINUS_SRC_ALPHA: 'tags this -> ([`L_n_771[@js 771]] [@js.enum]) [@@js.get "ONE_MINUS_SRC_ALPHA"]
  val get_DST_ALPHA: 'tags this -> ([`L_n_772[@js 772]] [@js.enum]) [@@js.get "DST_ALPHA"]
  val get_ONE_MINUS_DST_ALPHA: 'tags this -> ([`L_n_773[@js 773]] [@js.enum]) [@@js.get "ONE_MINUS_DST_ALPHA"]
  val get_DST_COLOR: 'tags this -> ([`L_n_774[@js 774]] [@js.enum]) [@@js.get "DST_COLOR"]
  val get_ONE_MINUS_DST_COLOR: 'tags this -> ([`L_n_775[@js 775]] [@js.enum]) [@@js.get "ONE_MINUS_DST_COLOR"]
  val get_SRC_ALPHA_SATURATE: 'tags this -> ([`L_n_776[@js 776]] [@js.enum]) [@@js.get "SRC_ALPHA_SATURATE"]
  val get_FUNC_ADD: 'tags this -> ([`L_n_32774[@js 32774]] [@js.enum]) [@@js.get "FUNC_ADD"]
  val get_BLEND_EQUATION: 'tags this -> ([`L_n_32777[@js 32777]] [@js.enum]) [@@js.get "BLEND_EQUATION"]
  val get_BLEND_EQUATION_RGB: 'tags this -> ([`L_n_32777[@js 32777]] [@js.enum]) [@@js.get "BLEND_EQUATION_RGB"]
  val get_BLEND_EQUATION_ALPHA: 'tags this -> ([`L_n_34877[@js 34877]] [@js.enum]) [@@js.get "BLEND_EQUATION_ALPHA"]
  val get_FUNC_SUBTRACT: 'tags this -> ([`L_n_32778[@js 32778]] [@js.enum]) [@@js.get "FUNC_SUBTRACT"]
  val get_FUNC_REVERSE_SUBTRACT: 'tags this -> ([`L_n_32779[@js 32779]] [@js.enum]) [@@js.get "FUNC_REVERSE_SUBTRACT"]
  val get_BLEND_DST_RGB: 'tags this -> ([`L_n_32968[@js 32968]] [@js.enum]) [@@js.get "BLEND_DST_RGB"]
  val get_BLEND_SRC_RGB: 'tags this -> ([`L_n_32969[@js 32969]] [@js.enum]) [@@js.get "BLEND_SRC_RGB"]
  val get_BLEND_DST_ALPHA: 'tags this -> ([`L_n_32970[@js 32970]] [@js.enum]) [@@js.get "BLEND_DST_ALPHA"]
  val get_BLEND_SRC_ALPHA: 'tags this -> ([`L_n_32971[@js 32971]] [@js.enum]) [@@js.get "BLEND_SRC_ALPHA"]
  val get_CONSTANT_COLOR: 'tags this -> ([`L_n_32769[@js 32769]] [@js.enum]) [@@js.get "CONSTANT_COLOR"]
  val get_ONE_MINUS_CONSTANT_COLOR: 'tags this -> ([`L_n_32770[@js 32770]] [@js.enum]) [@@js.get "ONE_MINUS_CONSTANT_COLOR"]
  val get_CONSTANT_ALPHA: 'tags this -> ([`L_n_32771[@js 32771]] [@js.enum]) [@@js.get "CONSTANT_ALPHA"]
  val get_ONE_MINUS_CONSTANT_ALPHA: 'tags this -> ([`L_n_32772[@js 32772]] [@js.enum]) [@@js.get "ONE_MINUS_CONSTANT_ALPHA"]
  val get_BLEND_COLOR: 'tags this -> ([`L_n_32773[@js 32773]] [@js.enum]) [@@js.get "BLEND_COLOR"]
  val get_ARRAY_BUFFER: 'tags this -> ([`L_n_34962[@js 34962]] [@js.enum]) [@@js.get "ARRAY_BUFFER"]
  val get_ELEMENT_ARRAY_BUFFER: 'tags this -> ([`L_n_34963[@js 34963]] [@js.enum]) [@@js.get "ELEMENT_ARRAY_BUFFER"]
  val get_ARRAY_BUFFER_BINDING: 'tags this -> ([`L_n_34964[@js 34964]] [@js.enum]) [@@js.get "ARRAY_BUFFER_BINDING"]
  val get_ELEMENT_ARRAY_BUFFER_BINDING: 'tags this -> ([`L_n_34965[@js 34965]] [@js.enum]) [@@js.get "ELEMENT_ARRAY_BUFFER_BINDING"]
  val get_STREAM_DRAW: 'tags this -> ([`L_n_35040[@js 35040]] [@js.enum]) [@@js.get "STREAM_DRAW"]
  val get_STATIC_DRAW: 'tags this -> ([`L_n_35044[@js 35044]] [@js.enum]) [@@js.get "STATIC_DRAW"]
  val get_DYNAMIC_DRAW: 'tags this -> ([`L_n_35048[@js 35048]] [@js.enum]) [@@js.get "DYNAMIC_DRAW"]
  val get_BUFFER_SIZE: 'tags this -> ([`L_n_34660[@js 34660]] [@js.enum]) [@@js.get "BUFFER_SIZE"]
  val get_BUFFER_USAGE: 'tags this -> ([`L_n_34661[@js 34661]] [@js.enum]) [@@js.get "BUFFER_USAGE"]
  val get_CURRENT_VERTEX_ATTRIB: 'tags this -> ([`L_n_34342[@js 34342]] [@js.enum]) [@@js.get "CURRENT_VERTEX_ATTRIB"]
  val get_FRONT: 'tags this -> ([`L_n_1028[@js 1028]] [@js.enum]) [@@js.get "FRONT"]
  val get_BACK: 'tags this -> ([`L_n_1029[@js 1029]] [@js.enum]) [@@js.get "BACK"]
  val get_FRONT_AND_BACK: 'tags this -> ([`L_n_1032[@js 1032]] [@js.enum]) [@@js.get "FRONT_AND_BACK"]
  val get_CULL_FACE: 'tags this -> ([`L_n_2884[@js 2884]] [@js.enum]) [@@js.get "CULL_FACE"]
  val get_BLEND: 'tags this -> ([`L_n_3042[@js 3042]] [@js.enum]) [@@js.get "BLEND"]
  val get_DITHER: 'tags this -> ([`L_n_3024[@js 3024]] [@js.enum]) [@@js.get "DITHER"]
  val get_STENCIL_TEST: 'tags this -> ([`L_n_2960[@js 2960]] [@js.enum]) [@@js.get "STENCIL_TEST"]
  val get_DEPTH_TEST: 'tags this -> ([`L_n_2929[@js 2929]] [@js.enum]) [@@js.get "DEPTH_TEST"]
  val get_SCISSOR_TEST: 'tags this -> ([`L_n_3089[@js 3089]] [@js.enum]) [@@js.get "SCISSOR_TEST"]
  val get_POLYGON_OFFSET_FILL: 'tags this -> ([`L_n_32823[@js 32823]] [@js.enum]) [@@js.get "POLYGON_OFFSET_FILL"]
  val get_SAMPLE_ALPHA_TO_COVERAGE: 'tags this -> ([`L_n_32926[@js 32926]] [@js.enum]) [@@js.get "SAMPLE_ALPHA_TO_COVERAGE"]
  val get_SAMPLE_COVERAGE: 'tags this -> ([`L_n_32928[@js 32928]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE"]
  val get_NO_ERROR: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NO_ERROR"]
  val get_INVALID_ENUM: 'tags this -> ([`L_n_1280[@js 1280]] [@js.enum]) [@@js.get "INVALID_ENUM"]
  val get_INVALID_VALUE: 'tags this -> ([`L_n_1281[@js 1281]] [@js.enum]) [@@js.get "INVALID_VALUE"]
  val get_INVALID_OPERATION: 'tags this -> ([`L_n_1282[@js 1282]] [@js.enum]) [@@js.get "INVALID_OPERATION"]
  val get_OUT_OF_MEMORY: 'tags this -> ([`L_n_1285[@js 1285]] [@js.enum]) [@@js.get "OUT_OF_MEMORY"]
  val get_CW: 'tags this -> ([`L_n_2304[@js 2304]] [@js.enum]) [@@js.get "CW"]
  val get_CCW: 'tags this -> ([`L_n_2305[@js 2305]] [@js.enum]) [@@js.get "CCW"]
  val get_LINE_WIDTH: 'tags this -> ([`L_n_2849[@js 2849]] [@js.enum]) [@@js.get "LINE_WIDTH"]
  val get_ALIASED_POINT_SIZE_RANGE: 'tags this -> ([`L_n_33901[@js 33901]] [@js.enum]) [@@js.get "ALIASED_POINT_SIZE_RANGE"]
  val get_ALIASED_LINE_WIDTH_RANGE: 'tags this -> ([`L_n_33902[@js 33902]] [@js.enum]) [@@js.get "ALIASED_LINE_WIDTH_RANGE"]
  val get_CULL_FACE_MODE: 'tags this -> ([`L_n_2885[@js 2885]] [@js.enum]) [@@js.get "CULL_FACE_MODE"]
  val get_FRONT_FACE: 'tags this -> ([`L_n_2886[@js 2886]] [@js.enum]) [@@js.get "FRONT_FACE"]
  val get_DEPTH_RANGE: 'tags this -> ([`L_n_2928[@js 2928]] [@js.enum]) [@@js.get "DEPTH_RANGE"]
  val get_DEPTH_WRITEMASK: 'tags this -> ([`L_n_2930[@js 2930]] [@js.enum]) [@@js.get "DEPTH_WRITEMASK"]
  val get_DEPTH_CLEAR_VALUE: 'tags this -> ([`L_n_2931[@js 2931]] [@js.enum]) [@@js.get "DEPTH_CLEAR_VALUE"]
  val get_DEPTH_FUNC: 'tags this -> ([`L_n_2932[@js 2932]] [@js.enum]) [@@js.get "DEPTH_FUNC"]
  val get_STENCIL_CLEAR_VALUE: 'tags this -> ([`L_n_2961[@js 2961]] [@js.enum]) [@@js.get "STENCIL_CLEAR_VALUE"]
  val get_STENCIL_FUNC: 'tags this -> ([`L_n_2962[@js 2962]] [@js.enum]) [@@js.get "STENCIL_FUNC"]
  val get_STENCIL_FAIL: 'tags this -> ([`L_n_2964[@js 2964]] [@js.enum]) [@@js.get "STENCIL_FAIL"]
  val get_STENCIL_PASS_DEPTH_FAIL: 'tags this -> ([`L_n_2965[@js 2965]] [@js.enum]) [@@js.get "STENCIL_PASS_DEPTH_FAIL"]
  val get_STENCIL_PASS_DEPTH_PASS: 'tags this -> ([`L_n_2966[@js 2966]] [@js.enum]) [@@js.get "STENCIL_PASS_DEPTH_PASS"]
  val get_STENCIL_REF: 'tags this -> ([`L_n_2967[@js 2967]] [@js.enum]) [@@js.get "STENCIL_REF"]
  val get_STENCIL_VALUE_MASK: 'tags this -> ([`L_n_2963[@js 2963]] [@js.enum]) [@@js.get "STENCIL_VALUE_MASK"]
  val get_STENCIL_WRITEMASK: 'tags this -> ([`L_n_2968[@js 2968]] [@js.enum]) [@@js.get "STENCIL_WRITEMASK"]
  val get_STENCIL_BACK_FUNC: 'tags this -> ([`L_n_34816[@js 34816]] [@js.enum]) [@@js.get "STENCIL_BACK_FUNC"]
  val get_STENCIL_BACK_FAIL: 'tags this -> ([`L_n_34817[@js 34817]] [@js.enum]) [@@js.get "STENCIL_BACK_FAIL"]
  val get_STENCIL_BACK_PASS_DEPTH_FAIL: 'tags this -> ([`L_n_34818[@js 34818]] [@js.enum]) [@@js.get "STENCIL_BACK_PASS_DEPTH_FAIL"]
  val get_STENCIL_BACK_PASS_DEPTH_PASS: 'tags this -> ([`L_n_34819[@js 34819]] [@js.enum]) [@@js.get "STENCIL_BACK_PASS_DEPTH_PASS"]
  val get_STENCIL_BACK_REF: 'tags this -> ([`L_n_36003[@js 36003]] [@js.enum]) [@@js.get "STENCIL_BACK_REF"]
  val get_STENCIL_BACK_VALUE_MASK: 'tags this -> ([`L_n_36004[@js 36004]] [@js.enum]) [@@js.get "STENCIL_BACK_VALUE_MASK"]
  val get_STENCIL_BACK_WRITEMASK: 'tags this -> ([`L_n_36005[@js 36005]] [@js.enum]) [@@js.get "STENCIL_BACK_WRITEMASK"]
  val get_VIEWPORT: 'tags this -> ([`L_n_2978[@js 2978]] [@js.enum]) [@@js.get "VIEWPORT"]
  val get_SCISSOR_BOX: 'tags this -> ([`L_n_3088[@js 3088]] [@js.enum]) [@@js.get "SCISSOR_BOX"]
  val get_COLOR_CLEAR_VALUE: 'tags this -> ([`L_n_3106[@js 3106]] [@js.enum]) [@@js.get "COLOR_CLEAR_VALUE"]
  val get_COLOR_WRITEMASK: 'tags this -> ([`L_n_3107[@js 3107]] [@js.enum]) [@@js.get "COLOR_WRITEMASK"]
  val get_UNPACK_ALIGNMENT: 'tags this -> ([`L_n_3317[@js 3317]] [@js.enum]) [@@js.get "UNPACK_ALIGNMENT"]
  val get_PACK_ALIGNMENT: 'tags this -> ([`L_n_3333[@js 3333]] [@js.enum]) [@@js.get "PACK_ALIGNMENT"]
  val get_MAX_TEXTURE_SIZE: 'tags this -> ([`L_n_3379[@js 3379]] [@js.enum]) [@@js.get "MAX_TEXTURE_SIZE"]
  val get_MAX_VIEWPORT_DIMS: 'tags this -> ([`L_n_3386[@js 3386]] [@js.enum]) [@@js.get "MAX_VIEWPORT_DIMS"]
  val get_SUBPIXEL_BITS: 'tags this -> ([`L_n_3408[@js 3408]] [@js.enum]) [@@js.get "SUBPIXEL_BITS"]
  val get_RED_BITS: 'tags this -> ([`L_n_3410[@js 3410]] [@js.enum]) [@@js.get "RED_BITS"]
  val get_GREEN_BITS: 'tags this -> ([`L_n_3411[@js 3411]] [@js.enum]) [@@js.get "GREEN_BITS"]
  val get_BLUE_BITS: 'tags this -> ([`L_n_3412[@js 3412]] [@js.enum]) [@@js.get "BLUE_BITS"]
  val get_ALPHA_BITS: 'tags this -> ([`L_n_3413[@js 3413]] [@js.enum]) [@@js.get "ALPHA_BITS"]
  val get_DEPTH_BITS: 'tags this -> ([`L_n_3414[@js 3414]] [@js.enum]) [@@js.get "DEPTH_BITS"]
  val get_STENCIL_BITS: 'tags this -> ([`L_n_3415[@js 3415]] [@js.enum]) [@@js.get "STENCIL_BITS"]
  val get_POLYGON_OFFSET_UNITS: 'tags this -> ([`L_n_10752[@js 10752]] [@js.enum]) [@@js.get "POLYGON_OFFSET_UNITS"]
  val get_POLYGON_OFFSET_FACTOR: 'tags this -> ([`L_n_32824[@js 32824]] [@js.enum]) [@@js.get "POLYGON_OFFSET_FACTOR"]
  val get_TEXTURE_BINDING_2D: 'tags this -> ([`L_n_32873[@js 32873]] [@js.enum]) [@@js.get "TEXTURE_BINDING_2D"]
  val get_SAMPLE_BUFFERS: 'tags this -> ([`L_n_32936[@js 32936]] [@js.enum]) [@@js.get "SAMPLE_BUFFERS"]
  val get_SAMPLES: 'tags this -> ([`L_n_32937[@js 32937]] [@js.enum]) [@@js.get "SAMPLES"]
  val get_SAMPLE_COVERAGE_VALUE: 'tags this -> ([`L_n_32938[@js 32938]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE_VALUE"]
  val get_SAMPLE_COVERAGE_INVERT: 'tags this -> ([`L_n_32939[@js 32939]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE_INVERT"]
  val get_COMPRESSED_TEXTURE_FORMATS: 'tags this -> ([`L_n_34467[@js 34467]] [@js.enum]) [@@js.get "COMPRESSED_TEXTURE_FORMATS"]
  val get_DONT_CARE: 'tags this -> ([`L_n_4352[@js 4352]] [@js.enum]) [@@js.get "DONT_CARE"]
  val get_FASTEST: 'tags this -> ([`L_n_4353[@js 4353]] [@js.enum]) [@@js.get "FASTEST"]
  val get_NICEST: 'tags this -> ([`L_n_4354[@js 4354]] [@js.enum]) [@@js.get "NICEST"]
  val get_GENERATE_MIPMAP_HINT: 'tags this -> ([`L_n_33170[@js 33170]] [@js.enum]) [@@js.get "GENERATE_MIPMAP_HINT"]
  val get_BYTE: 'tags this -> ([`L_n_5120[@js 5120]] [@js.enum]) [@@js.get "BYTE"]
  val get_UNSIGNED_BYTE: 'tags this -> ([`L_n_5121[@js 5121]] [@js.enum]) [@@js.get "UNSIGNED_BYTE"]
  val get_SHORT: 'tags this -> ([`L_n_5122[@js 5122]] [@js.enum]) [@@js.get "SHORT"]
  val get_UNSIGNED_SHORT: 'tags this -> ([`L_n_5123[@js 5123]] [@js.enum]) [@@js.get "UNSIGNED_SHORT"]
  val get_INT: 'tags this -> ([`L_n_5124[@js 5124]] [@js.enum]) [@@js.get "INT"]
  val get_UNSIGNED_INT: 'tags this -> ([`L_n_5125[@js 5125]] [@js.enum]) [@@js.get "UNSIGNED_INT"]
  val get_FLOAT: 'tags this -> ([`L_n_5126[@js 5126]] [@js.enum]) [@@js.get "FLOAT"]
  val get_DEPTH_COMPONENT: 'tags this -> ([`L_n_6402[@js 6402]] [@js.enum]) [@@js.get "DEPTH_COMPONENT"]
  val get_ALPHA: 'tags this -> ([`L_n_6406[@js 6406]] [@js.enum]) [@@js.get "ALPHA"]
  val get_RGB: 'tags this -> ([`L_n_6407[@js 6407]] [@js.enum]) [@@js.get "RGB"]
  val get_RGBA: 'tags this -> ([`L_n_6408[@js 6408]] [@js.enum]) [@@js.get "RGBA"]
  val get_LUMINANCE: 'tags this -> ([`L_n_6409[@js 6409]] [@js.enum]) [@@js.get "LUMINANCE"]
  val get_LUMINANCE_ALPHA: 'tags this -> ([`L_n_6410[@js 6410]] [@js.enum]) [@@js.get "LUMINANCE_ALPHA"]
  val get_UNSIGNED_SHORT_4_4_4_4: 'tags this -> ([`L_n_32819[@js 32819]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_4_4_4_4"]
  val get_UNSIGNED_SHORT_5_5_5_1: 'tags this -> ([`L_n_32820[@js 32820]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_5_5_5_1"]
  val get_UNSIGNED_SHORT_5_6_5: 'tags this -> ([`L_n_33635[@js 33635]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_5_6_5"]
  val get_FRAGMENT_SHADER: 'tags this -> ([`L_n_35632[@js 35632]] [@js.enum]) [@@js.get "FRAGMENT_SHADER"]
  val get_VERTEX_SHADER: 'tags this -> ([`L_n_35633[@js 35633]] [@js.enum]) [@@js.get "VERTEX_SHADER"]
  val get_MAX_VERTEX_ATTRIBS: 'tags this -> ([`L_n_34921[@js 34921]] [@js.enum]) [@@js.get "MAX_VERTEX_ATTRIBS"]
  val get_MAX_VERTEX_UNIFORM_VECTORS: 'tags this -> ([`L_n_36347[@js 36347]] [@js.enum]) [@@js.get "MAX_VERTEX_UNIFORM_VECTORS"]
  val get_MAX_VARYING_VECTORS: 'tags this -> ([`L_n_36348[@js 36348]] [@js.enum]) [@@js.get "MAX_VARYING_VECTORS"]
  val get_MAX_COMBINED_TEXTURE_IMAGE_UNITS: 'tags this -> ([`L_n_35661[@js 35661]] [@js.enum]) [@@js.get "MAX_COMBINED_TEXTURE_IMAGE_UNITS"]
  val get_MAX_VERTEX_TEXTURE_IMAGE_UNITS: 'tags this -> ([`L_n_35660[@js 35660]] [@js.enum]) [@@js.get "MAX_VERTEX_TEXTURE_IMAGE_UNITS"]
  val get_MAX_TEXTURE_IMAGE_UNITS: 'tags this -> ([`L_n_34930[@js 34930]] [@js.enum]) [@@js.get "MAX_TEXTURE_IMAGE_UNITS"]
  val get_MAX_FRAGMENT_UNIFORM_VECTORS: 'tags this -> ([`L_n_36349[@js 36349]] [@js.enum]) [@@js.get "MAX_FRAGMENT_UNIFORM_VECTORS"]
  val get_SHADER_TYPE: 'tags this -> ([`L_n_35663[@js 35663]] [@js.enum]) [@@js.get "SHADER_TYPE"]
  val get_DELETE_STATUS: 'tags this -> ([`L_n_35712[@js 35712]] [@js.enum]) [@@js.get "DELETE_STATUS"]
  val get_LINK_STATUS: 'tags this -> ([`L_n_35714[@js 35714]] [@js.enum]) [@@js.get "LINK_STATUS"]
  val get_VALIDATE_STATUS: 'tags this -> ([`L_n_35715[@js 35715]] [@js.enum]) [@@js.get "VALIDATE_STATUS"]
  val get_ATTACHED_SHADERS: 'tags this -> ([`L_n_35717[@js 35717]] [@js.enum]) [@@js.get "ATTACHED_SHADERS"]
  val get_ACTIVE_UNIFORMS: 'tags this -> ([`L_n_35718[@js 35718]] [@js.enum]) [@@js.get "ACTIVE_UNIFORMS"]
  val get_ACTIVE_ATTRIBUTES: 'tags this -> ([`L_n_35721[@js 35721]] [@js.enum]) [@@js.get "ACTIVE_ATTRIBUTES"]
  val get_SHADING_LANGUAGE_VERSION: 'tags this -> ([`L_n_35724[@js 35724]] [@js.enum]) [@@js.get "SHADING_LANGUAGE_VERSION"]
  val get_CURRENT_PROGRAM: 'tags this -> ([`L_n_35725[@js 35725]] [@js.enum]) [@@js.get "CURRENT_PROGRAM"]
  val get_NEVER: 'tags this -> ([`L_n_512[@js 512]] [@js.enum]) [@@js.get "NEVER"]
  val get_LESS: 'tags this -> ([`L_n_513[@js 513]] [@js.enum]) [@@js.get "LESS"]
  val get_EQUAL: 'tags this -> ([`L_n_514[@js 514]] [@js.enum]) [@@js.get "EQUAL"]
  val get_LEQUAL: 'tags this -> ([`L_n_515[@js 515]] [@js.enum]) [@@js.get "LEQUAL"]
  val get_GREATER: 'tags this -> ([`L_n_516[@js 516]] [@js.enum]) [@@js.get "GREATER"]
  val get_NOTEQUAL: 'tags this -> ([`L_n_517[@js 517]] [@js.enum]) [@@js.get "NOTEQUAL"]
  val get_GEQUAL: 'tags this -> ([`L_n_518[@js 518]] [@js.enum]) [@@js.get "GEQUAL"]
  val get_ALWAYS: 'tags this -> ([`L_n_519[@js 519]] [@js.enum]) [@@js.get "ALWAYS"]
  val get_KEEP: 'tags this -> ([`L_n_7680[@js 7680]] [@js.enum]) [@@js.get "KEEP"]
  val get_REPLACE: 'tags this -> ([`L_n_7681[@js 7681]] [@js.enum]) [@@js.get "REPLACE"]
  val get_INCR: 'tags this -> ([`L_n_7682[@js 7682]] [@js.enum]) [@@js.get "INCR"]
  val get_DECR: 'tags this -> ([`L_n_7683[@js 7683]] [@js.enum]) [@@js.get "DECR"]
  val get_INVERT: 'tags this -> ([`L_n_5386[@js 5386]] [@js.enum]) [@@js.get "INVERT"]
  val get_INCR_WRAP: 'tags this -> ([`L_n_34055[@js 34055]] [@js.enum]) [@@js.get "INCR_WRAP"]
  val get_DECR_WRAP: 'tags this -> ([`L_n_34056[@js 34056]] [@js.enum]) [@@js.get "DECR_WRAP"]
  val get_VENDOR: 'tags this -> ([`L_n_7936[@js 7936]] [@js.enum]) [@@js.get "VENDOR"]
  val get_RENDERER: 'tags this -> ([`L_n_7937[@js 7937]] [@js.enum]) [@@js.get "RENDERER"]
  val get_VERSION: 'tags this -> ([`L_n_7938[@js 7938]] [@js.enum]) [@@js.get "VERSION"]
  val get_NEAREST: 'tags this -> ([`L_n_9728[@js 9728]] [@js.enum]) [@@js.get "NEAREST"]
  val get_LINEAR: 'tags this -> ([`L_n_9729[@js 9729]] [@js.enum]) [@@js.get "LINEAR"]
  val get_NEAREST_MIPMAP_NEAREST: 'tags this -> ([`L_n_9984[@js 9984]] [@js.enum]) [@@js.get "NEAREST_MIPMAP_NEAREST"]
  val get_LINEAR_MIPMAP_NEAREST: 'tags this -> ([`L_n_9985[@js 9985]] [@js.enum]) [@@js.get "LINEAR_MIPMAP_NEAREST"]
  val get_NEAREST_MIPMAP_LINEAR: 'tags this -> ([`L_n_9986[@js 9986]] [@js.enum]) [@@js.get "NEAREST_MIPMAP_LINEAR"]
  val get_LINEAR_MIPMAP_LINEAR: 'tags this -> ([`L_n_9987[@js 9987]] [@js.enum]) [@@js.get "LINEAR_MIPMAP_LINEAR"]
  val get_TEXTURE_MAG_FILTER: 'tags this -> ([`L_n_10240[@js 10240]] [@js.enum]) [@@js.get "TEXTURE_MAG_FILTER"]
  val get_TEXTURE_MIN_FILTER: 'tags this -> ([`L_n_10241[@js 10241]] [@js.enum]) [@@js.get "TEXTURE_MIN_FILTER"]
  val get_TEXTURE_WRAP_S: 'tags this -> ([`L_n_10242[@js 10242]] [@js.enum]) [@@js.get "TEXTURE_WRAP_S"]
  val get_TEXTURE_WRAP_T: 'tags this -> ([`L_n_10243[@js 10243]] [@js.enum]) [@@js.get "TEXTURE_WRAP_T"]
  val get_TEXTURE_2D: 'tags this -> ([`L_n_3553[@js 3553]] [@js.enum]) [@@js.get "TEXTURE_2D"]
  val get_TEXTURE: 'tags this -> ([`L_n_5890[@js 5890]] [@js.enum]) [@@js.get "TEXTURE"]
  val get_TEXTURE_CUBE_MAP: 'tags this -> ([`L_n_34067[@js 34067]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP"]
  val get_TEXTURE_BINDING_CUBE_MAP: 'tags this -> ([`L_n_34068[@js 34068]] [@js.enum]) [@@js.get "TEXTURE_BINDING_CUBE_MAP"]
  val get_TEXTURE_CUBE_MAP_POSITIVE_X: 'tags this -> ([`L_n_34069[@js 34069]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_X"]
  val get_TEXTURE_CUBE_MAP_NEGATIVE_X: 'tags this -> ([`L_n_34070[@js 34070]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_X"]
  val get_TEXTURE_CUBE_MAP_POSITIVE_Y: 'tags this -> ([`L_n_34071[@js 34071]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_Y"]
  val get_TEXTURE_CUBE_MAP_NEGATIVE_Y: 'tags this -> ([`L_n_34072[@js 34072]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_Y"]
  val get_TEXTURE_CUBE_MAP_POSITIVE_Z: 'tags this -> ([`L_n_34073[@js 34073]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_Z"]
  val get_TEXTURE_CUBE_MAP_NEGATIVE_Z: 'tags this -> ([`L_n_34074[@js 34074]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_Z"]
  val get_MAX_CUBE_MAP_TEXTURE_SIZE: 'tags this -> ([`L_n_34076[@js 34076]] [@js.enum]) [@@js.get "MAX_CUBE_MAP_TEXTURE_SIZE"]
  val get_TEXTURE0: 'tags this -> ([`L_n_33984[@js 33984]] [@js.enum]) [@@js.get "TEXTURE0"]
  val get_TEXTURE1: 'tags this -> ([`L_n_33985[@js 33985]] [@js.enum]) [@@js.get "TEXTURE1"]
  val get_TEXTURE2: 'tags this -> ([`L_n_33986[@js 33986]] [@js.enum]) [@@js.get "TEXTURE2"]
  val get_TEXTURE3: 'tags this -> ([`L_n_33987[@js 33987]] [@js.enum]) [@@js.get "TEXTURE3"]
  val get_TEXTURE4: 'tags this -> ([`L_n_33988[@js 33988]] [@js.enum]) [@@js.get "TEXTURE4"]
  val get_TEXTURE5: 'tags this -> ([`L_n_33989[@js 33989]] [@js.enum]) [@@js.get "TEXTURE5"]
  val get_TEXTURE6: 'tags this -> ([`L_n_33990[@js 33990]] [@js.enum]) [@@js.get "TEXTURE6"]
  val get_TEXTURE7: 'tags this -> ([`L_n_33991[@js 33991]] [@js.enum]) [@@js.get "TEXTURE7"]
  val get_TEXTURE8: 'tags this -> ([`L_n_33992[@js 33992]] [@js.enum]) [@@js.get "TEXTURE8"]
  val get_TEXTURE9: 'tags this -> ([`L_n_33993[@js 33993]] [@js.enum]) [@@js.get "TEXTURE9"]
  val get_TEXTURE10: 'tags this -> ([`L_n_33994[@js 33994]] [@js.enum]) [@@js.get "TEXTURE10"]
  val get_TEXTURE11: 'tags this -> ([`L_n_33995[@js 33995]] [@js.enum]) [@@js.get "TEXTURE11"]
  val get_TEXTURE12: 'tags this -> ([`L_n_33996[@js 33996]] [@js.enum]) [@@js.get "TEXTURE12"]
  val get_TEXTURE13: 'tags this -> ([`L_n_33997[@js 33997]] [@js.enum]) [@@js.get "TEXTURE13"]
  val get_TEXTURE14: 'tags this -> ([`L_n_33998[@js 33998]] [@js.enum]) [@@js.get "TEXTURE14"]
  val get_TEXTURE15: 'tags this -> ([`L_n_33999[@js 33999]] [@js.enum]) [@@js.get "TEXTURE15"]
  val get_TEXTURE16: 'tags this -> ([`L_n_34000[@js 34000]] [@js.enum]) [@@js.get "TEXTURE16"]
  val get_TEXTURE17: 'tags this -> ([`L_n_34001[@js 34001]] [@js.enum]) [@@js.get "TEXTURE17"]
  val get_TEXTURE18: 'tags this -> ([`L_n_34002[@js 34002]] [@js.enum]) [@@js.get "TEXTURE18"]
  val get_TEXTURE19: 'tags this -> ([`L_n_34003[@js 34003]] [@js.enum]) [@@js.get "TEXTURE19"]
  val get_TEXTURE20: 'tags this -> ([`L_n_34004[@js 34004]] [@js.enum]) [@@js.get "TEXTURE20"]
  val get_TEXTURE21: 'tags this -> ([`L_n_34005[@js 34005]] [@js.enum]) [@@js.get "TEXTURE21"]
  val get_TEXTURE22: 'tags this -> ([`L_n_34006[@js 34006]] [@js.enum]) [@@js.get "TEXTURE22"]
  val get_TEXTURE23: 'tags this -> ([`L_n_34007[@js 34007]] [@js.enum]) [@@js.get "TEXTURE23"]
  val get_TEXTURE24: 'tags this -> ([`L_n_34008[@js 34008]] [@js.enum]) [@@js.get "TEXTURE24"]
  val get_TEXTURE25: 'tags this -> ([`L_n_34009[@js 34009]] [@js.enum]) [@@js.get "TEXTURE25"]
  val get_TEXTURE26: 'tags this -> ([`L_n_34010[@js 34010]] [@js.enum]) [@@js.get "TEXTURE26"]
  val get_TEXTURE27: 'tags this -> ([`L_n_34011[@js 34011]] [@js.enum]) [@@js.get "TEXTURE27"]
  val get_TEXTURE28: 'tags this -> ([`L_n_34012[@js 34012]] [@js.enum]) [@@js.get "TEXTURE28"]
  val get_TEXTURE29: 'tags this -> ([`L_n_34013[@js 34013]] [@js.enum]) [@@js.get "TEXTURE29"]
  val get_TEXTURE30: 'tags this -> ([`L_n_34014[@js 34014]] [@js.enum]) [@@js.get "TEXTURE30"]
  val get_TEXTURE31: 'tags this -> ([`L_n_34015[@js 34015]] [@js.enum]) [@@js.get "TEXTURE31"]
  val get_ACTIVE_TEXTURE: 'tags this -> ([`L_n_34016[@js 34016]] [@js.enum]) [@@js.get "ACTIVE_TEXTURE"]
  val get_REPEAT: 'tags this -> ([`L_n_10497[@js 10497]] [@js.enum]) [@@js.get "REPEAT"]
  val get_CLAMP_TO_EDGE: 'tags this -> ([`L_n_33071[@js 33071]] [@js.enum]) [@@js.get "CLAMP_TO_EDGE"]
  val get_MIRRORED_REPEAT: 'tags this -> ([`L_n_33648[@js 33648]] [@js.enum]) [@@js.get "MIRRORED_REPEAT"]
  val get_FLOAT_VEC2: 'tags this -> ([`L_n_35664[@js 35664]] [@js.enum]) [@@js.get "FLOAT_VEC2"]
  val get_FLOAT_VEC3: 'tags this -> ([`L_n_35665[@js 35665]] [@js.enum]) [@@js.get "FLOAT_VEC3"]
  val get_FLOAT_VEC4: 'tags this -> ([`L_n_35666[@js 35666]] [@js.enum]) [@@js.get "FLOAT_VEC4"]
  val get_INT_VEC2: 'tags this -> ([`L_n_35667[@js 35667]] [@js.enum]) [@@js.get "INT_VEC2"]
  val get_INT_VEC3: 'tags this -> ([`L_n_35668[@js 35668]] [@js.enum]) [@@js.get "INT_VEC3"]
  val get_INT_VEC4: 'tags this -> ([`L_n_35669[@js 35669]] [@js.enum]) [@@js.get "INT_VEC4"]
  val get_BOOL: 'tags this -> ([`L_n_35670[@js 35670]] [@js.enum]) [@@js.get "BOOL"]
  val get_BOOL_VEC2: 'tags this -> ([`L_n_35671[@js 35671]] [@js.enum]) [@@js.get "BOOL_VEC2"]
  val get_BOOL_VEC3: 'tags this -> ([`L_n_35672[@js 35672]] [@js.enum]) [@@js.get "BOOL_VEC3"]
  val get_BOOL_VEC4: 'tags this -> ([`L_n_35673[@js 35673]] [@js.enum]) [@@js.get "BOOL_VEC4"]
  val get_FLOAT_MAT2: 'tags this -> ([`L_n_35674[@js 35674]] [@js.enum]) [@@js.get "FLOAT_MAT2"]
  val get_FLOAT_MAT3: 'tags this -> ([`L_n_35675[@js 35675]] [@js.enum]) [@@js.get "FLOAT_MAT3"]
  val get_FLOAT_MAT4: 'tags this -> ([`L_n_35676[@js 35676]] [@js.enum]) [@@js.get "FLOAT_MAT4"]
  val get_SAMPLER_2D: 'tags this -> ([`L_n_35678[@js 35678]] [@js.enum]) [@@js.get "SAMPLER_2D"]
  val get_SAMPLER_CUBE: 'tags this -> ([`L_n_35680[@js 35680]] [@js.enum]) [@@js.get "SAMPLER_CUBE"]
  val get_VERTEX_ATTRIB_ARRAY_ENABLED: 'tags this -> ([`L_n_34338[@js 34338]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_ENABLED"]
  val get_VERTEX_ATTRIB_ARRAY_SIZE: 'tags this -> ([`L_n_34339[@js 34339]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_SIZE"]
  val get_VERTEX_ATTRIB_ARRAY_STRIDE: 'tags this -> ([`L_n_34340[@js 34340]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_STRIDE"]
  val get_VERTEX_ATTRIB_ARRAY_TYPE: 'tags this -> ([`L_n_34341[@js 34341]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_TYPE"]
  val get_VERTEX_ATTRIB_ARRAY_NORMALIZED: 'tags this -> ([`L_n_34922[@js 34922]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_NORMALIZED"]
  val get_VERTEX_ATTRIB_ARRAY_POINTER: 'tags this -> ([`L_n_34373[@js 34373]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_POINTER"]
  val get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 'tags this -> ([`L_n_34975[@js 34975]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"]
  val get_IMPLEMENTATION_COLOR_READ_TYPE: 'tags this -> ([`L_n_35738[@js 35738]] [@js.enum]) [@@js.get "IMPLEMENTATION_COLOR_READ_TYPE"]
  val get_IMPLEMENTATION_COLOR_READ_FORMAT: 'tags this -> ([`L_n_35739[@js 35739]] [@js.enum]) [@@js.get "IMPLEMENTATION_COLOR_READ_FORMAT"]
  val get_COMPILE_STATUS: 'tags this -> ([`L_n_35713[@js 35713]] [@js.enum]) [@@js.get "COMPILE_STATUS"]
  val get_LOW_FLOAT: 'tags this -> ([`L_n_36336[@js 36336]] [@js.enum]) [@@js.get "LOW_FLOAT"]
  val get_MEDIUM_FLOAT: 'tags this -> ([`L_n_36337[@js 36337]] [@js.enum]) [@@js.get "MEDIUM_FLOAT"]
  val get_HIGH_FLOAT: 'tags this -> ([`L_n_36338[@js 36338]] [@js.enum]) [@@js.get "HIGH_FLOAT"]
  val get_LOW_INT: 'tags this -> ([`L_n_36339[@js 36339]] [@js.enum]) [@@js.get "LOW_INT"]
  val get_MEDIUM_INT: 'tags this -> ([`L_n_36340[@js 36340]] [@js.enum]) [@@js.get "MEDIUM_INT"]
  val get_HIGH_INT: 'tags this -> ([`L_n_36341[@js 36341]] [@js.enum]) [@@js.get "HIGH_INT"]
  val get_FRAMEBUFFER: 'tags this -> ([`L_n_36160[@js 36160]] [@js.enum]) [@@js.get "FRAMEBUFFER"]
  val get_RENDERBUFFER: 'tags this -> ([`L_n_36161[@js 36161]] [@js.enum]) [@@js.get "RENDERBUFFER"]
  val get_RGBA4: 'tags this -> ([`L_n_32854[@js 32854]] [@js.enum]) [@@js.get "RGBA4"]
  val get_RGB5_A1: 'tags this -> ([`L_n_32855[@js 32855]] [@js.enum]) [@@js.get "RGB5_A1"]
  val get_RGB565: 'tags this -> ([`L_n_36194[@js 36194]] [@js.enum]) [@@js.get "RGB565"]
  val get_DEPTH_COMPONENT16: 'tags this -> ([`L_n_33189[@js 33189]] [@js.enum]) [@@js.get "DEPTH_COMPONENT16"]
  val get_STENCIL_INDEX8: 'tags this -> ([`L_n_36168[@js 36168]] [@js.enum]) [@@js.get "STENCIL_INDEX8"]
  val get_DEPTH_STENCIL: 'tags this -> ([`L_n_34041[@js 34041]] [@js.enum]) [@@js.get "DEPTH_STENCIL"]
  val get_RENDERBUFFER_WIDTH: 'tags this -> ([`L_n_36162[@js 36162]] [@js.enum]) [@@js.get "RENDERBUFFER_WIDTH"]
  val get_RENDERBUFFER_HEIGHT: 'tags this -> ([`L_n_36163[@js 36163]] [@js.enum]) [@@js.get "RENDERBUFFER_HEIGHT"]
  val get_RENDERBUFFER_INTERNAL_FORMAT: 'tags this -> ([`L_n_36164[@js 36164]] [@js.enum]) [@@js.get "RENDERBUFFER_INTERNAL_FORMAT"]
  val get_RENDERBUFFER_RED_SIZE: 'tags this -> ([`L_n_36176[@js 36176]] [@js.enum]) [@@js.get "RENDERBUFFER_RED_SIZE"]
  val get_RENDERBUFFER_GREEN_SIZE: 'tags this -> ([`L_n_36177[@js 36177]] [@js.enum]) [@@js.get "RENDERBUFFER_GREEN_SIZE"]
  val get_RENDERBUFFER_BLUE_SIZE: 'tags this -> ([`L_n_36178[@js 36178]] [@js.enum]) [@@js.get "RENDERBUFFER_BLUE_SIZE"]
  val get_RENDERBUFFER_ALPHA_SIZE: 'tags this -> ([`L_n_36179[@js 36179]] [@js.enum]) [@@js.get "RENDERBUFFER_ALPHA_SIZE"]
  val get_RENDERBUFFER_DEPTH_SIZE: 'tags this -> ([`L_n_36180[@js 36180]] [@js.enum]) [@@js.get "RENDERBUFFER_DEPTH_SIZE"]
  val get_RENDERBUFFER_STENCIL_SIZE: 'tags this -> ([`L_n_36181[@js 36181]] [@js.enum]) [@@js.get "RENDERBUFFER_STENCIL_SIZE"]
  val get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 'tags this -> ([`L_n_36048[@js 36048]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"]
  val get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 'tags this -> ([`L_n_36049[@js 36049]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"]
  val get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 'tags this -> ([`L_n_36050[@js 36050]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"]
  val get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 'tags this -> ([`L_n_36051[@js 36051]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"]
  val get_COLOR_ATTACHMENT0: 'tags this -> ([`L_n_36064[@js 36064]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT0"]
  val get_DEPTH_ATTACHMENT: 'tags this -> ([`L_n_36096[@js 36096]] [@js.enum]) [@@js.get "DEPTH_ATTACHMENT"]
  val get_STENCIL_ATTACHMENT: 'tags this -> ([`L_n_36128[@js 36128]] [@js.enum]) [@@js.get "STENCIL_ATTACHMENT"]
  val get_DEPTH_STENCIL_ATTACHMENT: 'tags this -> ([`L_n_33306[@js 33306]] [@js.enum]) [@@js.get "DEPTH_STENCIL_ATTACHMENT"]
  val get_NONE: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NONE"]
  val get_FRAMEBUFFER_COMPLETE: 'tags this -> ([`L_n_36053[@js 36053]] [@js.enum]) [@@js.get "FRAMEBUFFER_COMPLETE"]
  val get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 'tags this -> ([`L_n_36054[@js 36054]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_ATTACHMENT"]
  val get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 'tags this -> ([`L_n_36055[@js 36055]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"]
  val get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 'tags this -> ([`L_n_36057[@js 36057]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_DIMENSIONS"]
  val get_FRAMEBUFFER_UNSUPPORTED: 'tags this -> ([`L_n_36061[@js 36061]] [@js.enum]) [@@js.get "FRAMEBUFFER_UNSUPPORTED"]
  val get_FRAMEBUFFER_BINDING: 'tags this -> ([`L_n_36006[@js 36006]] [@js.enum]) [@@js.get "FRAMEBUFFER_BINDING"]
  val get_RENDERBUFFER_BINDING: 'tags this -> ([`L_n_36007[@js 36007]] [@js.enum]) [@@js.get "RENDERBUFFER_BINDING"]
  val get_MAX_RENDERBUFFER_SIZE: 'tags this -> ([`L_n_34024[@js 34024]] [@js.enum]) [@@js.get "MAX_RENDERBUFFER_SIZE"]
  val get_INVALID_FRAMEBUFFER_OPERATION: 'tags this -> ([`L_n_1286[@js 1286]] [@js.enum]) [@@js.get "INVALID_FRAMEBUFFER_OPERATION"]
  val get_UNPACK_FLIP_Y_WEBGL: 'tags this -> ([`L_n_37440[@js 37440]] [@js.enum]) [@@js.get "UNPACK_FLIP_Y_WEBGL"]
  val get_UNPACK_PREMULTIPLY_ALPHA_WEBGL: 'tags this -> ([`L_n_37441[@js 37441]] [@js.enum]) [@@js.get "UNPACK_PREMULTIPLY_ALPHA_WEBGL"]
  val get_CONTEXT_LOST_WEBGL: 'tags this -> ([`L_n_37442[@js 37442]] [@js.enum]) [@@js.get "CONTEXT_LOST_WEBGL"]
  val get_UNPACK_COLORSPACE_CONVERSION_WEBGL: 'tags this -> ([`L_n_37443[@js 37443]] [@js.enum]) [@@js.get "UNPACK_COLORSPACE_CONVERSION_WEBGL"]
  val get_BROWSER_DEFAULT_WEBGL: 'tags this -> ([`L_n_37444[@js 37444]] [@js.enum]) [@@js.get "BROWSER_DEFAULT_WEBGL"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLVertexArrayObject) *)
module[@js.scope "WebGLVertexArrayObject"] WebGLVertexArrayObject : sig
  type t = [`WebGLVertexArrayObject] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLVertexArrayObject]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLVertexArrayObject]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLVertexArrayObject ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLTransformFeedback) *)
module[@js.scope "WebGLTransformFeedback"] WebGLTransformFeedback : sig
  type t = [`WebGLTransformFeedback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLTransformFeedback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLTransformFeedback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLTransformFeedback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLSync) *)
module[@js.scope "WebGLSync"] WebGLSync : sig
  type t = [`WebGLSync] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLSync]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLSync]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLSync ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLSampler) *)
module[@js.scope "WebGLSampler"] WebGLSampler : sig
  type t = [`WebGLSampler] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLSampler]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLSampler]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLSampler ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLQuery) *)
module[@js.scope "WebGLQuery"] WebGLQuery : sig
  type t = [`WebGLQuery] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLQuery]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLQuery]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLQuery ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module Uint32List : sig
  type t = (GLuint.t list, Uint32Array.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module Int32List : sig
  type t = (GLint.t list, Int32Array.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GLuint64 : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GLsizeiptr : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GLint64 : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module DOMMatrix2DInit : sig
  type t = [`DOMMatrix2DInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMMatrix2DInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMMatrix2DInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix2DInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_a: 'tags this -> float option [@@js.get "a"]
  val set_a: 'tags this -> float -> unit [@@js.set "a"]
  val get_b: 'tags this -> float option [@@js.get "b"]
  val set_b: 'tags this -> float -> unit [@@js.set "b"]
  val get_c: 'tags this -> float option [@@js.get "c"]
  val set_c: 'tags this -> float -> unit [@@js.set "c"]
  val get_d: 'tags this -> float option [@@js.get "d"]
  val set_d: 'tags this -> float -> unit [@@js.set "d"]
  val get_e: 'tags this -> float option [@@js.get "e"]
  val set_e: 'tags this -> float -> unit [@@js.set "e"]
  val get_f: 'tags this -> float option [@@js.get "f"]
  val set_f: 'tags this -> float -> unit [@@js.set "f"]
  val get_m11: 'tags this -> float option [@@js.get "m11"]
  val set_m11: 'tags this -> float -> unit [@@js.set "m11"]
  val get_m12: 'tags this -> float option [@@js.get "m12"]
  val set_m12: 'tags this -> float -> unit [@@js.set "m12"]
  val get_m21: 'tags this -> float option [@@js.get "m21"]
  val set_m21: 'tags this -> float -> unit [@@js.set "m21"]
  val get_m22: 'tags this -> float option [@@js.get "m22"]
  val set_m22: 'tags this -> float -> unit [@@js.set "m22"]
  val get_m41: 'tags this -> float option [@@js.get "m41"]
  val set_m41: 'tags this -> float -> unit [@@js.set "m41"]
  val get_m42: 'tags this -> float option [@@js.get "m42"]
  val set_m42: 'tags this -> float -> unit [@@js.set "m42"]
  val create: ?a:float -> ?b:float -> ?c:float -> ?d:float -> ?e:float -> ?f:float -> ?m11:float -> ?m12:float -> ?m21:float -> ?m22:float -> ?m41:float -> ?m42:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DOMMatrixInit : sig
  type t = [`DOMMatrix2DInit | `DOMMatrixInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMMatrix2DInit | `DOMMatrixInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMMatrix2DInit | `DOMMatrixInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_is2D: 'tags this -> bool option [@@js.get "is2D"]
  val set_is2D: 'tags this -> bool -> unit [@@js.set "is2D"]
  val get_m13: 'tags this -> float option [@@js.get "m13"]
  val set_m13: 'tags this -> float -> unit [@@js.set "m13"]
  val get_m14: 'tags this -> float option [@@js.get "m14"]
  val set_m14: 'tags this -> float -> unit [@@js.set "m14"]
  val get_m23: 'tags this -> float option [@@js.get "m23"]
  val set_m23: 'tags this -> float -> unit [@@js.set "m23"]
  val get_m24: 'tags this -> float option [@@js.get "m24"]
  val set_m24: 'tags this -> float -> unit [@@js.set "m24"]
  val get_m31: 'tags this -> float option [@@js.get "m31"]
  val set_m31: 'tags this -> float -> unit [@@js.set "m31"]
  val get_m32: 'tags this -> float option [@@js.get "m32"]
  val set_m32: 'tags this -> float -> unit [@@js.set "m32"]
  val get_m33: 'tags this -> float option [@@js.get "m33"]
  val set_m33: 'tags this -> float -> unit [@@js.set "m33"]
  val get_m34: 'tags this -> float option [@@js.get "m34"]
  val set_m34: 'tags this -> float -> unit [@@js.set "m34"]
  val get_m43: 'tags this -> float option [@@js.get "m43"]
  val set_m43: 'tags this -> float -> unit [@@js.set "m43"]
  val get_m44: 'tags this -> float option [@@js.get "m44"]
  val set_m44: 'tags this -> float -> unit [@@js.set "m44"]
  val create: ?is2D:bool -> ?m13:float -> ?m14:float -> ?m23:float -> ?m24:float -> ?m31:float -> ?m32:float -> ?m33:float -> ?m34:float -> ?m43:float -> ?m44:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DOMPointInit : sig
  type t = [`DOMPointInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMPointInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMPointInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMPointInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_w: 'tags this -> float option [@@js.get "w"]
  val set_w: 'tags this -> float -> unit [@@js.set "w"]
  val get_x: 'tags this -> float option [@@js.get "x"]
  val set_x: 'tags this -> float -> unit [@@js.set "x"]
  val get_y: 'tags this -> float option [@@js.get "y"]
  val set_y: 'tags this -> float -> unit [@@js.set "y"]
  val get_z: 'tags this -> float option [@@js.get "z"]
  val set_z: 'tags this -> float -> unit [@@js.set "z"]
  val create: ?w:float -> ?x:float -> ?y:float -> ?z:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint) *)
module[@js.scope "DOMPoint"] rec DOMPoint : sig
  type t = [`DOMPoint | `DOMPointReadOnly] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMPoint | `DOMPointReadOnly]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMPoint | `DOMPointReadOnly]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMPoint ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/w) *)
  val get_w: 'tags this -> float [@@js.get "w"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/w) *)
  val set_w: 'tags this -> float -> unit [@@js.set "w"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/x) *)
  val get_x: 'tags this -> float [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/x) *)
  val set_x: 'tags this -> float -> unit [@@js.set "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/y) *)
  val get_y: 'tags this -> float [@@js.get "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/y) *)
  val set_y: 'tags this -> float -> unit [@@js.set "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/z) *)
  val get_z: 'tags this -> float [@@js.get "z"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/z) *)
  val set_z: 'tags this -> float -> unit [@@js.set "z"]
  val create: w:float -> x:float -> y:float -> z:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/fromPoint) *)
  val fromPoint: ?other:DOMPointInit.t -> unit -> t [@@js.global "fromPoint"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly) *)
and[@js.scope "DOMPointReadOnly"] DOMPointReadOnly : sig
  type t = [`DOMPointReadOnly] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMPointReadOnly]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMPointReadOnly]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMPointReadOnly ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/w) *)
  val get_w: 'tags this -> float [@@js.get "w"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/x) *)
  val get_x: 'tags this -> float [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/y) *)
  val get_y: 'tags this -> float [@@js.get "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/z) *)
  val get_z: 'tags this -> float [@@js.get "z"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/matrixTransform) *)
  val matrixTransform: 'tags this -> ?matrix:DOMMatrixInit.t -> unit -> DOMPoint.t [@@js.call "matrixTransform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/fromPoint) *)
  val fromPoint: ?other:DOMPointInit.t -> unit -> t [@@js.global "fromPoint"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrix) *)
module[@js.scope "DOMMatrix"] rec DOMMatrix : sig
  type t = [`DOMMatrix | `DOMMatrixReadOnly] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMMatrix | `DOMMatrixReadOnly]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMMatrix | `DOMMatrixReadOnly]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/a) *)
  val get_a: 'tags this -> float [@@js.get "a"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/a) *)
  val set_a: 'tags this -> float -> unit [@@js.set "a"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/b) *)
  val get_b: 'tags this -> float [@@js.get "b"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/b) *)
  val set_b: 'tags this -> float -> unit [@@js.set "b"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/c) *)
  val get_c: 'tags this -> float [@@js.get "c"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/c) *)
  val set_c: 'tags this -> float -> unit [@@js.set "c"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/d) *)
  val get_d: 'tags this -> float [@@js.get "d"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/d) *)
  val set_d: 'tags this -> float -> unit [@@js.set "d"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/e) *)
  val get_e: 'tags this -> float [@@js.get "e"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/e) *)
  val set_e: 'tags this -> float -> unit [@@js.set "e"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/f) *)
  val get_f: 'tags this -> float [@@js.get "f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/f) *)
  val set_f: 'tags this -> float -> unit [@@js.set "f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m11) *)
  val get_m11: 'tags this -> float [@@js.get "m11"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m11) *)
  val set_m11: 'tags this -> float -> unit [@@js.set "m11"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m12) *)
  val get_m12: 'tags this -> float [@@js.get "m12"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m12) *)
  val set_m12: 'tags this -> float -> unit [@@js.set "m12"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m13) *)
  val get_m13: 'tags this -> float [@@js.get "m13"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m13) *)
  val set_m13: 'tags this -> float -> unit [@@js.set "m13"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m14) *)
  val get_m14: 'tags this -> float [@@js.get "m14"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m14) *)
  val set_m14: 'tags this -> float -> unit [@@js.set "m14"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m21) *)
  val get_m21: 'tags this -> float [@@js.get "m21"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m21) *)
  val set_m21: 'tags this -> float -> unit [@@js.set "m21"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m22) *)
  val get_m22: 'tags this -> float [@@js.get "m22"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m22) *)
  val set_m22: 'tags this -> float -> unit [@@js.set "m22"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m23) *)
  val get_m23: 'tags this -> float [@@js.get "m23"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m23) *)
  val set_m23: 'tags this -> float -> unit [@@js.set "m23"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m24) *)
  val get_m24: 'tags this -> float [@@js.get "m24"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m24) *)
  val set_m24: 'tags this -> float -> unit [@@js.set "m24"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m31) *)
  val get_m31: 'tags this -> float [@@js.get "m31"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m31) *)
  val set_m31: 'tags this -> float -> unit [@@js.set "m31"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m32) *)
  val get_m32: 'tags this -> float [@@js.get "m32"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m32) *)
  val set_m32: 'tags this -> float -> unit [@@js.set "m32"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m33) *)
  val get_m33: 'tags this -> float [@@js.get "m33"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m33) *)
  val set_m33: 'tags this -> float -> unit [@@js.set "m33"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m34) *)
  val get_m34: 'tags this -> float [@@js.get "m34"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m34) *)
  val set_m34: 'tags this -> float -> unit [@@js.set "m34"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m41) *)
  val get_m41: 'tags this -> float [@@js.get "m41"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m41) *)
  val set_m41: 'tags this -> float -> unit [@@js.set "m41"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m42) *)
  val get_m42: 'tags this -> float [@@js.get "m42"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m42) *)
  val set_m42: 'tags this -> float -> unit [@@js.set "m42"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m43) *)
  val get_m43: 'tags this -> float [@@js.get "m43"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m43) *)
  val set_m43: 'tags this -> float -> unit [@@js.set "m43"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m44) *)
  val get_m44: 'tags this -> float [@@js.get "m44"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m44) *)
  val set_m44: 'tags this -> float -> unit [@@js.set "m44"]
  val invertSelf: 'tags this -> t [@@js.call "invertSelf"]
  val multiplySelf: 'tags this -> ?other:DOMMatrixInit.t -> unit -> t [@@js.call "multiplySelf"]
  val preMultiplySelf: 'tags this -> ?other:DOMMatrixInit.t -> unit -> t [@@js.call "preMultiplySelf"]
  val rotateAxisAngleSelf: 'tags this -> ?x:float -> ?y:float -> ?z:float -> ?angle:float -> unit -> t [@@js.call "rotateAxisAngleSelf"]
  val rotateFromVectorSelf: 'tags this -> ?x:float -> ?y:float -> unit -> t [@@js.call "rotateFromVectorSelf"]
  val rotateSelf: 'tags this -> ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t [@@js.call "rotateSelf"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrix/scale3dSelf) *)
  val scale3dSelf: 'tags this -> ?scale:float -> ?originX:float -> ?originY:float -> ?originZ:float -> unit -> t [@@js.call "scale3dSelf"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrix/scaleSelf) *)
  val scaleSelf: 'tags this -> ?scaleX:float -> ?scaleY:float -> ?scaleZ:float -> ?originX:float -> ?originY:float -> ?originZ:float -> unit -> t [@@js.call "scaleSelf"]
  val skewXSelf: 'tags this -> ?sx:float -> unit -> t [@@js.call "skewXSelf"]
  val skewYSelf: 'tags this -> ?sy:float -> unit -> t [@@js.call "skewYSelf"]
  val translateSelf: 'tags this -> ?tx:float -> ?ty:float -> ?tz:float -> unit -> t [@@js.call "translateSelf"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?init:([`U1 of string | `U2 of float list] [@js.union]) -> unit -> t [@@js.create]
  val fromFloat32Array: Float32Array.t -> t [@@js.global "fromFloat32Array"]
  val fromFloat64Array: Float64Array.t -> t [@@js.global "fromFloat64Array"]
  val fromMatrix: ?other:DOMMatrixInit.t -> unit -> t [@@js.global "fromMatrix"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly) *)
and[@js.scope "DOMMatrixReadOnly"] DOMMatrixReadOnly : sig
  type t = [`DOMMatrixReadOnly] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMMatrixReadOnly]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMMatrixReadOnly]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixReadOnly ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/a) *)
  val get_a: 'tags this -> float [@@js.get "a"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/b) *)
  val get_b: 'tags this -> float [@@js.get "b"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/c) *)
  val get_c: 'tags this -> float [@@js.get "c"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/d) *)
  val get_d: 'tags this -> float [@@js.get "d"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/e) *)
  val get_e: 'tags this -> float [@@js.get "e"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/f) *)
  val get_f: 'tags this -> float [@@js.get "f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/is2D) *)
  val get_is2D: 'tags this -> bool [@@js.get "is2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/isIdentity) *)
  val get_isIdentity: 'tags this -> bool [@@js.get "isIdentity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m11) *)
  val get_m11: 'tags this -> float [@@js.get "m11"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m12) *)
  val get_m12: 'tags this -> float [@@js.get "m12"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m13) *)
  val get_m13: 'tags this -> float [@@js.get "m13"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m14) *)
  val get_m14: 'tags this -> float [@@js.get "m14"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m21) *)
  val get_m21: 'tags this -> float [@@js.get "m21"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m22) *)
  val get_m22: 'tags this -> float [@@js.get "m22"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m23) *)
  val get_m23: 'tags this -> float [@@js.get "m23"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m24) *)
  val get_m24: 'tags this -> float [@@js.get "m24"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m31) *)
  val get_m31: 'tags this -> float [@@js.get "m31"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m32) *)
  val get_m32: 'tags this -> float [@@js.get "m32"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m33) *)
  val get_m33: 'tags this -> float [@@js.get "m33"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m34) *)
  val get_m34: 'tags this -> float [@@js.get "m34"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m41) *)
  val get_m41: 'tags this -> float [@@js.get "m41"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m42) *)
  val get_m42: 'tags this -> float [@@js.get "m42"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m43) *)
  val get_m43: 'tags this -> float [@@js.get "m43"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m44) *)
  val get_m44: 'tags this -> float [@@js.get "m44"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/flipX) *)
  val flipX: 'tags this -> DOMMatrix.t [@@js.call "flipX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/flipY) *)
  val flipY: 'tags this -> DOMMatrix.t [@@js.call "flipY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/inverse) *)
  val inverse: 'tags this -> DOMMatrix.t [@@js.call "inverse"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/multiply) *)
  val multiply: 'tags this -> ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t [@@js.call "multiply"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/rotate) *)
  val rotate: 'tags this -> ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> DOMMatrix.t [@@js.call "rotate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/rotateAxisAngle) *)
  val rotateAxisAngle: 'tags this -> ?x:float -> ?y:float -> ?z:float -> ?angle:float -> unit -> DOMMatrix.t [@@js.call "rotateAxisAngle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/rotateFromVector) *)
  val rotateFromVector: 'tags this -> ?x:float -> ?y:float -> unit -> DOMMatrix.t [@@js.call "rotateFromVector"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/scale) *)
  val scale: 'tags this -> ?scaleX:float -> ?scaleY:float -> ?scaleZ:float -> ?originX:float -> ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t [@@js.call "scale"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/scale3d) *)
  val scale3d: 'tags this -> ?scale:float -> ?originX:float -> ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t [@@js.call "scale3d"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/scaleNonUniform) *)
  val scaleNonUniform: 'tags this -> ?scaleX:float -> ?scaleY:float -> unit -> DOMMatrix.t [@@js.call "scaleNonUniform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/skewX) *)
  val skewX: 'tags this -> ?sx:float -> unit -> DOMMatrix.t [@@js.call "skewX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/skewY) *)
  val skewY: 'tags this -> ?sy:float -> unit -> DOMMatrix.t [@@js.call "skewY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/toFloat32Array) *)
  val toFloat32Array: 'tags this -> Float32Array.t [@@js.call "toFloat32Array"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/toFloat64Array) *)
  val toFloat64Array: 'tags this -> Float64Array.t [@@js.call "toFloat64Array"]
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/transformPoint) *)
  val transformPoint: 'tags this -> ?point:DOMPointInit.t -> unit -> DOMPoint.t [@@js.call "transformPoint"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/translate) *)
  val translate: 'tags this -> ?tx:float -> ?ty:float -> ?tz:float -> unit -> DOMMatrix.t [@@js.call "translate"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?init:([`U1 of string | `U2 of float list] [@js.union]) -> unit -> t [@@js.create]
  val fromFloat32Array: Float32Array.t -> t [@@js.global "fromFloat32Array"]
  val fromFloat64Array: Float64Array.t -> t [@@js.global "fromFloat64Array"]
  val fromMatrix: ?other:DOMMatrixInit.t -> unit -> t [@@js.global "fromMatrix"]
end
module CanvasTransform : sig
  type t = [`CanvasTransform] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasTransform]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasTransform]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasTransform ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getTransform) *)
  val getTransform: 'tags this -> DOMMatrix.t [@@js.call "getTransform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/resetTransform) *)
  val resetTransform: 'tags this -> unit [@@js.call "resetTransform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/rotate) *)
  val rotate: 'tags this -> angle:float -> unit [@@js.call "rotate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/scale) *)
  val scale: 'tags this -> x:float -> y:float -> unit [@@js.call "scale"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setTransform) *)
  val setTransform: 'tags this -> a:float -> b:float -> c:float -> d:float -> e:float -> f:float -> unit [@@js.call "setTransform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setTransform) *)
  val setTransform': 'tags this -> ?transform:DOMMatrix2DInit.t -> unit -> unit [@@js.call "setTransform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/transform) *)
  val transform: 'tags this -> a:float -> b:float -> c:float -> d:float -> e:float -> f:float -> unit [@@js.call "transform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/translate) *)
  val translate: 'tags this -> x:float -> y:float -> unit [@@js.call "translate"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CanvasTextBaseline : sig
  type t = ([`L_s147_hanging[@js "hanging"] | `L_s156_ideographic[@js "ideographic"] | `L_s195_middle[@js "middle"] | `L_s315_top[@js "top"] | `L_s52_alphabetic[@js "alphabetic"] | `L_s69_bottom[@js "bottom"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasTextAlign : sig
  type t = ([`L_s118_end[@js "end"] | `L_s172_left[@js "left"] | `L_s272_right[@js "right"] | `L_s301_start[@js "start"] | `L_s75_center[@js "center"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasFontKerning : sig
  type t = ([`L_s212_none[@js "none"] | `L_s214_normal[@js "normal"] | `L_s60_auto[@js "auto"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasDirection : sig
  type t = ([`L_s162_inherit[@js "inherit"] | `L_s185_ltr[@js "ltr"] | `L_s274_rtl[@js "rtl"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasTextDrawingStyles : sig
  type t = [`CanvasTextDrawingStyles] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasTextDrawingStyles]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasTextDrawingStyles]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasTextDrawingStyles ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/direction) *)
  val get_direction: 'tags this -> CanvasDirection.t [@@js.get "direction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/direction) *)
  val set_direction: 'tags this -> CanvasDirection.t -> unit [@@js.set "direction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/font) *)
  val get_font: 'tags this -> string [@@js.get "font"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/font) *)
  val set_font: 'tags this -> string -> unit [@@js.set "font"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontKerning) *)
  val get_fontKerning: 'tags this -> CanvasFontKerning.t [@@js.get "fontKerning"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontKerning) *)
  val set_fontKerning: 'tags this -> CanvasFontKerning.t -> unit [@@js.set "fontKerning"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign) *)
  val get_textAlign: 'tags this -> CanvasTextAlign.t [@@js.get "textAlign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign) *)
  val set_textAlign: 'tags this -> CanvasTextAlign.t -> unit [@@js.set "textAlign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textBaseline) *)
  val get_textBaseline: 'tags this -> CanvasTextBaseline.t [@@js.get "textBaseline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textBaseline) *)
  val set_textBaseline: 'tags this -> CanvasTextBaseline.t -> unit [@@js.set "textBaseline"]
  val create: direction:CanvasDirection.t -> font:string -> fontKerning:CanvasFontKerning.t -> textAlign:CanvasTextAlign.t -> textBaseline:CanvasTextBaseline.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The dimensions of a piece of text in the canvas, as created by the CanvasRenderingContext2D.measureText() method.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics)
*)
module[@js.scope "TextMetrics"] TextMetrics : sig
  type t = [`TextMetrics] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextMetrics]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextMetrics]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextMetrics ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxAscent)
  *)
  val get_actualBoundingBoxAscent: 'tags this -> float [@@js.get "actualBoundingBoxAscent"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxDescent)
  *)
  val get_actualBoundingBoxDescent: 'tags this -> float [@@js.get "actualBoundingBoxDescent"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxLeft)
  *)
  val get_actualBoundingBoxLeft: 'tags this -> float [@@js.get "actualBoundingBoxLeft"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxRight)
  *)
  val get_actualBoundingBoxRight: 'tags this -> float [@@js.get "actualBoundingBoxRight"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/fontBoundingBoxAscent)
  *)
  val get_fontBoundingBoxAscent: 'tags this -> float [@@js.get "fontBoundingBoxAscent"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/fontBoundingBoxDescent)
  *)
  val get_fontBoundingBoxDescent: 'tags this -> float [@@js.get "fontBoundingBoxDescent"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/width)
  *)
  val get_width: 'tags this -> float [@@js.get "width"]
  val create: actualBoundingBoxAscent:float -> actualBoundingBoxDescent:float -> actualBoundingBoxLeft:float -> actualBoundingBoxRight:float -> fontBoundingBoxAscent:float -> fontBoundingBoxDescent:float -> width:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module CanvasText : sig
  type t = [`CanvasText] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasText]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasText]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasText ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillText) *)
  val fillText: 'tags this -> text:string -> x:float -> y:float -> ?maxWidth:float -> unit -> unit [@@js.call "fillText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/measureText) *)
  val measureText: 'tags this -> text:string -> TextMetrics.t [@@js.call "measureText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeText) *)
  val strokeText: 'tags this -> text:string -> x:float -> y:float -> ?maxWidth:float -> unit -> unit [@@js.call "strokeText"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CanvasState : sig
  type t = [`CanvasState] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasState]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasState]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasState ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/restore) *)
  val restore: 'tags this -> unit [@@js.call "restore"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/save) *)
  val save: 'tags this -> unit [@@js.call "save"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CanvasShadowStyles : sig
  type t = [`CanvasShadowStyles] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasShadowStyles]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasShadowStyles]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasShadowStyles ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowBlur) *)
  val get_shadowBlur: 'tags this -> float [@@js.get "shadowBlur"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowBlur) *)
  val set_shadowBlur: 'tags this -> float -> unit [@@js.set "shadowBlur"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowColor) *)
  val get_shadowColor: 'tags this -> string [@@js.get "shadowColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowColor) *)
  val set_shadowColor: 'tags this -> string -> unit [@@js.set "shadowColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX) *)
  val get_shadowOffsetX: 'tags this -> float [@@js.get "shadowOffsetX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX) *)
  val set_shadowOffsetX: 'tags this -> float -> unit [@@js.set "shadowOffsetX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY) *)
  val get_shadowOffsetY: 'tags this -> float [@@js.get "shadowOffsetY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY) *)
  val set_shadowOffsetY: 'tags this -> float -> unit [@@js.set "shadowOffsetY"]
  val create: shadowBlur:float -> shadowColor:string -> shadowOffsetX:float -> shadowOffsetY:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CanvasRect : sig
  type t = [`CanvasRect] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasRect]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasRect]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasRect ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clearRect) *)
  val clearRect: 'tags this -> x:float -> y:float -> w:float -> h:float -> unit [@@js.call "clearRect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillRect) *)
  val fillRect: 'tags this -> x:float -> y:float -> w:float -> h:float -> unit [@@js.call "fillRect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeRect) *)
  val strokeRect: 'tags this -> x:float -> y:float -> w:float -> h:float -> unit [@@js.call "strokeRect"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CanvasLineJoin : sig
  type t = ([`L_s197_miter[@js "miter"] | `L_s273_round[@js "round"] | `L_s64_bevel[@js "bevel"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasLineCap : sig
  type t = ([`L_s273_round[@js "round"] | `L_s299_square[@js "square"] | `L_s72_butt[@js "butt"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasPathDrawingStyles : sig
  type t = [`CanvasPathDrawingStyles] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasPathDrawingStyles]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasPathDrawingStyles]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasPathDrawingStyles ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash) *)
  val setLineDash: 'tags this -> segments:float Iterable.t -> unit [@@js.call "setLineDash"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineCap) *)
  val get_lineCap: 'tags this -> CanvasLineCap.t [@@js.get "lineCap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineCap) *)
  val set_lineCap: 'tags this -> CanvasLineCap.t -> unit [@@js.set "lineCap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) *)
  val get_lineDashOffset: 'tags this -> float [@@js.get "lineDashOffset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) *)
  val set_lineDashOffset: 'tags this -> float -> unit [@@js.set "lineDashOffset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineJoin) *)
  val get_lineJoin: 'tags this -> CanvasLineJoin.t [@@js.get "lineJoin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineJoin) *)
  val set_lineJoin: 'tags this -> CanvasLineJoin.t -> unit [@@js.set "lineJoin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineWidth) *)
  val get_lineWidth: 'tags this -> float [@@js.get "lineWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineWidth) *)
  val set_lineWidth: 'tags this -> float -> unit [@@js.set "lineWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/miterLimit) *)
  val get_miterLimit: 'tags this -> float [@@js.get "miterLimit"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/miterLimit) *)
  val set_miterLimit: 'tags this -> float -> unit [@@js.set "miterLimit"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getLineDash) *)
  val getLineDash: 'tags this -> float list [@@js.call "getLineDash"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash) *)
  val setLineDash': 'tags this -> segments:float list -> unit [@@js.call "setLineDash"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ImageSmoothingQuality : sig
  type t = ([`L_s150_high[@js "high"] | `L_s183_low[@js "low"] | `L_s191_medium[@js "medium"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasImageSmoothing : sig
  type t = [`CanvasImageSmoothing] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasImageSmoothing]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasImageSmoothing]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasImageSmoothing ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled) *)
  val get_imageSmoothingEnabled: 'tags this -> bool [@@js.get "imageSmoothingEnabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled) *)
  val set_imageSmoothingEnabled: 'tags this -> bool -> unit [@@js.set "imageSmoothingEnabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality) *)
  val get_imageSmoothingQuality: 'tags this -> ImageSmoothingQuality.t [@@js.get "imageSmoothingQuality"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality) *)
  val set_imageSmoothingQuality: 'tags this -> ImageSmoothingQuality.t -> unit [@@js.set "imageSmoothingQuality"]
  val create: imageSmoothingEnabled:bool -> imageSmoothingQuality:ImageSmoothingQuality.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ImageDataSettings : sig
  type t = [`ImageDataSettings] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ImageDataSettings]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ImageDataSettings]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ImageDataSettings ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_colorSpace: 'tags this -> PredefinedColorSpace.t option [@@js.get "colorSpace"]
  val set_colorSpace: 'tags this -> PredefinedColorSpace.t -> unit [@@js.set "colorSpace"]
  val create: ?colorSpace:PredefinedColorSpace.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData().
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageData)
*)
module[@js.scope "ImageData"] ImageData : sig
  type t = [`ImageData] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ImageData]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ImageData]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ImageData ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageData/colorSpace) *)
  val get_colorSpace: 'tags this -> PredefinedColorSpace.t [@@js.get "colorSpace"]
  
  (**
    Returns the one-dimensional array containing the data in RGBA order, as integers in the range 0 to 255.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageData/data)
  *)
  val get_data: 'tags this -> Uint8ClampedArray.t [@@js.get "data"]
  
  (**
    Returns the actual dimensions of the data in the ImageData object, in pixels.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageData/height)
  *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (**
    Returns the actual dimensions of the data in the ImageData object, in pixels.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageData/width)
  *)
  val get_width: 'tags this -> float [@@js.get "width"]
  val create: colorSpace:PredefinedColorSpace.t -> data:Uint8ClampedArray.t -> height:float -> width:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': sw:float -> sh:float -> ?settings:ImageDataSettings.t -> unit -> t [@@js.create]
  val create'': data:Uint8ClampedArray.t -> sw:float -> ?sh:float -> ?settings:ImageDataSettings.t -> unit -> t [@@js.create]
end
module CanvasImageData : sig
  type t = [`CanvasImageData] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasImageData]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasImageData]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasImageData ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createImageData) *)
  val createImageData: 'tags this -> sw:float -> sh:float -> ?settings:ImageDataSettings.t -> unit -> ImageData.t [@@js.call "createImageData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createImageData) *)
  val createImageData': 'tags this -> imagedata:ImageData.t -> ImageData.t [@@js.call "createImageData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getImageData) *)
  val getImageData: 'tags this -> sx:float -> sy:float -> sw:float -> sh:float -> ?settings:ImageDataSettings.t -> unit -> ImageData.t [@@js.call "getImageData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/putImageData) *)
  val putImageData: 'tags this -> imagedata:ImageData.t -> dx:float -> dy:float -> unit [@@js.call "putImageData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/putImageData) *)
  val putImageData': 'tags this -> imagedata:ImageData.t -> dx:float -> dy:float -> dirtyX:float -> dirtyY:float -> dirtyWidth:float -> dirtyHeight:float -> unit [@@js.call "putImageData"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CanvasFilters : sig
  type t = [`CanvasFilters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasFilters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasFilters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasFilters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/filter) *)
  val get_filter: 'tags this -> string [@@js.get "filter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/filter) *)
  val set_filter: 'tags this -> string -> unit [@@js.set "filter"]
  val create: filter:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  An opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasPattern)
*)
module[@js.scope "CanvasPattern"] CanvasPattern : sig
  type t = [`CanvasPattern] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasPattern]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasPattern]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasPattern ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets the transformation matrix that will be used when rendering the pattern during a fill or stroke painting operation.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasPattern/setTransform)
  *)
  val setTransform: 'tags this -> ?transform:DOMMatrix2DInit.t -> unit -> unit [@@js.call "setTransform"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  An opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient().
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasGradient)
*)
module[@js.scope "CanvasGradient"] CanvasGradient : sig
  type t = [`CanvasGradient] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasGradient]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasGradient]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasGradient ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Adds a color stop with the given color to the gradient at the given offset. 0.0 is the offset at one end of the gradient, 1.0 is the offset at the other end.
    
    Throws an "IndexSizeError" DOMException if the offset is out of range. Throws a "SyntaxError" DOMException if the color cannot be parsed.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasGradient/addColorStop)
  *)
  val addColorStop: 'tags this -> offset:float -> color:string -> unit [@@js.call "addColorStop"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module CanvasPath : sig
  type t = [`CanvasPath] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasPath]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasPath]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasPath ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/roundRect) *)
  val roundRect: 'tags this -> x:float -> y:float -> w:float -> h:float -> ?radii:([`U1 of float | `U2 of DOMPointInit.t | `U3 of ([`U1 of float | `U2 of DOMPointInit.t] [@js.union]) Iterable.t] [@js.union]) -> unit -> unit [@@js.call "roundRect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/arc) *)
  val arc: 'tags this -> x:float -> y:float -> radius:float -> startAngle:float -> endAngle:float -> ?counterclockwise:bool -> unit -> unit [@@js.call "arc"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/arcTo) *)
  val arcTo: 'tags this -> x1:float -> y1:float -> x2:float -> y2:float -> radius:float -> unit [@@js.call "arcTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo) *)
  val bezierCurveTo: 'tags this -> cp1x:float -> cp1y:float -> cp2x:float -> cp2y:float -> x:float -> y:float -> unit [@@js.call "bezierCurveTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/closePath) *)
  val closePath: 'tags this -> unit [@@js.call "closePath"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/ellipse) *)
  val ellipse: 'tags this -> x:float -> y:float -> radiusX:float -> radiusY:float -> rotation:float -> startAngle:float -> endAngle:float -> ?counterclockwise:bool -> unit -> unit [@@js.call "ellipse"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineTo) *)
  val lineTo: 'tags this -> x:float -> y:float -> unit [@@js.call "lineTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/moveTo) *)
  val moveTo: 'tags this -> x:float -> y:float -> unit [@@js.call "moveTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo) *)
  val quadraticCurveTo: 'tags this -> cpx:float -> cpy:float -> x:float -> y:float -> unit [@@js.call "quadraticCurveTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/rect) *)
  val rect: 'tags this -> x:float -> y:float -> w:float -> h:float -> unit [@@js.call "rect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/roundRect) *)
  val roundRect': 'tags this -> x:float -> y:float -> w:float -> h:float -> ?radii:([`U1 of float | `U2 of DOMPointInit.t | `U3 of ([`U1 of float | `U2 of DOMPointInit.t] [@js.union]) list] [@js.union]) -> unit -> unit [@@js.call "roundRect"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Canvas 2D API interface is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Path2D)
*)
module[@js.scope "Path2D"] Path2D : sig
  type t = [`CanvasPath | `Path2D] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasPath | `Path2D]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasPath | `Path2D]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Path2D ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Adds to the path the path given by the argument.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Path2D/addPath)
  *)
  val addPath: 'tags this -> path:t -> ?transform:DOMMatrix2DInit.t -> unit -> unit [@@js.call "addPath"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?path:([`U1 of t | `U2 of string] [@js.union]) -> unit -> t [@@js.create]
end
module CanvasFillRule : sig
  type t = ([`L_s121_evenodd[@js "evenodd"] | `L_s213_nonzero[@js "nonzero"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasDrawPath : sig
  type t = [`CanvasDrawPath] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasDrawPath]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasDrawPath]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasDrawPath ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/beginPath) *)
  val beginPath: 'tags this -> unit [@@js.call "beginPath"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clip) *)
  val clip: 'tags this -> ?fillRule:CanvasFillRule.t -> unit -> unit [@@js.call "clip"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clip) *)
  val clip': 'tags this -> path:Path2D.t -> ?fillRule:CanvasFillRule.t -> unit -> unit [@@js.call "clip"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fill) *)
  val fill: 'tags this -> ?fillRule:CanvasFillRule.t -> unit -> unit [@@js.call "fill"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fill) *)
  val fill': 'tags this -> path:Path2D.t -> ?fillRule:CanvasFillRule.t -> unit -> unit [@@js.call "fill"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInPath) *)
  val isPointInPath: 'tags this -> x:float -> y:float -> ?fillRule:CanvasFillRule.t -> unit -> bool [@@js.call "isPointInPath"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInPath) *)
  val isPointInPath': 'tags this -> path:Path2D.t -> x:float -> y:float -> ?fillRule:CanvasFillRule.t -> unit -> bool [@@js.call "isPointInPath"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInStroke) *)
  val isPointInStroke: 'tags this -> x:float -> y:float -> bool [@@js.call "isPointInStroke"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInStroke) *)
  val isPointInStroke': 'tags this -> path:Path2D.t -> x:float -> y:float -> bool [@@js.call "isPointInStroke"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/stroke) *)
  val stroke: 'tags this -> unit [@@js.call "stroke"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/stroke) *)
  val stroke': 'tags this -> path:Path2D.t -> unit [@@js.call "stroke"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DOMRectInit : sig
  type t = [`DOMRectInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMRectInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMRectInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMRectInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_height: 'tags this -> float option [@@js.get "height"]
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  val get_width: 'tags this -> float option [@@js.get "width"]
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  val get_x: 'tags this -> float option [@@js.get "x"]
  val set_x: 'tags this -> float -> unit [@@js.set "x"]
  val get_y: 'tags this -> float option [@@js.get "y"]
  val set_y: 'tags this -> float -> unit [@@js.set "y"]
  val create: ?height:float -> ?width:float -> ?x:float -> ?y:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AlphaOption : sig
  type t = ([`L_s111_discard[@js "discard"] | `L_s169_keep[@js "keep"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module VideoFrameInit : sig
  type t = [`VideoFrameInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoFrameInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoFrameInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoFrameInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_alpha: 'tags this -> AlphaOption.t option [@@js.get "alpha"]
  val set_alpha: 'tags this -> AlphaOption.t -> unit [@@js.set "alpha"]
  val get_displayHeight: 'tags this -> float option [@@js.get "displayHeight"]
  val set_displayHeight: 'tags this -> float -> unit [@@js.set "displayHeight"]
  val get_displayWidth: 'tags this -> float option [@@js.get "displayWidth"]
  val set_displayWidth: 'tags this -> float -> unit [@@js.set "displayWidth"]
  val get_duration: 'tags this -> float option [@@js.get "duration"]
  val set_duration: 'tags this -> float -> unit [@@js.set "duration"]
  val get_timestamp: 'tags this -> float option [@@js.get "timestamp"]
  val set_timestamp: 'tags this -> float -> unit [@@js.set "timestamp"]
  val get_visibleRect: 'tags this -> DOMRectInit.t option [@@js.get "visibleRect"]
  val set_visibleRect: 'tags this -> DOMRectInit.t -> unit [@@js.set "visibleRect"]
  val create: ?alpha:AlphaOption.t -> ?displayHeight:float -> ?displayWidth:float -> ?duration:float -> ?timestamp:float -> ?visibleRect:DOMRectInit.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PlaneLayout : sig
  type t = [`PlaneLayout] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PlaneLayout]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PlaneLayout]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PlaneLayout ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_offset: 'tags this -> float [@@js.get "offset"]
  val set_offset: 'tags this -> float -> unit [@@js.set "offset"]
  val get_stride: 'tags this -> float [@@js.get "stride"]
  val set_stride: 'tags this -> float -> unit [@@js.set "stride"]
  val create: offset:float -> stride:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoFrameCopyToOptions : sig
  type t = [`VideoFrameCopyToOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoFrameCopyToOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoFrameCopyToOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoFrameCopyToOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_layout: 'tags this -> PlaneLayout.t list option [@@js.get "layout"]
  val set_layout: 'tags this -> PlaneLayout.t list -> unit [@@js.set "layout"]
  val get_rect: 'tags this -> DOMRectInit.t option [@@js.get "rect"]
  val set_rect: 'tags this -> DOMRectInit.t -> unit [@@js.set "rect"]
  val create: ?layout:PlaneLayout.t list -> ?rect:DOMRectInit.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoPixelFormat : sig
  type t = ([`L_s15_I420[@js "I420"] | `L_s16_I420A[@js "I420A"] | `L_s17_I422[@js "I422"] | `L_s18_I444[@js "I444"] | `L_s20_NV12[@js "NV12"] | `L_s30_RGBA[@js "RGBA"] | `L_s31_RGBX[@js "RGBX"] | `L_s3_BGRA[@js "BGRA"] | `L_s4_BGRX[@js "BGRX"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module VideoTransferCharacteristics : sig
  type t = ([`L_s157_iec61966_2_1[@js "iec61966-2-1"] | `L_s289_smpte170m[@js "smpte170m"] | `L_s71_bt709[@js "bt709"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module VideoMatrixCoefficients : sig
  type t = ([`L_s271_rgb[@js "rgb"] | `L_s289_smpte170m[@js "smpte170m"] | `L_s70_bt470bg[@js "bt470bg"] | `L_s71_bt709[@js "bt709"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module VideoColorPrimaries : sig
  type t = ([`L_s289_smpte170m[@js "smpte170m"] | `L_s70_bt470bg[@js "bt470bg"] | `L_s71_bt709[@js "bt709"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module VideoColorSpaceInit : sig
  type t = [`VideoColorSpaceInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoColorSpaceInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoColorSpaceInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoColorSpaceInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_fullRange: 'tags this -> bool option [@@js.get "fullRange"]
  val set_fullRange: 'tags this -> bool option -> unit [@@js.set "fullRange"]
  val get_matrix: 'tags this -> VideoMatrixCoefficients.t option [@@js.get "matrix"]
  val set_matrix: 'tags this -> VideoMatrixCoefficients.t option -> unit [@@js.set "matrix"]
  val get_primaries: 'tags this -> VideoColorPrimaries.t option [@@js.get "primaries"]
  val set_primaries: 'tags this -> VideoColorPrimaries.t option -> unit [@@js.set "primaries"]
  val get_transfer: 'tags this -> VideoTransferCharacteristics.t option [@@js.get "transfer"]
  val set_transfer: 'tags this -> VideoTransferCharacteristics.t option -> unit [@@js.set "transfer"]
  val create: ?fullRange:bool -> ?matrix:VideoMatrixCoefficients.t -> ?primaries:VideoColorPrimaries.t -> ?transfer:VideoTransferCharacteristics.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoFrameBufferInit : sig
  type t = [`VideoFrameBufferInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoFrameBufferInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoFrameBufferInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoFrameBufferInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_codedHeight: 'tags this -> float [@@js.get "codedHeight"]
  val set_codedHeight: 'tags this -> float -> unit [@@js.set "codedHeight"]
  val get_codedWidth: 'tags this -> float [@@js.get "codedWidth"]
  val set_codedWidth: 'tags this -> float -> unit [@@js.set "codedWidth"]
  val get_colorSpace: 'tags this -> VideoColorSpaceInit.t option [@@js.get "colorSpace"]
  val set_colorSpace: 'tags this -> VideoColorSpaceInit.t -> unit [@@js.set "colorSpace"]
  val get_displayHeight: 'tags this -> float option [@@js.get "displayHeight"]
  val set_displayHeight: 'tags this -> float -> unit [@@js.set "displayHeight"]
  val get_displayWidth: 'tags this -> float option [@@js.get "displayWidth"]
  val set_displayWidth: 'tags this -> float -> unit [@@js.set "displayWidth"]
  val get_duration: 'tags this -> float option [@@js.get "duration"]
  val set_duration: 'tags this -> float -> unit [@@js.set "duration"]
  val get_format: 'tags this -> VideoPixelFormat.t [@@js.get "format"]
  val set_format: 'tags this -> VideoPixelFormat.t -> unit [@@js.set "format"]
  val get_layout: 'tags this -> PlaneLayout.t list option [@@js.get "layout"]
  val set_layout: 'tags this -> PlaneLayout.t list -> unit [@@js.set "layout"]
  val get_timestamp: 'tags this -> float [@@js.get "timestamp"]
  val set_timestamp: 'tags this -> float -> unit [@@js.set "timestamp"]
  val get_visibleRect: 'tags this -> DOMRectInit.t option [@@js.get "visibleRect"]
  val set_visibleRect: 'tags this -> DOMRectInit.t -> unit [@@js.set "visibleRect"]
  val create: codedHeight:float -> codedWidth:float -> ?colorSpace:VideoColorSpaceInit.t -> ?displayHeight:float -> ?displayWidth:float -> ?duration:float -> format:VideoPixelFormat.t -> ?layout:PlaneLayout.t list -> timestamp:float -> ?visibleRect:DOMRectInit.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoColorSpace) *)
module[@js.scope "VideoColorSpace"] VideoColorSpace : sig
  type t = [`VideoColorSpace] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoColorSpace]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoColorSpace]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoColorSpace ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/fullRange) *)
  val get_fullRange: 'tags this -> bool option [@@js.get "fullRange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/matrix) *)
  val get_matrix: 'tags this -> VideoMatrixCoefficients.t option [@@js.get "matrix"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/primaries) *)
  val get_primaries: 'tags this -> VideoColorPrimaries.t option [@@js.get "primaries"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/transfer) *)
  val get_transfer: 'tags this -> VideoTransferCharacteristics.t option [@@js.get "transfer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/toJSON) *)
  val toJSON: 'tags this -> VideoColorSpaceInit.t [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?init:VideoColorSpaceInit.t -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly) *)
module[@js.scope "DOMRectReadOnly"] DOMRectReadOnly : sig
  type t = [`DOMRectReadOnly] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMRectReadOnly]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMRectReadOnly]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMRectReadOnly ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/bottom) *)
  val get_bottom: 'tags this -> float [@@js.get "bottom"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/height) *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/left) *)
  val get_left: 'tags this -> float [@@js.get "left"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/right) *)
  val get_right: 'tags this -> float [@@js.get "right"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/top) *)
  val get_top: 'tags this -> float [@@js.get "top"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/width) *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/x) *)
  val get_x: 'tags this -> float [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/y) *)
  val get_y: 'tags this -> float [@@js.get "y"]
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/fromRect) *)
  val fromRect: ?other:DOMRectInit.t -> unit -> t [@@js.global "fromRect"]
end
module GlobalCompositeOperation : sig
  type t = ([`L_s105_destination_atop[@js "destination-atop"] | `L_s106_destination_in[@js "destination-in"] | `L_s107_destination_out[@js "destination-out"] | `L_s108_destination_over[@js "destination-over"] | `L_s109_difference[@js "difference"] | `L_s122_exclusion[@js "exclusion"] | `L_s148_hard_light[@js "hard-light"] | `L_s153_hue[@js "hue"] | `L_s174_lighten[@js "lighten"] | `L_s175_lighter[@js "lighter"] | `L_s186_luminosity[@js "luminosity"] | `L_s199_multiply[@js "multiply"] | `L_s231_overlay[@js "overlay"] | `L_s276_saturation[@js "saturation"] | `L_s277_screen[@js "screen"] | `L_s293_soft_light[@js "soft-light"] | `L_s294_source_atop[@js "source-atop"] | `L_s295_source_in[@js "source-in"] | `L_s296_source_out[@js "source-out"] | `L_s297_source_over[@js "source-over"] | `L_s344_xor[@js "xor"] | `L_s82_color[@js "color"] | `L_s83_color_burn[@js "color-burn"] | `L_s84_color_dodge[@js "color-dodge"] | `L_s93_copy[@js "copy"] | `L_s95_darken[@js "darken"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasCompositing : sig
  type t = [`CanvasCompositing] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasCompositing]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasCompositing]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasCompositing ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalAlpha) *)
  val get_globalAlpha: 'tags this -> float [@@js.get "globalAlpha"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalAlpha) *)
  val set_globalAlpha: 'tags this -> float -> unit [@@js.set "globalAlpha"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation) *)
  val get_globalCompositeOperation: 'tags this -> GlobalCompositeOperation.t [@@js.get "globalCompositeOperation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation) *)
  val set_globalCompositeOperation: 'tags this -> GlobalCompositeOperation.t -> unit [@@js.set "globalCompositeOperation"]
  val create: globalAlpha:float -> globalCompositeOperation:GlobalCompositeOperation.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ImageEncodeOptions : sig
  type t = [`ImageEncodeOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ImageEncodeOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ImageEncodeOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ImageEncodeOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_quality: 'tags this -> float option [@@js.get "quality"]
  val set_quality: 'tags this -> float -> unit [@@js.set "quality"]
  val get_type: 'tags this -> string option [@@js.get "type"]
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  val create: ?quality:float -> ?type_:(string[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageBitmap) *)
module[@js.scope "ImageBitmap"] ImageBitmap : sig
  type t = [`ImageBitmap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ImageBitmap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ImageBitmap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the intrinsic height of the image, in CSS pixels.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageBitmap/height)
  *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (**
    Returns the intrinsic width of the image, in CSS pixels.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageBitmap/width)
  *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (**
    Releases imageBitmap's underlying bitmap data.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageBitmap/close)
  *)
  val close: 'tags this -> unit [@@js.call "close"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext) *)
module[@js.scope "ImageBitmapRenderingContext"] ImageBitmapRenderingContext : sig
  type t = [`ImageBitmapRenderingContext] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ImageBitmapRenderingContext]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ImageBitmapRenderingContext]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmapRenderingContext ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Transfers the underlying bitmap data from imageBitmap to context, and the bitmap becomes the contents of the canvas element to which context is bound.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext/transferFromImageBitmap)
  *)
  val transferFromImageBitmap: 'tags this -> bitmap:ImageBitmap.t option -> unit [@@js.call "transferFromImageBitmap"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module rec CanvasDrawImage : sig
  type t = [`CanvasDrawImage] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasDrawImage]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasDrawImage]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasDrawImage ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage) *)
  val drawImage: 'tags this -> image:CanvasImageSource.t -> dx:float -> dy:float -> unit [@@js.call "drawImage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage) *)
  val drawImage': 'tags this -> image:CanvasImageSource.t -> dx:float -> dy:float -> dw:float -> dh:float -> unit [@@js.call "drawImage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage) *)
  val drawImage'': 'tags this -> image:CanvasImageSource.t -> sx:float -> sy:float -> sw:float -> sh:float -> dx:float -> dy:float -> dw:float -> dh:float -> unit [@@js.call "drawImage"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and CanvasFillStrokeStyles : sig
  type t = [`CanvasFillStrokeStyles] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasFillStrokeStyles]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasFillStrokeStyles]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasFillStrokeStyles ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle) *)
  val get_fillStyle: 'tags this -> ([`String of string | `Other of (CanvasGradient.t, CanvasPattern.t) union2] [@js.union on_field "dummy"]) Primitive.t [@@js.get "fillStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle) *)
  val set_fillStyle: 'tags this -> ([`U1 of string | `U2 of CanvasGradient.t | `U3 of CanvasPattern.t] [@js.union]) -> unit [@@js.set "fillStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeStyle) *)
  val get_strokeStyle: 'tags this -> ([`String of string | `Other of (CanvasGradient.t, CanvasPattern.t) union2] [@js.union on_field "dummy"]) Primitive.t [@@js.get "strokeStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeStyle) *)
  val set_strokeStyle: 'tags this -> ([`U1 of string | `U2 of CanvasGradient.t | `U3 of CanvasPattern.t] [@js.union]) -> unit [@@js.set "strokeStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createConicGradient) *)
  val createConicGradient: 'tags this -> startAngle:float -> x:float -> y:float -> CanvasGradient.t [@@js.call "createConicGradient"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createLinearGradient) *)
  val createLinearGradient: 'tags this -> x0:float -> y0:float -> x1:float -> y1:float -> CanvasGradient.t [@@js.call "createLinearGradient"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createPattern) *)
  val createPattern: 'tags this -> image:CanvasImageSource.t -> repetition:string option -> CanvasPattern.t option [@@js.call "createPattern"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createRadialGradient) *)
  val createRadialGradient: 'tags this -> x0:float -> y0:float -> r0:float -> x1:float -> y1:float -> r1:float -> CanvasGradient.t [@@js.call "createRadialGradient"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and CanvasImageSource : sig
  type t = (ImageBitmap.t, OffscreenCanvas.t, VideoFrame.t) union3
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas) *)
and[@js.scope "OffscreenCanvas"] OffscreenCanvas : sig
  type t = [`EventTarget | `OffscreenCanvas] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `OffscreenCanvas]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `OffscreenCanvas]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OffscreenCanvas ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    These attributes return the dimensions of the OffscreenCanvas object's bitmap.
    
    They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/height)
  *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (**
    These attributes return the dimensions of the OffscreenCanvas object's bitmap.
    
    They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/height)
  *)
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  val get_oncontextlost: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "oncontextlost"]
  val set_oncontextlost: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "oncontextlost"]
  val get_oncontextrestored: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "oncontextrestored"]
  val set_oncontextrestored: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "oncontextrestored"]
  
  (**
    These attributes return the dimensions of the OffscreenCanvas object's bitmap.
    
    They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/width)
  *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (**
    These attributes return the dimensions of the OffscreenCanvas object's bitmap.
    
    They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/width)
  *)
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  
  (**
    Returns a promise that will fulfill with a new Blob object representing a file containing the image in the OffscreenCanvas object.
    
    The argument, if provided, is a dictionary that controls the encoding options of the image file to be created. The type field specifies the file format and has a default value of "image/png"; that type is also used if the requested type isn't supported. If the image format supports variable quality (such as "image/jpeg"), then the quality field is a number in the range 0.0 to 1.0 inclusive indicating the desired quality level for the resulting image.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/convertToBlob)
  *)
  val convertToBlob: 'tags this -> ?options:ImageEncodeOptions.t -> unit -> Blob.t Promise.t [@@js.call "convertToBlob"]
  
  (**
    Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
    
    This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. \[WEBGL\]
    
    Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
  *)
  val getContext: 'tags this -> contextId:([`L_s1_2d[@js "2d"]] [@js.enum]) -> ?options:any -> unit -> OffscreenCanvasRenderingContext2D.t option [@@js.call "getContext"]
  
  (**
    Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
    
    This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. \[WEBGL\]
    
    Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
  *)
  val getContext': 'tags this -> contextId:([`L_s65_bitmaprenderer[@js "bitmaprenderer"]] [@js.enum]) -> ?options:any -> unit -> ImageBitmapRenderingContext.t option [@@js.call "getContext"]
  
  (**
    Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
    
    This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. \[WEBGL\]
    
    Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
  *)
  val getContext'': 'tags this -> contextId:([`L_s336_webgl[@js "webgl"]] [@js.enum]) -> ?options:any -> unit -> WebGLRenderingContext.t option [@@js.call "getContext"]
  
  (**
    Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
    
    This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. \[WEBGL\]
    
    Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
  *)
  val getContext''': 'tags this -> contextId:([`L_s337_webgl2[@js "webgl2"]] [@js.enum]) -> ?options:any -> unit -> WebGL2RenderingContext.t option [@@js.call "getContext"]
  
  (**
    Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
    
    This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. \[WEBGL\]
    
    Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
  *)
  val getContext'''': 'tags this -> contextId:OffscreenRenderingContextId.t -> ?options:any -> unit -> OffscreenRenderingContext.t option [@@js.call "getContext"]
  
  (**
    Returns a newly created ImageBitmap object with the image in the OffscreenCanvas object. The image in the OffscreenCanvas object is replaced with a new blank image.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/transferToImageBitmap)
  *)
  val transferToImageBitmap: 'tags this -> ImageBitmap.t [@@js.call "transferToImageBitmap"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'OffscreenCanvasEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'OffscreenCanvasEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: width:float -> height:float -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvasRenderingContext2D) *)
and[@js.scope "OffscreenCanvasRenderingContext2D"] OffscreenCanvasRenderingContext2D : sig
  type t = [`CanvasCompositing | `CanvasDrawImage | `CanvasDrawPath | `CanvasFillStrokeStyles | `CanvasFilters | `CanvasImageData | `CanvasImageSmoothing | `CanvasPath | `CanvasPathDrawingStyles | `CanvasRect | `CanvasShadowStyles | `CanvasState | `CanvasText | `CanvasTextDrawingStyles | `CanvasTransform | `OffscreenCanvasRenderingContext2D] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasCompositing | `CanvasDrawImage | `CanvasDrawPath | `CanvasFillStrokeStyles | `CanvasFilters | `CanvasImageData | `CanvasImageSmoothing | `CanvasPath | `CanvasPathDrawingStyles | `CanvasRect | `CanvasShadowStyles | `CanvasState | `CanvasText | `CanvasTextDrawingStyles | `CanvasTransform | `OffscreenCanvasRenderingContext2D]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasCompositing | `CanvasDrawImage | `CanvasDrawPath | `CanvasFillStrokeStyles | `CanvasFilters | `CanvasImageData | `CanvasImageSmoothing | `CanvasPath | `CanvasPathDrawingStyles | `CanvasRect | `CanvasShadowStyles | `CanvasState | `CanvasText | `CanvasTextDrawingStyles | `CanvasTransform | `OffscreenCanvasRenderingContext2D]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OffscreenCanvasRenderingContext2D ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_canvas: 'tags this -> OffscreenCanvas.t [@@js.get "canvas"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvasRenderingContext2D/commit) *)
  val commit: 'tags this -> unit [@@js.call "commit"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and OffscreenRenderingContext : sig
  type t = (ImageBitmapRenderingContext.t, OffscreenCanvasRenderingContext2D.t, WebGL2RenderingContext.t, WebGLRenderingContext.t) union4
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
and TexImageSource : sig
  type t = (ImageBitmap.t, ImageData.t, OffscreenCanvas.t, VideoFrame.t) union4
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame) *)
and[@js.scope "VideoFrame"] VideoFrame : sig
  type t = [`VideoFrame] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoFrame]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoFrame]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoFrame ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedHeight) *)
  val get_codedHeight: 'tags this -> float [@@js.get "codedHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedRect) *)
  val get_codedRect: 'tags this -> DOMRectReadOnly.t option [@@js.get "codedRect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedWidth) *)
  val get_codedWidth: 'tags this -> float [@@js.get "codedWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/colorSpace) *)
  val get_colorSpace: 'tags this -> VideoColorSpace.t [@@js.get "colorSpace"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/displayHeight) *)
  val get_displayHeight: 'tags this -> float [@@js.get "displayHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/displayWidth) *)
  val get_displayWidth: 'tags this -> float [@@js.get "displayWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/duration) *)
  val get_duration: 'tags this -> float option [@@js.get "duration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/format) *)
  val get_format: 'tags this -> VideoPixelFormat.t option [@@js.get "format"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/timestamp) *)
  val get_timestamp: 'tags this -> float [@@js.get "timestamp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/visibleRect) *)
  val get_visibleRect: 'tags this -> DOMRectReadOnly.t option [@@js.get "visibleRect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/allocationSize) *)
  val allocationSize: 'tags this -> ?options:VideoFrameCopyToOptions.t -> unit -> float [@@js.call "allocationSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/clone) *)
  val clone: 'tags this -> t [@@js.call "clone"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/close) *)
  val close: 'tags this -> unit [@@js.call "close"]
  val copyTo: 'tags this -> destination:BufferSource.t -> ?options:VideoFrameCopyToOptions.t -> unit -> PlaneLayout.t list Promise.t [@@js.call "copyTo"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: image:CanvasImageSource.t -> ?init:VideoFrameInit.t -> unit -> t [@@js.create]
  val create': data:BufferSource.t -> init:VideoFrameBufferInit.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext) *)
and[@js.scope "WebGL2RenderingContext"] WebGL2RenderingContext : sig
  type t = [`WebGL2RenderingContext | `WebGL2RenderingContextBase | `WebGL2RenderingContextOverloads | `WebGLRenderingContextBase] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGL2RenderingContext | `WebGL2RenderingContextBase | `WebGL2RenderingContextOverloads | `WebGLRenderingContextBase]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGL2RenderingContext | `WebGL2RenderingContextBase | `WebGL2RenderingContextOverloads | `WebGLRenderingContextBase]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGL2RenderingContext ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val read_buffer: unit -> ([`L_n_3074[@js 3074]] [@js.enum]) [@@js.get "READ_BUFFER"]
  val unpack_row_length: unit -> ([`L_n_3314[@js 3314]] [@js.enum]) [@@js.get "UNPACK_ROW_LENGTH"]
  val unpack_skip_rows: unit -> ([`L_n_3315[@js 3315]] [@js.enum]) [@@js.get "UNPACK_SKIP_ROWS"]
  val unpack_skip_pixels: unit -> ([`L_n_3316[@js 3316]] [@js.enum]) [@@js.get "UNPACK_SKIP_PIXELS"]
  val pack_row_length: unit -> ([`L_n_3330[@js 3330]] [@js.enum]) [@@js.get "PACK_ROW_LENGTH"]
  val pack_skip_rows: unit -> ([`L_n_3331[@js 3331]] [@js.enum]) [@@js.get "PACK_SKIP_ROWS"]
  val pack_skip_pixels: unit -> ([`L_n_3332[@js 3332]] [@js.enum]) [@@js.get "PACK_SKIP_PIXELS"]
  val color: unit -> ([`L_n_6144[@js 6144]] [@js.enum]) [@@js.get "COLOR"]
  val depth: unit -> ([`L_n_6145[@js 6145]] [@js.enum]) [@@js.get "DEPTH"]
  val stencil: unit -> ([`L_n_6146[@js 6146]] [@js.enum]) [@@js.get "STENCIL"]
  val red: unit -> ([`L_n_6403[@js 6403]] [@js.enum]) [@@js.get "RED"]
  val rgb8: unit -> ([`L_n_32849[@js 32849]] [@js.enum]) [@@js.get "RGB8"]
  val rgba8: unit -> ([`L_n_32856[@js 32856]] [@js.enum]) [@@js.get "RGBA8"]
  val rgb10_a2: unit -> ([`L_n_32857[@js 32857]] [@js.enum]) [@@js.get "RGB10_A2"]
  val texture_binding_3d: unit -> ([`L_n_32874[@js 32874]] [@js.enum]) [@@js.get "TEXTURE_BINDING_3D"]
  val unpack_skip_images: unit -> ([`L_n_32877[@js 32877]] [@js.enum]) [@@js.get "UNPACK_SKIP_IMAGES"]
  val unpack_image_height: unit -> ([`L_n_32878[@js 32878]] [@js.enum]) [@@js.get "UNPACK_IMAGE_HEIGHT"]
  val texture_3d: unit -> ([`L_n_32879[@js 32879]] [@js.enum]) [@@js.get "TEXTURE_3D"]
  val texture_wrap_r: unit -> ([`L_n_32882[@js 32882]] [@js.enum]) [@@js.get "TEXTURE_WRAP_R"]
  val max_3d_texture_size: unit -> ([`L_n_32883[@js 32883]] [@js.enum]) [@@js.get "MAX_3D_TEXTURE_SIZE"]
  val unsigned_int_2_10_10_10_rev: unit -> ([`L_n_33640[@js 33640]] [@js.enum]) [@@js.get "UNSIGNED_INT_2_10_10_10_REV"]
  val max_elements_vertices: unit -> ([`L_n_33000[@js 33000]] [@js.enum]) [@@js.get "MAX_ELEMENTS_VERTICES"]
  val max_elements_indices: unit -> ([`L_n_33001[@js 33001]] [@js.enum]) [@@js.get "MAX_ELEMENTS_INDICES"]
  val texture_min_lod: unit -> ([`L_n_33082[@js 33082]] [@js.enum]) [@@js.get "TEXTURE_MIN_LOD"]
  val texture_max_lod: unit -> ([`L_n_33083[@js 33083]] [@js.enum]) [@@js.get "TEXTURE_MAX_LOD"]
  val texture_base_level: unit -> ([`L_n_33084[@js 33084]] [@js.enum]) [@@js.get "TEXTURE_BASE_LEVEL"]
  val texture_max_level: unit -> ([`L_n_33085[@js 33085]] [@js.enum]) [@@js.get "TEXTURE_MAX_LEVEL"]
  val min: unit -> ([`L_n_32775[@js 32775]] [@js.enum]) [@@js.get "MIN"]
  val max: unit -> ([`L_n_32776[@js 32776]] [@js.enum]) [@@js.get "MAX"]
  val depth_component24: unit -> ([`L_n_33190[@js 33190]] [@js.enum]) [@@js.get "DEPTH_COMPONENT24"]
  val max_texture_lod_bias: unit -> ([`L_n_34045[@js 34045]] [@js.enum]) [@@js.get "MAX_TEXTURE_LOD_BIAS"]
  val texture_compare_mode: unit -> ([`L_n_34892[@js 34892]] [@js.enum]) [@@js.get "TEXTURE_COMPARE_MODE"]
  val texture_compare_func: unit -> ([`L_n_34893[@js 34893]] [@js.enum]) [@@js.get "TEXTURE_COMPARE_FUNC"]
  val current_query: unit -> ([`L_n_34917[@js 34917]] [@js.enum]) [@@js.get "CURRENT_QUERY"]
  val query_result: unit -> ([`L_n_34918[@js 34918]] [@js.enum]) [@@js.get "QUERY_RESULT"]
  val query_result_available: unit -> ([`L_n_34919[@js 34919]] [@js.enum]) [@@js.get "QUERY_RESULT_AVAILABLE"]
  val stream_read: unit -> ([`L_n_35041[@js 35041]] [@js.enum]) [@@js.get "STREAM_READ"]
  val stream_copy: unit -> ([`L_n_35042[@js 35042]] [@js.enum]) [@@js.get "STREAM_COPY"]
  val static_read: unit -> ([`L_n_35045[@js 35045]] [@js.enum]) [@@js.get "STATIC_READ"]
  val static_copy: unit -> ([`L_n_35046[@js 35046]] [@js.enum]) [@@js.get "STATIC_COPY"]
  val dynamic_read: unit -> ([`L_n_35049[@js 35049]] [@js.enum]) [@@js.get "DYNAMIC_READ"]
  val dynamic_copy: unit -> ([`L_n_35050[@js 35050]] [@js.enum]) [@@js.get "DYNAMIC_COPY"]
  val max_draw_buffers: unit -> ([`L_n_34852[@js 34852]] [@js.enum]) [@@js.get "MAX_DRAW_BUFFERS"]
  val draw_buffer0: unit -> ([`L_n_34853[@js 34853]] [@js.enum]) [@@js.get "DRAW_BUFFER0"]
  val draw_buffer1: unit -> ([`L_n_34854[@js 34854]] [@js.enum]) [@@js.get "DRAW_BUFFER1"]
  val draw_buffer2: unit -> ([`L_n_34855[@js 34855]] [@js.enum]) [@@js.get "DRAW_BUFFER2"]
  val draw_buffer3: unit -> ([`L_n_34856[@js 34856]] [@js.enum]) [@@js.get "DRAW_BUFFER3"]
  val draw_buffer4: unit -> ([`L_n_34857[@js 34857]] [@js.enum]) [@@js.get "DRAW_BUFFER4"]
  val draw_buffer5: unit -> ([`L_n_34858[@js 34858]] [@js.enum]) [@@js.get "DRAW_BUFFER5"]
  val draw_buffer6: unit -> ([`L_n_34859[@js 34859]] [@js.enum]) [@@js.get "DRAW_BUFFER6"]
  val draw_buffer7: unit -> ([`L_n_34860[@js 34860]] [@js.enum]) [@@js.get "DRAW_BUFFER7"]
  val draw_buffer8: unit -> ([`L_n_34861[@js 34861]] [@js.enum]) [@@js.get "DRAW_BUFFER8"]
  val draw_buffer9: unit -> ([`L_n_34862[@js 34862]] [@js.enum]) [@@js.get "DRAW_BUFFER9"]
  val draw_buffer10: unit -> ([`L_n_34863[@js 34863]] [@js.enum]) [@@js.get "DRAW_BUFFER10"]
  val draw_buffer11: unit -> ([`L_n_34864[@js 34864]] [@js.enum]) [@@js.get "DRAW_BUFFER11"]
  val draw_buffer12: unit -> ([`L_n_34865[@js 34865]] [@js.enum]) [@@js.get "DRAW_BUFFER12"]
  val draw_buffer13: unit -> ([`L_n_34866[@js 34866]] [@js.enum]) [@@js.get "DRAW_BUFFER13"]
  val draw_buffer14: unit -> ([`L_n_34867[@js 34867]] [@js.enum]) [@@js.get "DRAW_BUFFER14"]
  val draw_buffer15: unit -> ([`L_n_34868[@js 34868]] [@js.enum]) [@@js.get "DRAW_BUFFER15"]
  val max_fragment_uniform_components: unit -> ([`L_n_35657[@js 35657]] [@js.enum]) [@@js.get "MAX_FRAGMENT_UNIFORM_COMPONENTS"]
  val max_vertex_uniform_components: unit -> ([`L_n_35658[@js 35658]] [@js.enum]) [@@js.get "MAX_VERTEX_UNIFORM_COMPONENTS"]
  val sampler_3d: unit -> ([`L_n_35679[@js 35679]] [@js.enum]) [@@js.get "SAMPLER_3D"]
  val sampler_2d_shadow: unit -> ([`L_n_35682[@js 35682]] [@js.enum]) [@@js.get "SAMPLER_2D_SHADOW"]
  val fragment_shader_derivative_hint: unit -> ([`L_n_35723[@js 35723]] [@js.enum]) [@@js.get "FRAGMENT_SHADER_DERIVATIVE_HINT"]
  val pixel_pack_buffer: unit -> ([`L_n_35051[@js 35051]] [@js.enum]) [@@js.get "PIXEL_PACK_BUFFER"]
  val pixel_unpack_buffer: unit -> ([`L_n_35052[@js 35052]] [@js.enum]) [@@js.get "PIXEL_UNPACK_BUFFER"]
  val pixel_pack_buffer_binding: unit -> ([`L_n_35053[@js 35053]] [@js.enum]) [@@js.get "PIXEL_PACK_BUFFER_BINDING"]
  val pixel_unpack_buffer_binding: unit -> ([`L_n_35055[@js 35055]] [@js.enum]) [@@js.get "PIXEL_UNPACK_BUFFER_BINDING"]
  val fLOAT_MAT2x3: unit -> ([`L_n_35685[@js 35685]] [@js.enum]) [@@js.get "FLOAT_MAT2x3"]
  val fLOAT_MAT2x4: unit -> ([`L_n_35686[@js 35686]] [@js.enum]) [@@js.get "FLOAT_MAT2x4"]
  val fLOAT_MAT3x2: unit -> ([`L_n_35687[@js 35687]] [@js.enum]) [@@js.get "FLOAT_MAT3x2"]
  val fLOAT_MAT3x4: unit -> ([`L_n_35688[@js 35688]] [@js.enum]) [@@js.get "FLOAT_MAT3x4"]
  val fLOAT_MAT4x2: unit -> ([`L_n_35689[@js 35689]] [@js.enum]) [@@js.get "FLOAT_MAT4x2"]
  val fLOAT_MAT4x3: unit -> ([`L_n_35690[@js 35690]] [@js.enum]) [@@js.get "FLOAT_MAT4x3"]
  val srgb: unit -> ([`L_n_35904[@js 35904]] [@js.enum]) [@@js.get "SRGB"]
  val srgb8: unit -> ([`L_n_35905[@js 35905]] [@js.enum]) [@@js.get "SRGB8"]
  val srgb8_alpha8: unit -> ([`L_n_35907[@js 35907]] [@js.enum]) [@@js.get "SRGB8_ALPHA8"]
  val compare_ref_to_texture: unit -> ([`L_n_34894[@js 34894]] [@js.enum]) [@@js.get "COMPARE_REF_TO_TEXTURE"]
  val rgba32f: unit -> ([`L_n_34836[@js 34836]] [@js.enum]) [@@js.get "RGBA32F"]
  val rgb32f: unit -> ([`L_n_34837[@js 34837]] [@js.enum]) [@@js.get "RGB32F"]
  val rgba16f: unit -> ([`L_n_34842[@js 34842]] [@js.enum]) [@@js.get "RGBA16F"]
  val rgb16f: unit -> ([`L_n_34843[@js 34843]] [@js.enum]) [@@js.get "RGB16F"]
  val vertex_attrib_array_integer: unit -> ([`L_n_35069[@js 35069]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_INTEGER"]
  val max_array_texture_layers: unit -> ([`L_n_35071[@js 35071]] [@js.enum]) [@@js.get "MAX_ARRAY_TEXTURE_LAYERS"]
  val min_program_texel_offset: unit -> ([`L_n_35076[@js 35076]] [@js.enum]) [@@js.get "MIN_PROGRAM_TEXEL_OFFSET"]
  val max_program_texel_offset: unit -> ([`L_n_35077[@js 35077]] [@js.enum]) [@@js.get "MAX_PROGRAM_TEXEL_OFFSET"]
  val max_varying_components: unit -> ([`L_n_35659[@js 35659]] [@js.enum]) [@@js.get "MAX_VARYING_COMPONENTS"]
  val texture_2d_array: unit -> ([`L_n_35866[@js 35866]] [@js.enum]) [@@js.get "TEXTURE_2D_ARRAY"]
  val texture_binding_2d_array: unit -> ([`L_n_35869[@js 35869]] [@js.enum]) [@@js.get "TEXTURE_BINDING_2D_ARRAY"]
  val r11f_g11f_b10f: unit -> ([`L_n_35898[@js 35898]] [@js.enum]) [@@js.get "R11F_G11F_B10F"]
  val unsigned_int_10f_11f_11f_rev: unit -> ([`L_n_35899[@js 35899]] [@js.enum]) [@@js.get "UNSIGNED_INT_10F_11F_11F_REV"]
  val rgb9_e5: unit -> ([`L_n_35901[@js 35901]] [@js.enum]) [@@js.get "RGB9_E5"]
  val unsigned_int_5_9_9_9_rev: unit -> ([`L_n_35902[@js 35902]] [@js.enum]) [@@js.get "UNSIGNED_INT_5_9_9_9_REV"]
  val transform_feedback_buffer_mode: unit -> ([`L_n_35967[@js 35967]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER_MODE"]
  val max_transform_feedback_separate_components: unit -> ([`L_n_35968[@js 35968]] [@js.enum]) [@@js.get "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS"]
  val transform_feedback_varyings: unit -> ([`L_n_35971[@js 35971]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_VARYINGS"]
  val transform_feedback_buffer_start: unit -> ([`L_n_35972[@js 35972]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER_START"]
  val transform_feedback_buffer_size: unit -> ([`L_n_35973[@js 35973]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER_SIZE"]
  val transform_feedback_primitives_written: unit -> ([`L_n_35976[@js 35976]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN"]
  val rasterizer_discard: unit -> ([`L_n_35977[@js 35977]] [@js.enum]) [@@js.get "RASTERIZER_DISCARD"]
  val max_transform_feedback_interleaved_components: unit -> ([`L_n_35978[@js 35978]] [@js.enum]) [@@js.get "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS"]
  val max_transform_feedback_separate_attribs: unit -> ([`L_n_35979[@js 35979]] [@js.enum]) [@@js.get "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS"]
  val interleaved_attribs: unit -> ([`L_n_35980[@js 35980]] [@js.enum]) [@@js.get "INTERLEAVED_ATTRIBS"]
  val separate_attribs: unit -> ([`L_n_35981[@js 35981]] [@js.enum]) [@@js.get "SEPARATE_ATTRIBS"]
  val transform_feedback_buffer: unit -> ([`L_n_35982[@js 35982]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER"]
  val transform_feedback_buffer_binding: unit -> ([`L_n_35983[@js 35983]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER_BINDING"]
  val rgba32ui: unit -> ([`L_n_36208[@js 36208]] [@js.enum]) [@@js.get "RGBA32UI"]
  val rgb32ui: unit -> ([`L_n_36209[@js 36209]] [@js.enum]) [@@js.get "RGB32UI"]
  val rgba16ui: unit -> ([`L_n_36214[@js 36214]] [@js.enum]) [@@js.get "RGBA16UI"]
  val rgb16ui: unit -> ([`L_n_36215[@js 36215]] [@js.enum]) [@@js.get "RGB16UI"]
  val rgba8ui: unit -> ([`L_n_36220[@js 36220]] [@js.enum]) [@@js.get "RGBA8UI"]
  val rgb8ui: unit -> ([`L_n_36221[@js 36221]] [@js.enum]) [@@js.get "RGB8UI"]
  val rgba32i: unit -> ([`L_n_36226[@js 36226]] [@js.enum]) [@@js.get "RGBA32I"]
  val rgb32i: unit -> ([`L_n_36227[@js 36227]] [@js.enum]) [@@js.get "RGB32I"]
  val rgba16i: unit -> ([`L_n_36232[@js 36232]] [@js.enum]) [@@js.get "RGBA16I"]
  val rgb16i: unit -> ([`L_n_36233[@js 36233]] [@js.enum]) [@@js.get "RGB16I"]
  val rgba8i: unit -> ([`L_n_36238[@js 36238]] [@js.enum]) [@@js.get "RGBA8I"]
  val rgb8i: unit -> ([`L_n_36239[@js 36239]] [@js.enum]) [@@js.get "RGB8I"]
  val red_integer: unit -> ([`L_n_36244[@js 36244]] [@js.enum]) [@@js.get "RED_INTEGER"]
  val rgb_integer: unit -> ([`L_n_36248[@js 36248]] [@js.enum]) [@@js.get "RGB_INTEGER"]
  val rgba_integer: unit -> ([`L_n_36249[@js 36249]] [@js.enum]) [@@js.get "RGBA_INTEGER"]
  val sampler_2d_array: unit -> ([`L_n_36289[@js 36289]] [@js.enum]) [@@js.get "SAMPLER_2D_ARRAY"]
  val sampler_2d_array_shadow: unit -> ([`L_n_36292[@js 36292]] [@js.enum]) [@@js.get "SAMPLER_2D_ARRAY_SHADOW"]
  val sampler_cube_shadow: unit -> ([`L_n_36293[@js 36293]] [@js.enum]) [@@js.get "SAMPLER_CUBE_SHADOW"]
  val unsigned_int_vec2: unit -> ([`L_n_36294[@js 36294]] [@js.enum]) [@@js.get "UNSIGNED_INT_VEC2"]
  val unsigned_int_vec3: unit -> ([`L_n_36295[@js 36295]] [@js.enum]) [@@js.get "UNSIGNED_INT_VEC3"]
  val unsigned_int_vec4: unit -> ([`L_n_36296[@js 36296]] [@js.enum]) [@@js.get "UNSIGNED_INT_VEC4"]
  val int_sampler_2d: unit -> ([`L_n_36298[@js 36298]] [@js.enum]) [@@js.get "INT_SAMPLER_2D"]
  val int_sampler_3d: unit -> ([`L_n_36299[@js 36299]] [@js.enum]) [@@js.get "INT_SAMPLER_3D"]
  val int_sampler_cube: unit -> ([`L_n_36300[@js 36300]] [@js.enum]) [@@js.get "INT_SAMPLER_CUBE"]
  val int_sampler_2d_array: unit -> ([`L_n_36303[@js 36303]] [@js.enum]) [@@js.get "INT_SAMPLER_2D_ARRAY"]
  val unsigned_int_sampler_2d: unit -> ([`L_n_36306[@js 36306]] [@js.enum]) [@@js.get "UNSIGNED_INT_SAMPLER_2D"]
  val unsigned_int_sampler_3d: unit -> ([`L_n_36307[@js 36307]] [@js.enum]) [@@js.get "UNSIGNED_INT_SAMPLER_3D"]
  val unsigned_int_sampler_cube: unit -> ([`L_n_36308[@js 36308]] [@js.enum]) [@@js.get "UNSIGNED_INT_SAMPLER_CUBE"]
  val unsigned_int_sampler_2d_array: unit -> ([`L_n_36311[@js 36311]] [@js.enum]) [@@js.get "UNSIGNED_INT_SAMPLER_2D_ARRAY"]
  val depth_component32f: unit -> ([`L_n_36012[@js 36012]] [@js.enum]) [@@js.get "DEPTH_COMPONENT32F"]
  val depth32f_stencil8: unit -> ([`L_n_36013[@js 36013]] [@js.enum]) [@@js.get "DEPTH32F_STENCIL8"]
  val float_32_unsigned_int_24_8_rev: unit -> ([`L_n_36269[@js 36269]] [@js.enum]) [@@js.get "FLOAT_32_UNSIGNED_INT_24_8_REV"]
  val framebuffer_attachment_color_encoding: unit -> ([`L_n_33296[@js 33296]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING"]
  val framebuffer_attachment_component_type: unit -> ([`L_n_33297[@js 33297]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE"]
  val framebuffer_attachment_red_size: unit -> ([`L_n_33298[@js 33298]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_RED_SIZE"]
  val framebuffer_attachment_green_size: unit -> ([`L_n_33299[@js 33299]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE"]
  val framebuffer_attachment_blue_size: unit -> ([`L_n_33300[@js 33300]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE"]
  val framebuffer_attachment_alpha_size: unit -> ([`L_n_33301[@js 33301]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE"]
  val framebuffer_attachment_depth_size: unit -> ([`L_n_33302[@js 33302]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE"]
  val framebuffer_attachment_stencil_size: unit -> ([`L_n_33303[@js 33303]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE"]
  val framebuffer_default: unit -> ([`L_n_33304[@js 33304]] [@js.enum]) [@@js.get "FRAMEBUFFER_DEFAULT"]
  val unsigned_int_24_8: unit -> ([`L_n_34042[@js 34042]] [@js.enum]) [@@js.get "UNSIGNED_INT_24_8"]
  val depth24_stencil8: unit -> ([`L_n_35056[@js 35056]] [@js.enum]) [@@js.get "DEPTH24_STENCIL8"]
  val unsigned_normalized: unit -> ([`L_n_35863[@js 35863]] [@js.enum]) [@@js.get "UNSIGNED_NORMALIZED"]
  val draw_framebuffer_binding: unit -> ([`L_n_36006[@js 36006]] [@js.enum]) [@@js.get "DRAW_FRAMEBUFFER_BINDING"]
  val read_framebuffer: unit -> ([`L_n_36008[@js 36008]] [@js.enum]) [@@js.get "READ_FRAMEBUFFER"]
  val draw_framebuffer: unit -> ([`L_n_36009[@js 36009]] [@js.enum]) [@@js.get "DRAW_FRAMEBUFFER"]
  val read_framebuffer_binding: unit -> ([`L_n_36010[@js 36010]] [@js.enum]) [@@js.get "READ_FRAMEBUFFER_BINDING"]
  val renderbuffer_samples: unit -> ([`L_n_36011[@js 36011]] [@js.enum]) [@@js.get "RENDERBUFFER_SAMPLES"]
  val framebuffer_attachment_texture_layer: unit -> ([`L_n_36052[@js 36052]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER"]
  val max_color_attachments: unit -> ([`L_n_36063[@js 36063]] [@js.enum]) [@@js.get "MAX_COLOR_ATTACHMENTS"]
  val color_attachment1: unit -> ([`L_n_36065[@js 36065]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT1"]
  val color_attachment2: unit -> ([`L_n_36066[@js 36066]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT2"]
  val color_attachment3: unit -> ([`L_n_36067[@js 36067]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT3"]
  val color_attachment4: unit -> ([`L_n_36068[@js 36068]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT4"]
  val color_attachment5: unit -> ([`L_n_36069[@js 36069]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT5"]
  val color_attachment6: unit -> ([`L_n_36070[@js 36070]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT6"]
  val color_attachment7: unit -> ([`L_n_36071[@js 36071]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT7"]
  val color_attachment8: unit -> ([`L_n_36072[@js 36072]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT8"]
  val color_attachment9: unit -> ([`L_n_36073[@js 36073]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT9"]
  val color_attachment10: unit -> ([`L_n_36074[@js 36074]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT10"]
  val color_attachment11: unit -> ([`L_n_36075[@js 36075]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT11"]
  val color_attachment12: unit -> ([`L_n_36076[@js 36076]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT12"]
  val color_attachment13: unit -> ([`L_n_36077[@js 36077]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT13"]
  val color_attachment14: unit -> ([`L_n_36078[@js 36078]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT14"]
  val color_attachment15: unit -> ([`L_n_36079[@js 36079]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT15"]
  val framebuffer_incomplete_multisample: unit -> ([`L_n_36182[@js 36182]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"]
  val max_samples: unit -> ([`L_n_36183[@js 36183]] [@js.enum]) [@@js.get "MAX_SAMPLES"]
  val half_float: unit -> ([`L_n_5131[@js 5131]] [@js.enum]) [@@js.get "HALF_FLOAT"]
  val rg: unit -> ([`L_n_33319[@js 33319]] [@js.enum]) [@@js.get "RG"]
  val rg_integer: unit -> ([`L_n_33320[@js 33320]] [@js.enum]) [@@js.get "RG_INTEGER"]
  val r8: unit -> ([`L_n_33321[@js 33321]] [@js.enum]) [@@js.get "R8"]
  val rg8: unit -> ([`L_n_33323[@js 33323]] [@js.enum]) [@@js.get "RG8"]
  val r16f: unit -> ([`L_n_33325[@js 33325]] [@js.enum]) [@@js.get "R16F"]
  val r32f: unit -> ([`L_n_33326[@js 33326]] [@js.enum]) [@@js.get "R32F"]
  val rg16f: unit -> ([`L_n_33327[@js 33327]] [@js.enum]) [@@js.get "RG16F"]
  val rg32f: unit -> ([`L_n_33328[@js 33328]] [@js.enum]) [@@js.get "RG32F"]
  val r8i: unit -> ([`L_n_33329[@js 33329]] [@js.enum]) [@@js.get "R8I"]
  val r8ui: unit -> ([`L_n_33330[@js 33330]] [@js.enum]) [@@js.get "R8UI"]
  val r16i: unit -> ([`L_n_33331[@js 33331]] [@js.enum]) [@@js.get "R16I"]
  val r16ui: unit -> ([`L_n_33332[@js 33332]] [@js.enum]) [@@js.get "R16UI"]
  val r32i: unit -> ([`L_n_33333[@js 33333]] [@js.enum]) [@@js.get "R32I"]
  val r32ui: unit -> ([`L_n_33334[@js 33334]] [@js.enum]) [@@js.get "R32UI"]
  val rg8i: unit -> ([`L_n_33335[@js 33335]] [@js.enum]) [@@js.get "RG8I"]
  val rg8ui: unit -> ([`L_n_33336[@js 33336]] [@js.enum]) [@@js.get "RG8UI"]
  val rg16i: unit -> ([`L_n_33337[@js 33337]] [@js.enum]) [@@js.get "RG16I"]
  val rg16ui: unit -> ([`L_n_33338[@js 33338]] [@js.enum]) [@@js.get "RG16UI"]
  val rg32i: unit -> ([`L_n_33339[@js 33339]] [@js.enum]) [@@js.get "RG32I"]
  val rg32ui: unit -> ([`L_n_33340[@js 33340]] [@js.enum]) [@@js.get "RG32UI"]
  val vertex_array_binding: unit -> ([`L_n_34229[@js 34229]] [@js.enum]) [@@js.get "VERTEX_ARRAY_BINDING"]
  val r8_snorm: unit -> ([`L_n_36756[@js 36756]] [@js.enum]) [@@js.get "R8_SNORM"]
  val rg8_snorm: unit -> ([`L_n_36757[@js 36757]] [@js.enum]) [@@js.get "RG8_SNORM"]
  val rgb8_snorm: unit -> ([`L_n_36758[@js 36758]] [@js.enum]) [@@js.get "RGB8_SNORM"]
  val rgba8_snorm: unit -> ([`L_n_36759[@js 36759]] [@js.enum]) [@@js.get "RGBA8_SNORM"]
  val signed_normalized: unit -> ([`L_n_36764[@js 36764]] [@js.enum]) [@@js.get "SIGNED_NORMALIZED"]
  val copy_read_buffer: unit -> ([`L_n_36662[@js 36662]] [@js.enum]) [@@js.get "COPY_READ_BUFFER"]
  val copy_write_buffer: unit -> ([`L_n_36663[@js 36663]] [@js.enum]) [@@js.get "COPY_WRITE_BUFFER"]
  val copy_read_buffer_binding: unit -> ([`L_n_36662[@js 36662]] [@js.enum]) [@@js.get "COPY_READ_BUFFER_BINDING"]
  val copy_write_buffer_binding: unit -> ([`L_n_36663[@js 36663]] [@js.enum]) [@@js.get "COPY_WRITE_BUFFER_BINDING"]
  val uniform_buffer: unit -> ([`L_n_35345[@js 35345]] [@js.enum]) [@@js.get "UNIFORM_BUFFER"]
  val uniform_buffer_binding: unit -> ([`L_n_35368[@js 35368]] [@js.enum]) [@@js.get "UNIFORM_BUFFER_BINDING"]
  val uniform_buffer_start: unit -> ([`L_n_35369[@js 35369]] [@js.enum]) [@@js.get "UNIFORM_BUFFER_START"]
  val uniform_buffer_size: unit -> ([`L_n_35370[@js 35370]] [@js.enum]) [@@js.get "UNIFORM_BUFFER_SIZE"]
  val max_vertex_uniform_blocks: unit -> ([`L_n_35371[@js 35371]] [@js.enum]) [@@js.get "MAX_VERTEX_UNIFORM_BLOCKS"]
  val max_fragment_uniform_blocks: unit -> ([`L_n_35373[@js 35373]] [@js.enum]) [@@js.get "MAX_FRAGMENT_UNIFORM_BLOCKS"]
  val max_combined_uniform_blocks: unit -> ([`L_n_35374[@js 35374]] [@js.enum]) [@@js.get "MAX_COMBINED_UNIFORM_BLOCKS"]
  val max_uniform_buffer_bindings: unit -> ([`L_n_35375[@js 35375]] [@js.enum]) [@@js.get "MAX_UNIFORM_BUFFER_BINDINGS"]
  val max_uniform_block_size: unit -> ([`L_n_35376[@js 35376]] [@js.enum]) [@@js.get "MAX_UNIFORM_BLOCK_SIZE"]
  val max_combined_vertex_uniform_components: unit -> ([`L_n_35377[@js 35377]] [@js.enum]) [@@js.get "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS"]
  val max_combined_fragment_uniform_components: unit -> ([`L_n_35379[@js 35379]] [@js.enum]) [@@js.get "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS"]
  val uniform_buffer_offset_alignment: unit -> ([`L_n_35380[@js 35380]] [@js.enum]) [@@js.get "UNIFORM_BUFFER_OFFSET_ALIGNMENT"]
  val active_uniform_blocks: unit -> ([`L_n_35382[@js 35382]] [@js.enum]) [@@js.get "ACTIVE_UNIFORM_BLOCKS"]
  val uniform_type: unit -> ([`L_n_35383[@js 35383]] [@js.enum]) [@@js.get "UNIFORM_TYPE"]
  val uniform_size: unit -> ([`L_n_35384[@js 35384]] [@js.enum]) [@@js.get "UNIFORM_SIZE"]
  val uniform_block_index: unit -> ([`L_n_35386[@js 35386]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_INDEX"]
  val uniform_offset: unit -> ([`L_n_35387[@js 35387]] [@js.enum]) [@@js.get "UNIFORM_OFFSET"]
  val uniform_array_stride: unit -> ([`L_n_35388[@js 35388]] [@js.enum]) [@@js.get "UNIFORM_ARRAY_STRIDE"]
  val uniform_matrix_stride: unit -> ([`L_n_35389[@js 35389]] [@js.enum]) [@@js.get "UNIFORM_MATRIX_STRIDE"]
  val uniform_is_row_major: unit -> ([`L_n_35390[@js 35390]] [@js.enum]) [@@js.get "UNIFORM_IS_ROW_MAJOR"]
  val uniform_block_binding: unit -> ([`L_n_35391[@js 35391]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_BINDING"]
  val uniform_block_data_size: unit -> ([`L_n_35392[@js 35392]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_DATA_SIZE"]
  val uniform_block_active_uniforms: unit -> ([`L_n_35394[@js 35394]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_ACTIVE_UNIFORMS"]
  val uniform_block_active_uniform_indices: unit -> ([`L_n_35395[@js 35395]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES"]
  val uniform_block_referenced_by_vertex_shader: unit -> ([`L_n_35396[@js 35396]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER"]
  val uniform_block_referenced_by_fragment_shader: unit -> ([`L_n_35398[@js 35398]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER"]
  val invalid_index: unit -> ([`L_n_minus1[@js -1]] [@js.enum]) [@@js.get "INVALID_INDEX"]
  val max_vertex_output_components: unit -> ([`L_n_37154[@js 37154]] [@js.enum]) [@@js.get "MAX_VERTEX_OUTPUT_COMPONENTS"]
  val max_fragment_input_components: unit -> ([`L_n_37157[@js 37157]] [@js.enum]) [@@js.get "MAX_FRAGMENT_INPUT_COMPONENTS"]
  val max_server_wait_timeout: unit -> ([`L_n_37137[@js 37137]] [@js.enum]) [@@js.get "MAX_SERVER_WAIT_TIMEOUT"]
  val object_type: unit -> ([`L_n_37138[@js 37138]] [@js.enum]) [@@js.get "OBJECT_TYPE"]
  val sync_condition: unit -> ([`L_n_37139[@js 37139]] [@js.enum]) [@@js.get "SYNC_CONDITION"]
  val sync_status: unit -> ([`L_n_37140[@js 37140]] [@js.enum]) [@@js.get "SYNC_STATUS"]
  val sync_flags: unit -> ([`L_n_37141[@js 37141]] [@js.enum]) [@@js.get "SYNC_FLAGS"]
  val sync_fence: unit -> ([`L_n_37142[@js 37142]] [@js.enum]) [@@js.get "SYNC_FENCE"]
  val sync_gpu_commands_complete: unit -> ([`L_n_37143[@js 37143]] [@js.enum]) [@@js.get "SYNC_GPU_COMMANDS_COMPLETE"]
  val unsignaled: unit -> ([`L_n_37144[@js 37144]] [@js.enum]) [@@js.get "UNSIGNALED"]
  val signaled: unit -> ([`L_n_37145[@js 37145]] [@js.enum]) [@@js.get "SIGNALED"]
  val already_signaled: unit -> ([`L_n_37146[@js 37146]] [@js.enum]) [@@js.get "ALREADY_SIGNALED"]
  val timeout_expired: unit -> ([`L_n_37147[@js 37147]] [@js.enum]) [@@js.get "TIMEOUT_EXPIRED"]
  val condition_satisfied: unit -> ([`L_n_37148[@js 37148]] [@js.enum]) [@@js.get "CONDITION_SATISFIED"]
  val wait_failed: unit -> ([`L_n_37149[@js 37149]] [@js.enum]) [@@js.get "WAIT_FAILED"]
  val sync_flush_commands_bit: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SYNC_FLUSH_COMMANDS_BIT"]
  val vertex_attrib_array_divisor: unit -> ([`L_n_35070[@js 35070]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_DIVISOR"]
  val any_samples_passed: unit -> ([`L_n_35887[@js 35887]] [@js.enum]) [@@js.get "ANY_SAMPLES_PASSED"]
  val any_samples_passed_conservative: unit -> ([`L_n_36202[@js 36202]] [@js.enum]) [@@js.get "ANY_SAMPLES_PASSED_CONSERVATIVE"]
  val sampler_binding: unit -> ([`L_n_35097[@js 35097]] [@js.enum]) [@@js.get "SAMPLER_BINDING"]
  val rgb10_a2ui: unit -> ([`L_n_36975[@js 36975]] [@js.enum]) [@@js.get "RGB10_A2UI"]
  val int_2_10_10_10_rev: unit -> ([`L_n_36255[@js 36255]] [@js.enum]) [@@js.get "INT_2_10_10_10_REV"]
  val transform_feedback: unit -> ([`L_n_36386[@js 36386]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK"]
  val transform_feedback_paused: unit -> ([`L_n_36387[@js 36387]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_PAUSED"]
  val transform_feedback_active: unit -> ([`L_n_36388[@js 36388]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_ACTIVE"]
  val transform_feedback_binding: unit -> ([`L_n_36389[@js 36389]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BINDING"]
  val texture_immutable_format: unit -> ([`L_n_37167[@js 37167]] [@js.enum]) [@@js.get "TEXTURE_IMMUTABLE_FORMAT"]
  val max_element_index: unit -> ([`L_n_36203[@js 36203]] [@js.enum]) [@@js.get "MAX_ELEMENT_INDEX"]
  val texture_immutable_levels: unit -> ([`L_n_33503[@js 33503]] [@js.enum]) [@@js.get "TEXTURE_IMMUTABLE_LEVELS"]
  val timeout_ignored: unit -> ([`L_n_minus1[@js -1]] [@js.enum]) [@@js.get "TIMEOUT_IGNORED"]
  val max_client_wait_timeout_webgl: unit -> ([`L_n_37447[@js 37447]] [@js.enum]) [@@js.get "MAX_CLIENT_WAIT_TIMEOUT_WEBGL"]
  val depth_buffer_bit: unit -> ([`L_n_256[@js 256]] [@js.enum]) [@@js.get "DEPTH_BUFFER_BIT"]
  val stencil_buffer_bit: unit -> ([`L_n_1024[@js 1024]] [@js.enum]) [@@js.get "STENCIL_BUFFER_BIT"]
  val color_buffer_bit: unit -> ([`L_n_16384[@js 16384]] [@js.enum]) [@@js.get "COLOR_BUFFER_BIT"]
  val points: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "POINTS"]
  val lines: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "LINES"]
  val line_loop: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "LINE_LOOP"]
  val line_strip: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "LINE_STRIP"]
  val triangles: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "TRIANGLES"]
  val triangle_strip: unit -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "TRIANGLE_STRIP"]
  val triangle_fan: unit -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "TRIANGLE_FAN"]
  val zero: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "ZERO"]
  val one: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "ONE"]
  val src_color: unit -> ([`L_n_768[@js 768]] [@js.enum]) [@@js.get "SRC_COLOR"]
  val one_minus_src_color: unit -> ([`L_n_769[@js 769]] [@js.enum]) [@@js.get "ONE_MINUS_SRC_COLOR"]
  val src_alpha: unit -> ([`L_n_770[@js 770]] [@js.enum]) [@@js.get "SRC_ALPHA"]
  val one_minus_src_alpha: unit -> ([`L_n_771[@js 771]] [@js.enum]) [@@js.get "ONE_MINUS_SRC_ALPHA"]
  val dst_alpha: unit -> ([`L_n_772[@js 772]] [@js.enum]) [@@js.get "DST_ALPHA"]
  val one_minus_dst_alpha: unit -> ([`L_n_773[@js 773]] [@js.enum]) [@@js.get "ONE_MINUS_DST_ALPHA"]
  val dst_color: unit -> ([`L_n_774[@js 774]] [@js.enum]) [@@js.get "DST_COLOR"]
  val one_minus_dst_color: unit -> ([`L_n_775[@js 775]] [@js.enum]) [@@js.get "ONE_MINUS_DST_COLOR"]
  val src_alpha_saturate: unit -> ([`L_n_776[@js 776]] [@js.enum]) [@@js.get "SRC_ALPHA_SATURATE"]
  val func_add: unit -> ([`L_n_32774[@js 32774]] [@js.enum]) [@@js.get "FUNC_ADD"]
  val blend_equation: unit -> ([`L_n_32777[@js 32777]] [@js.enum]) [@@js.get "BLEND_EQUATION"]
  val blend_equation_rgb: unit -> ([`L_n_32777[@js 32777]] [@js.enum]) [@@js.get "BLEND_EQUATION_RGB"]
  val blend_equation_alpha: unit -> ([`L_n_34877[@js 34877]] [@js.enum]) [@@js.get "BLEND_EQUATION_ALPHA"]
  val func_subtract: unit -> ([`L_n_32778[@js 32778]] [@js.enum]) [@@js.get "FUNC_SUBTRACT"]
  val func_reverse_subtract: unit -> ([`L_n_32779[@js 32779]] [@js.enum]) [@@js.get "FUNC_REVERSE_SUBTRACT"]
  val blend_dst_rgb: unit -> ([`L_n_32968[@js 32968]] [@js.enum]) [@@js.get "BLEND_DST_RGB"]
  val blend_src_rgb: unit -> ([`L_n_32969[@js 32969]] [@js.enum]) [@@js.get "BLEND_SRC_RGB"]
  val blend_dst_alpha: unit -> ([`L_n_32970[@js 32970]] [@js.enum]) [@@js.get "BLEND_DST_ALPHA"]
  val blend_src_alpha: unit -> ([`L_n_32971[@js 32971]] [@js.enum]) [@@js.get "BLEND_SRC_ALPHA"]
  val constant_color: unit -> ([`L_n_32769[@js 32769]] [@js.enum]) [@@js.get "CONSTANT_COLOR"]
  val one_minus_constant_color: unit -> ([`L_n_32770[@js 32770]] [@js.enum]) [@@js.get "ONE_MINUS_CONSTANT_COLOR"]
  val constant_alpha: unit -> ([`L_n_32771[@js 32771]] [@js.enum]) [@@js.get "CONSTANT_ALPHA"]
  val one_minus_constant_alpha: unit -> ([`L_n_32772[@js 32772]] [@js.enum]) [@@js.get "ONE_MINUS_CONSTANT_ALPHA"]
  val blend_color: unit -> ([`L_n_32773[@js 32773]] [@js.enum]) [@@js.get "BLEND_COLOR"]
  val array_buffer: unit -> ([`L_n_34962[@js 34962]] [@js.enum]) [@@js.get "ARRAY_BUFFER"]
  val element_array_buffer: unit -> ([`L_n_34963[@js 34963]] [@js.enum]) [@@js.get "ELEMENT_ARRAY_BUFFER"]
  val array_buffer_binding: unit -> ([`L_n_34964[@js 34964]] [@js.enum]) [@@js.get "ARRAY_BUFFER_BINDING"]
  val element_array_buffer_binding: unit -> ([`L_n_34965[@js 34965]] [@js.enum]) [@@js.get "ELEMENT_ARRAY_BUFFER_BINDING"]
  val stream_draw: unit -> ([`L_n_35040[@js 35040]] [@js.enum]) [@@js.get "STREAM_DRAW"]
  val static_draw: unit -> ([`L_n_35044[@js 35044]] [@js.enum]) [@@js.get "STATIC_DRAW"]
  val dynamic_draw: unit -> ([`L_n_35048[@js 35048]] [@js.enum]) [@@js.get "DYNAMIC_DRAW"]
  val buffer_size: unit -> ([`L_n_34660[@js 34660]] [@js.enum]) [@@js.get "BUFFER_SIZE"]
  val buffer_usage: unit -> ([`L_n_34661[@js 34661]] [@js.enum]) [@@js.get "BUFFER_USAGE"]
  val current_vertex_attrib: unit -> ([`L_n_34342[@js 34342]] [@js.enum]) [@@js.get "CURRENT_VERTEX_ATTRIB"]
  val front: unit -> ([`L_n_1028[@js 1028]] [@js.enum]) [@@js.get "FRONT"]
  val back: unit -> ([`L_n_1029[@js 1029]] [@js.enum]) [@@js.get "BACK"]
  val front_and_back: unit -> ([`L_n_1032[@js 1032]] [@js.enum]) [@@js.get "FRONT_AND_BACK"]
  val cull_face: unit -> ([`L_n_2884[@js 2884]] [@js.enum]) [@@js.get "CULL_FACE"]
  val blend: unit -> ([`L_n_3042[@js 3042]] [@js.enum]) [@@js.get "BLEND"]
  val dither: unit -> ([`L_n_3024[@js 3024]] [@js.enum]) [@@js.get "DITHER"]
  val stencil_test: unit -> ([`L_n_2960[@js 2960]] [@js.enum]) [@@js.get "STENCIL_TEST"]
  val depth_test: unit -> ([`L_n_2929[@js 2929]] [@js.enum]) [@@js.get "DEPTH_TEST"]
  val scissor_test: unit -> ([`L_n_3089[@js 3089]] [@js.enum]) [@@js.get "SCISSOR_TEST"]
  val polygon_offset_fill: unit -> ([`L_n_32823[@js 32823]] [@js.enum]) [@@js.get "POLYGON_OFFSET_FILL"]
  val sample_alpha_to_coverage: unit -> ([`L_n_32926[@js 32926]] [@js.enum]) [@@js.get "SAMPLE_ALPHA_TO_COVERAGE"]
  val sample_coverage: unit -> ([`L_n_32928[@js 32928]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE"]
  val no_error: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NO_ERROR"]
  val invalid_enum: unit -> ([`L_n_1280[@js 1280]] [@js.enum]) [@@js.get "INVALID_ENUM"]
  val invalid_value: unit -> ([`L_n_1281[@js 1281]] [@js.enum]) [@@js.get "INVALID_VALUE"]
  val invalid_operation: unit -> ([`L_n_1282[@js 1282]] [@js.enum]) [@@js.get "INVALID_OPERATION"]
  val out_of_memory: unit -> ([`L_n_1285[@js 1285]] [@js.enum]) [@@js.get "OUT_OF_MEMORY"]
  val cw: unit -> ([`L_n_2304[@js 2304]] [@js.enum]) [@@js.get "CW"]
  val ccw: unit -> ([`L_n_2305[@js 2305]] [@js.enum]) [@@js.get "CCW"]
  val line_width: unit -> ([`L_n_2849[@js 2849]] [@js.enum]) [@@js.get "LINE_WIDTH"]
  val aliased_point_size_range: unit -> ([`L_n_33901[@js 33901]] [@js.enum]) [@@js.get "ALIASED_POINT_SIZE_RANGE"]
  val aliased_line_width_range: unit -> ([`L_n_33902[@js 33902]] [@js.enum]) [@@js.get "ALIASED_LINE_WIDTH_RANGE"]
  val cull_face_mode: unit -> ([`L_n_2885[@js 2885]] [@js.enum]) [@@js.get "CULL_FACE_MODE"]
  val front_face: unit -> ([`L_n_2886[@js 2886]] [@js.enum]) [@@js.get "FRONT_FACE"]
  val depth_range: unit -> ([`L_n_2928[@js 2928]] [@js.enum]) [@@js.get "DEPTH_RANGE"]
  val depth_writemask: unit -> ([`L_n_2930[@js 2930]] [@js.enum]) [@@js.get "DEPTH_WRITEMASK"]
  val depth_clear_value: unit -> ([`L_n_2931[@js 2931]] [@js.enum]) [@@js.get "DEPTH_CLEAR_VALUE"]
  val depth_func: unit -> ([`L_n_2932[@js 2932]] [@js.enum]) [@@js.get "DEPTH_FUNC"]
  val stencil_clear_value: unit -> ([`L_n_2961[@js 2961]] [@js.enum]) [@@js.get "STENCIL_CLEAR_VALUE"]
  val stencil_func: unit -> ([`L_n_2962[@js 2962]] [@js.enum]) [@@js.get "STENCIL_FUNC"]
  val stencil_fail: unit -> ([`L_n_2964[@js 2964]] [@js.enum]) [@@js.get "STENCIL_FAIL"]
  val stencil_pass_depth_fail: unit -> ([`L_n_2965[@js 2965]] [@js.enum]) [@@js.get "STENCIL_PASS_DEPTH_FAIL"]
  val stencil_pass_depth_pass: unit -> ([`L_n_2966[@js 2966]] [@js.enum]) [@@js.get "STENCIL_PASS_DEPTH_PASS"]
  val stencil_ref: unit -> ([`L_n_2967[@js 2967]] [@js.enum]) [@@js.get "STENCIL_REF"]
  val stencil_value_mask: unit -> ([`L_n_2963[@js 2963]] [@js.enum]) [@@js.get "STENCIL_VALUE_MASK"]
  val stencil_writemask: unit -> ([`L_n_2968[@js 2968]] [@js.enum]) [@@js.get "STENCIL_WRITEMASK"]
  val stencil_back_func: unit -> ([`L_n_34816[@js 34816]] [@js.enum]) [@@js.get "STENCIL_BACK_FUNC"]
  val stencil_back_fail: unit -> ([`L_n_34817[@js 34817]] [@js.enum]) [@@js.get "STENCIL_BACK_FAIL"]
  val stencil_back_pass_depth_fail: unit -> ([`L_n_34818[@js 34818]] [@js.enum]) [@@js.get "STENCIL_BACK_PASS_DEPTH_FAIL"]
  val stencil_back_pass_depth_pass: unit -> ([`L_n_34819[@js 34819]] [@js.enum]) [@@js.get "STENCIL_BACK_PASS_DEPTH_PASS"]
  val stencil_back_ref: unit -> ([`L_n_36003[@js 36003]] [@js.enum]) [@@js.get "STENCIL_BACK_REF"]
  val stencil_back_value_mask: unit -> ([`L_n_36004[@js 36004]] [@js.enum]) [@@js.get "STENCIL_BACK_VALUE_MASK"]
  val stencil_back_writemask: unit -> ([`L_n_36005[@js 36005]] [@js.enum]) [@@js.get "STENCIL_BACK_WRITEMASK"]
  val viewport: unit -> ([`L_n_2978[@js 2978]] [@js.enum]) [@@js.get "VIEWPORT"]
  val scissor_box: unit -> ([`L_n_3088[@js 3088]] [@js.enum]) [@@js.get "SCISSOR_BOX"]
  val color_clear_value: unit -> ([`L_n_3106[@js 3106]] [@js.enum]) [@@js.get "COLOR_CLEAR_VALUE"]
  val color_writemask: unit -> ([`L_n_3107[@js 3107]] [@js.enum]) [@@js.get "COLOR_WRITEMASK"]
  val unpack_alignment: unit -> ([`L_n_3317[@js 3317]] [@js.enum]) [@@js.get "UNPACK_ALIGNMENT"]
  val pack_alignment: unit -> ([`L_n_3333[@js 3333]] [@js.enum]) [@@js.get "PACK_ALIGNMENT"]
  val max_texture_size: unit -> ([`L_n_3379[@js 3379]] [@js.enum]) [@@js.get "MAX_TEXTURE_SIZE"]
  val max_viewport_dims: unit -> ([`L_n_3386[@js 3386]] [@js.enum]) [@@js.get "MAX_VIEWPORT_DIMS"]
  val subpixel_bits: unit -> ([`L_n_3408[@js 3408]] [@js.enum]) [@@js.get "SUBPIXEL_BITS"]
  val red_bits: unit -> ([`L_n_3410[@js 3410]] [@js.enum]) [@@js.get "RED_BITS"]
  val green_bits: unit -> ([`L_n_3411[@js 3411]] [@js.enum]) [@@js.get "GREEN_BITS"]
  val blue_bits: unit -> ([`L_n_3412[@js 3412]] [@js.enum]) [@@js.get "BLUE_BITS"]
  val alpha_bits: unit -> ([`L_n_3413[@js 3413]] [@js.enum]) [@@js.get "ALPHA_BITS"]
  val depth_bits: unit -> ([`L_n_3414[@js 3414]] [@js.enum]) [@@js.get "DEPTH_BITS"]
  val stencil_bits: unit -> ([`L_n_3415[@js 3415]] [@js.enum]) [@@js.get "STENCIL_BITS"]
  val polygon_offset_units: unit -> ([`L_n_10752[@js 10752]] [@js.enum]) [@@js.get "POLYGON_OFFSET_UNITS"]
  val polygon_offset_factor: unit -> ([`L_n_32824[@js 32824]] [@js.enum]) [@@js.get "POLYGON_OFFSET_FACTOR"]
  val texture_binding_2d: unit -> ([`L_n_32873[@js 32873]] [@js.enum]) [@@js.get "TEXTURE_BINDING_2D"]
  val sample_buffers: unit -> ([`L_n_32936[@js 32936]] [@js.enum]) [@@js.get "SAMPLE_BUFFERS"]
  val samples: unit -> ([`L_n_32937[@js 32937]] [@js.enum]) [@@js.get "SAMPLES"]
  val sample_coverage_value: unit -> ([`L_n_32938[@js 32938]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE_VALUE"]
  val sample_coverage_invert: unit -> ([`L_n_32939[@js 32939]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE_INVERT"]
  val compressed_texture_formats: unit -> ([`L_n_34467[@js 34467]] [@js.enum]) [@@js.get "COMPRESSED_TEXTURE_FORMATS"]
  val dont_care: unit -> ([`L_n_4352[@js 4352]] [@js.enum]) [@@js.get "DONT_CARE"]
  val fastest: unit -> ([`L_n_4353[@js 4353]] [@js.enum]) [@@js.get "FASTEST"]
  val nicest: unit -> ([`L_n_4354[@js 4354]] [@js.enum]) [@@js.get "NICEST"]
  val generate_mipmap_hint: unit -> ([`L_n_33170[@js 33170]] [@js.enum]) [@@js.get "GENERATE_MIPMAP_HINT"]
  val byte: unit -> ([`L_n_5120[@js 5120]] [@js.enum]) [@@js.get "BYTE"]
  val unsigned_byte: unit -> ([`L_n_5121[@js 5121]] [@js.enum]) [@@js.get "UNSIGNED_BYTE"]
  val short: unit -> ([`L_n_5122[@js 5122]] [@js.enum]) [@@js.get "SHORT"]
  val unsigned_short: unit -> ([`L_n_5123[@js 5123]] [@js.enum]) [@@js.get "UNSIGNED_SHORT"]
  val int: unit -> ([`L_n_5124[@js 5124]] [@js.enum]) [@@js.get "INT"]
  val unsigned_int: unit -> ([`L_n_5125[@js 5125]] [@js.enum]) [@@js.get "UNSIGNED_INT"]
  val float: unit -> ([`L_n_5126[@js 5126]] [@js.enum]) [@@js.get "FLOAT"]
  val depth_component: unit -> ([`L_n_6402[@js 6402]] [@js.enum]) [@@js.get "DEPTH_COMPONENT"]
  val alpha: unit -> ([`L_n_6406[@js 6406]] [@js.enum]) [@@js.get "ALPHA"]
  val rgb: unit -> ([`L_n_6407[@js 6407]] [@js.enum]) [@@js.get "RGB"]
  val rgba: unit -> ([`L_n_6408[@js 6408]] [@js.enum]) [@@js.get "RGBA"]
  val luminance: unit -> ([`L_n_6409[@js 6409]] [@js.enum]) [@@js.get "LUMINANCE"]
  val luminance_alpha: unit -> ([`L_n_6410[@js 6410]] [@js.enum]) [@@js.get "LUMINANCE_ALPHA"]
  val unsigned_short_4_4_4_4: unit -> ([`L_n_32819[@js 32819]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_4_4_4_4"]
  val unsigned_short_5_5_5_1: unit -> ([`L_n_32820[@js 32820]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_5_5_5_1"]
  val unsigned_short_5_6_5: unit -> ([`L_n_33635[@js 33635]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_5_6_5"]
  val fragment_shader: unit -> ([`L_n_35632[@js 35632]] [@js.enum]) [@@js.get "FRAGMENT_SHADER"]
  val vertex_shader: unit -> ([`L_n_35633[@js 35633]] [@js.enum]) [@@js.get "VERTEX_SHADER"]
  val max_vertex_attribs: unit -> ([`L_n_34921[@js 34921]] [@js.enum]) [@@js.get "MAX_VERTEX_ATTRIBS"]
  val max_vertex_uniform_vectors: unit -> ([`L_n_36347[@js 36347]] [@js.enum]) [@@js.get "MAX_VERTEX_UNIFORM_VECTORS"]
  val max_varying_vectors: unit -> ([`L_n_36348[@js 36348]] [@js.enum]) [@@js.get "MAX_VARYING_VECTORS"]
  val max_combined_texture_image_units: unit -> ([`L_n_35661[@js 35661]] [@js.enum]) [@@js.get "MAX_COMBINED_TEXTURE_IMAGE_UNITS"]
  val max_vertex_texture_image_units: unit -> ([`L_n_35660[@js 35660]] [@js.enum]) [@@js.get "MAX_VERTEX_TEXTURE_IMAGE_UNITS"]
  val max_texture_image_units: unit -> ([`L_n_34930[@js 34930]] [@js.enum]) [@@js.get "MAX_TEXTURE_IMAGE_UNITS"]
  val max_fragment_uniform_vectors: unit -> ([`L_n_36349[@js 36349]] [@js.enum]) [@@js.get "MAX_FRAGMENT_UNIFORM_VECTORS"]
  val shader_type: unit -> ([`L_n_35663[@js 35663]] [@js.enum]) [@@js.get "SHADER_TYPE"]
  val delete_status: unit -> ([`L_n_35712[@js 35712]] [@js.enum]) [@@js.get "DELETE_STATUS"]
  val link_status: unit -> ([`L_n_35714[@js 35714]] [@js.enum]) [@@js.get "LINK_STATUS"]
  val validate_status: unit -> ([`L_n_35715[@js 35715]] [@js.enum]) [@@js.get "VALIDATE_STATUS"]
  val attached_shaders: unit -> ([`L_n_35717[@js 35717]] [@js.enum]) [@@js.get "ATTACHED_SHADERS"]
  val active_uniforms: unit -> ([`L_n_35718[@js 35718]] [@js.enum]) [@@js.get "ACTIVE_UNIFORMS"]
  val active_attributes: unit -> ([`L_n_35721[@js 35721]] [@js.enum]) [@@js.get "ACTIVE_ATTRIBUTES"]
  val shading_language_version: unit -> ([`L_n_35724[@js 35724]] [@js.enum]) [@@js.get "SHADING_LANGUAGE_VERSION"]
  val current_program: unit -> ([`L_n_35725[@js 35725]] [@js.enum]) [@@js.get "CURRENT_PROGRAM"]
  val never: unit -> ([`L_n_512[@js 512]] [@js.enum]) [@@js.get "NEVER"]
  val less: unit -> ([`L_n_513[@js 513]] [@js.enum]) [@@js.get "LESS"]
  val equal: unit -> ([`L_n_514[@js 514]] [@js.enum]) [@@js.get "EQUAL"]
  val lequal: unit -> ([`L_n_515[@js 515]] [@js.enum]) [@@js.get "LEQUAL"]
  val greater: unit -> ([`L_n_516[@js 516]] [@js.enum]) [@@js.get "GREATER"]
  val notequal: unit -> ([`L_n_517[@js 517]] [@js.enum]) [@@js.get "NOTEQUAL"]
  val gequal: unit -> ([`L_n_518[@js 518]] [@js.enum]) [@@js.get "GEQUAL"]
  val always: unit -> ([`L_n_519[@js 519]] [@js.enum]) [@@js.get "ALWAYS"]
  val keep: unit -> ([`L_n_7680[@js 7680]] [@js.enum]) [@@js.get "KEEP"]
  val replace: unit -> ([`L_n_7681[@js 7681]] [@js.enum]) [@@js.get "REPLACE"]
  val incr: unit -> ([`L_n_7682[@js 7682]] [@js.enum]) [@@js.get "INCR"]
  val decr: unit -> ([`L_n_7683[@js 7683]] [@js.enum]) [@@js.get "DECR"]
  val invert: unit -> ([`L_n_5386[@js 5386]] [@js.enum]) [@@js.get "INVERT"]
  val incr_wrap: unit -> ([`L_n_34055[@js 34055]] [@js.enum]) [@@js.get "INCR_WRAP"]
  val decr_wrap: unit -> ([`L_n_34056[@js 34056]] [@js.enum]) [@@js.get "DECR_WRAP"]
  val vendor: unit -> ([`L_n_7936[@js 7936]] [@js.enum]) [@@js.get "VENDOR"]
  val renderer: unit -> ([`L_n_7937[@js 7937]] [@js.enum]) [@@js.get "RENDERER"]
  val version: unit -> ([`L_n_7938[@js 7938]] [@js.enum]) [@@js.get "VERSION"]
  val nearest: unit -> ([`L_n_9728[@js 9728]] [@js.enum]) [@@js.get "NEAREST"]
  val linear: unit -> ([`L_n_9729[@js 9729]] [@js.enum]) [@@js.get "LINEAR"]
  val nearest_mipmap_nearest: unit -> ([`L_n_9984[@js 9984]] [@js.enum]) [@@js.get "NEAREST_MIPMAP_NEAREST"]
  val linear_mipmap_nearest: unit -> ([`L_n_9985[@js 9985]] [@js.enum]) [@@js.get "LINEAR_MIPMAP_NEAREST"]
  val nearest_mipmap_linear: unit -> ([`L_n_9986[@js 9986]] [@js.enum]) [@@js.get "NEAREST_MIPMAP_LINEAR"]
  val linear_mipmap_linear: unit -> ([`L_n_9987[@js 9987]] [@js.enum]) [@@js.get "LINEAR_MIPMAP_LINEAR"]
  val texture_mag_filter: unit -> ([`L_n_10240[@js 10240]] [@js.enum]) [@@js.get "TEXTURE_MAG_FILTER"]
  val texture_min_filter: unit -> ([`L_n_10241[@js 10241]] [@js.enum]) [@@js.get "TEXTURE_MIN_FILTER"]
  val texture_wrap_s: unit -> ([`L_n_10242[@js 10242]] [@js.enum]) [@@js.get "TEXTURE_WRAP_S"]
  val texture_wrap_t: unit -> ([`L_n_10243[@js 10243]] [@js.enum]) [@@js.get "TEXTURE_WRAP_T"]
  val texture_2d: unit -> ([`L_n_3553[@js 3553]] [@js.enum]) [@@js.get "TEXTURE_2D"]
  val texture: unit -> ([`L_n_5890[@js 5890]] [@js.enum]) [@@js.get "TEXTURE"]
  val texture_cube_map: unit -> ([`L_n_34067[@js 34067]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP"]
  val texture_binding_cube_map: unit -> ([`L_n_34068[@js 34068]] [@js.enum]) [@@js.get "TEXTURE_BINDING_CUBE_MAP"]
  val texture_cube_map_positive_x: unit -> ([`L_n_34069[@js 34069]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_X"]
  val texture_cube_map_negative_x: unit -> ([`L_n_34070[@js 34070]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_X"]
  val texture_cube_map_positive_y: unit -> ([`L_n_34071[@js 34071]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_Y"]
  val texture_cube_map_negative_y: unit -> ([`L_n_34072[@js 34072]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_Y"]
  val texture_cube_map_positive_z: unit -> ([`L_n_34073[@js 34073]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_Z"]
  val texture_cube_map_negative_z: unit -> ([`L_n_34074[@js 34074]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_Z"]
  val max_cube_map_texture_size: unit -> ([`L_n_34076[@js 34076]] [@js.enum]) [@@js.get "MAX_CUBE_MAP_TEXTURE_SIZE"]
  val texture0: unit -> ([`L_n_33984[@js 33984]] [@js.enum]) [@@js.get "TEXTURE0"]
  val texture1: unit -> ([`L_n_33985[@js 33985]] [@js.enum]) [@@js.get "TEXTURE1"]
  val texture2: unit -> ([`L_n_33986[@js 33986]] [@js.enum]) [@@js.get "TEXTURE2"]
  val texture3: unit -> ([`L_n_33987[@js 33987]] [@js.enum]) [@@js.get "TEXTURE3"]
  val texture4: unit -> ([`L_n_33988[@js 33988]] [@js.enum]) [@@js.get "TEXTURE4"]
  val texture5: unit -> ([`L_n_33989[@js 33989]] [@js.enum]) [@@js.get "TEXTURE5"]
  val texture6: unit -> ([`L_n_33990[@js 33990]] [@js.enum]) [@@js.get "TEXTURE6"]
  val texture7: unit -> ([`L_n_33991[@js 33991]] [@js.enum]) [@@js.get "TEXTURE7"]
  val texture8: unit -> ([`L_n_33992[@js 33992]] [@js.enum]) [@@js.get "TEXTURE8"]
  val texture9: unit -> ([`L_n_33993[@js 33993]] [@js.enum]) [@@js.get "TEXTURE9"]
  val texture10: unit -> ([`L_n_33994[@js 33994]] [@js.enum]) [@@js.get "TEXTURE10"]
  val texture11: unit -> ([`L_n_33995[@js 33995]] [@js.enum]) [@@js.get "TEXTURE11"]
  val texture12: unit -> ([`L_n_33996[@js 33996]] [@js.enum]) [@@js.get "TEXTURE12"]
  val texture13: unit -> ([`L_n_33997[@js 33997]] [@js.enum]) [@@js.get "TEXTURE13"]
  val texture14: unit -> ([`L_n_33998[@js 33998]] [@js.enum]) [@@js.get "TEXTURE14"]
  val texture15: unit -> ([`L_n_33999[@js 33999]] [@js.enum]) [@@js.get "TEXTURE15"]
  val texture16: unit -> ([`L_n_34000[@js 34000]] [@js.enum]) [@@js.get "TEXTURE16"]
  val texture17: unit -> ([`L_n_34001[@js 34001]] [@js.enum]) [@@js.get "TEXTURE17"]
  val texture18: unit -> ([`L_n_34002[@js 34002]] [@js.enum]) [@@js.get "TEXTURE18"]
  val texture19: unit -> ([`L_n_34003[@js 34003]] [@js.enum]) [@@js.get "TEXTURE19"]
  val texture20: unit -> ([`L_n_34004[@js 34004]] [@js.enum]) [@@js.get "TEXTURE20"]
  val texture21: unit -> ([`L_n_34005[@js 34005]] [@js.enum]) [@@js.get "TEXTURE21"]
  val texture22: unit -> ([`L_n_34006[@js 34006]] [@js.enum]) [@@js.get "TEXTURE22"]
  val texture23: unit -> ([`L_n_34007[@js 34007]] [@js.enum]) [@@js.get "TEXTURE23"]
  val texture24: unit -> ([`L_n_34008[@js 34008]] [@js.enum]) [@@js.get "TEXTURE24"]
  val texture25: unit -> ([`L_n_34009[@js 34009]] [@js.enum]) [@@js.get "TEXTURE25"]
  val texture26: unit -> ([`L_n_34010[@js 34010]] [@js.enum]) [@@js.get "TEXTURE26"]
  val texture27: unit -> ([`L_n_34011[@js 34011]] [@js.enum]) [@@js.get "TEXTURE27"]
  val texture28: unit -> ([`L_n_34012[@js 34012]] [@js.enum]) [@@js.get "TEXTURE28"]
  val texture29: unit -> ([`L_n_34013[@js 34013]] [@js.enum]) [@@js.get "TEXTURE29"]
  val texture30: unit -> ([`L_n_34014[@js 34014]] [@js.enum]) [@@js.get "TEXTURE30"]
  val texture31: unit -> ([`L_n_34015[@js 34015]] [@js.enum]) [@@js.get "TEXTURE31"]
  val active_texture: unit -> ([`L_n_34016[@js 34016]] [@js.enum]) [@@js.get "ACTIVE_TEXTURE"]
  val repeat: unit -> ([`L_n_10497[@js 10497]] [@js.enum]) [@@js.get "REPEAT"]
  val clamp_to_edge: unit -> ([`L_n_33071[@js 33071]] [@js.enum]) [@@js.get "CLAMP_TO_EDGE"]
  val mirrored_repeat: unit -> ([`L_n_33648[@js 33648]] [@js.enum]) [@@js.get "MIRRORED_REPEAT"]
  val float_vec2: unit -> ([`L_n_35664[@js 35664]] [@js.enum]) [@@js.get "FLOAT_VEC2"]
  val float_vec3: unit -> ([`L_n_35665[@js 35665]] [@js.enum]) [@@js.get "FLOAT_VEC3"]
  val float_vec4: unit -> ([`L_n_35666[@js 35666]] [@js.enum]) [@@js.get "FLOAT_VEC4"]
  val int_vec2: unit -> ([`L_n_35667[@js 35667]] [@js.enum]) [@@js.get "INT_VEC2"]
  val int_vec3: unit -> ([`L_n_35668[@js 35668]] [@js.enum]) [@@js.get "INT_VEC3"]
  val int_vec4: unit -> ([`L_n_35669[@js 35669]] [@js.enum]) [@@js.get "INT_VEC4"]
  val bool: unit -> ([`L_n_35670[@js 35670]] [@js.enum]) [@@js.get "BOOL"]
  val bool_vec2: unit -> ([`L_n_35671[@js 35671]] [@js.enum]) [@@js.get "BOOL_VEC2"]
  val bool_vec3: unit -> ([`L_n_35672[@js 35672]] [@js.enum]) [@@js.get "BOOL_VEC3"]
  val bool_vec4: unit -> ([`L_n_35673[@js 35673]] [@js.enum]) [@@js.get "BOOL_VEC4"]
  val float_mat2: unit -> ([`L_n_35674[@js 35674]] [@js.enum]) [@@js.get "FLOAT_MAT2"]
  val float_mat3: unit -> ([`L_n_35675[@js 35675]] [@js.enum]) [@@js.get "FLOAT_MAT3"]
  val float_mat4: unit -> ([`L_n_35676[@js 35676]] [@js.enum]) [@@js.get "FLOAT_MAT4"]
  val sampler_2d: unit -> ([`L_n_35678[@js 35678]] [@js.enum]) [@@js.get "SAMPLER_2D"]
  val sampler_cube: unit -> ([`L_n_35680[@js 35680]] [@js.enum]) [@@js.get "SAMPLER_CUBE"]
  val vertex_attrib_array_enabled: unit -> ([`L_n_34338[@js 34338]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_ENABLED"]
  val vertex_attrib_array_size: unit -> ([`L_n_34339[@js 34339]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_SIZE"]
  val vertex_attrib_array_stride: unit -> ([`L_n_34340[@js 34340]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_STRIDE"]
  val vertex_attrib_array_type: unit -> ([`L_n_34341[@js 34341]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_TYPE"]
  val vertex_attrib_array_normalized: unit -> ([`L_n_34922[@js 34922]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_NORMALIZED"]
  val vertex_attrib_array_pointer: unit -> ([`L_n_34373[@js 34373]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_POINTER"]
  val vertex_attrib_array_buffer_binding: unit -> ([`L_n_34975[@js 34975]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"]
  val implementation_color_read_type: unit -> ([`L_n_35738[@js 35738]] [@js.enum]) [@@js.get "IMPLEMENTATION_COLOR_READ_TYPE"]
  val implementation_color_read_format: unit -> ([`L_n_35739[@js 35739]] [@js.enum]) [@@js.get "IMPLEMENTATION_COLOR_READ_FORMAT"]
  val compile_status: unit -> ([`L_n_35713[@js 35713]] [@js.enum]) [@@js.get "COMPILE_STATUS"]
  val low_float: unit -> ([`L_n_36336[@js 36336]] [@js.enum]) [@@js.get "LOW_FLOAT"]
  val medium_float: unit -> ([`L_n_36337[@js 36337]] [@js.enum]) [@@js.get "MEDIUM_FLOAT"]
  val high_float: unit -> ([`L_n_36338[@js 36338]] [@js.enum]) [@@js.get "HIGH_FLOAT"]
  val low_int: unit -> ([`L_n_36339[@js 36339]] [@js.enum]) [@@js.get "LOW_INT"]
  val medium_int: unit -> ([`L_n_36340[@js 36340]] [@js.enum]) [@@js.get "MEDIUM_INT"]
  val high_int: unit -> ([`L_n_36341[@js 36341]] [@js.enum]) [@@js.get "HIGH_INT"]
  val framebuffer: unit -> ([`L_n_36160[@js 36160]] [@js.enum]) [@@js.get "FRAMEBUFFER"]
  val renderbuffer: unit -> ([`L_n_36161[@js 36161]] [@js.enum]) [@@js.get "RENDERBUFFER"]
  val rgba4: unit -> ([`L_n_32854[@js 32854]] [@js.enum]) [@@js.get "RGBA4"]
  val rgb5_a1: unit -> ([`L_n_32855[@js 32855]] [@js.enum]) [@@js.get "RGB5_A1"]
  val rgb565: unit -> ([`L_n_36194[@js 36194]] [@js.enum]) [@@js.get "RGB565"]
  val depth_component16: unit -> ([`L_n_33189[@js 33189]] [@js.enum]) [@@js.get "DEPTH_COMPONENT16"]
  val stencil_index8: unit -> ([`L_n_36168[@js 36168]] [@js.enum]) [@@js.get "STENCIL_INDEX8"]
  val depth_stencil: unit -> ([`L_n_34041[@js 34041]] [@js.enum]) [@@js.get "DEPTH_STENCIL"]
  val renderbuffer_width: unit -> ([`L_n_36162[@js 36162]] [@js.enum]) [@@js.get "RENDERBUFFER_WIDTH"]
  val renderbuffer_height: unit -> ([`L_n_36163[@js 36163]] [@js.enum]) [@@js.get "RENDERBUFFER_HEIGHT"]
  val renderbuffer_internal_format: unit -> ([`L_n_36164[@js 36164]] [@js.enum]) [@@js.get "RENDERBUFFER_INTERNAL_FORMAT"]
  val renderbuffer_red_size: unit -> ([`L_n_36176[@js 36176]] [@js.enum]) [@@js.get "RENDERBUFFER_RED_SIZE"]
  val renderbuffer_green_size: unit -> ([`L_n_36177[@js 36177]] [@js.enum]) [@@js.get "RENDERBUFFER_GREEN_SIZE"]
  val renderbuffer_blue_size: unit -> ([`L_n_36178[@js 36178]] [@js.enum]) [@@js.get "RENDERBUFFER_BLUE_SIZE"]
  val renderbuffer_alpha_size: unit -> ([`L_n_36179[@js 36179]] [@js.enum]) [@@js.get "RENDERBUFFER_ALPHA_SIZE"]
  val renderbuffer_depth_size: unit -> ([`L_n_36180[@js 36180]] [@js.enum]) [@@js.get "RENDERBUFFER_DEPTH_SIZE"]
  val renderbuffer_stencil_size: unit -> ([`L_n_36181[@js 36181]] [@js.enum]) [@@js.get "RENDERBUFFER_STENCIL_SIZE"]
  val framebuffer_attachment_object_type: unit -> ([`L_n_36048[@js 36048]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"]
  val framebuffer_attachment_object_name: unit -> ([`L_n_36049[@js 36049]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"]
  val framebuffer_attachment_texture_level: unit -> ([`L_n_36050[@js 36050]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"]
  val framebuffer_attachment_texture_cube_map_face: unit -> ([`L_n_36051[@js 36051]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"]
  val color_attachment0: unit -> ([`L_n_36064[@js 36064]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT0"]
  val depth_attachment: unit -> ([`L_n_36096[@js 36096]] [@js.enum]) [@@js.get "DEPTH_ATTACHMENT"]
  val stencil_attachment: unit -> ([`L_n_36128[@js 36128]] [@js.enum]) [@@js.get "STENCIL_ATTACHMENT"]
  val depth_stencil_attachment: unit -> ([`L_n_33306[@js 33306]] [@js.enum]) [@@js.get "DEPTH_STENCIL_ATTACHMENT"]
  val none: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NONE"]
  val framebuffer_complete: unit -> ([`L_n_36053[@js 36053]] [@js.enum]) [@@js.get "FRAMEBUFFER_COMPLETE"]
  val framebuffer_incomplete_attachment: unit -> ([`L_n_36054[@js 36054]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_ATTACHMENT"]
  val framebuffer_incomplete_missing_attachment: unit -> ([`L_n_36055[@js 36055]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"]
  val framebuffer_incomplete_dimensions: unit -> ([`L_n_36057[@js 36057]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_DIMENSIONS"]
  val framebuffer_unsupported: unit -> ([`L_n_36061[@js 36061]] [@js.enum]) [@@js.get "FRAMEBUFFER_UNSUPPORTED"]
  val framebuffer_binding: unit -> ([`L_n_36006[@js 36006]] [@js.enum]) [@@js.get "FRAMEBUFFER_BINDING"]
  val renderbuffer_binding: unit -> ([`L_n_36007[@js 36007]] [@js.enum]) [@@js.get "RENDERBUFFER_BINDING"]
  val max_renderbuffer_size: unit -> ([`L_n_34024[@js 34024]] [@js.enum]) [@@js.get "MAX_RENDERBUFFER_SIZE"]
  val invalid_framebuffer_operation: unit -> ([`L_n_1286[@js 1286]] [@js.enum]) [@@js.get "INVALID_FRAMEBUFFER_OPERATION"]
  val unpack_flip_y_webgl: unit -> ([`L_n_37440[@js 37440]] [@js.enum]) [@@js.get "UNPACK_FLIP_Y_WEBGL"]
  val unpack_premultiply_alpha_webgl: unit -> ([`L_n_37441[@js 37441]] [@js.enum]) [@@js.get "UNPACK_PREMULTIPLY_ALPHA_WEBGL"]
  val context_lost_webgl: unit -> ([`L_n_37442[@js 37442]] [@js.enum]) [@@js.get "CONTEXT_LOST_WEBGL"]
  val unpack_colorspace_conversion_webgl: unit -> ([`L_n_37443[@js 37443]] [@js.enum]) [@@js.get "UNPACK_COLORSPACE_CONVERSION_WEBGL"]
  val browser_default_webgl: unit -> ([`L_n_37444[@js 37444]] [@js.enum]) [@@js.get "BROWSER_DEFAULT_WEBGL"]
end
and WebGL2RenderingContextBase : sig
  type t = [`WebGL2RenderingContextBase] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGL2RenderingContextBase]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGL2RenderingContextBase]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGL2RenderingContextBase ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer) *)
  val clearBufferfv: 'tags this -> buffer:GLenum.t -> drawbuffer:GLint.t -> values:GLfloat.t Iterable.t -> ?srcOffset:GLuint.t -> unit -> unit [@@js.call "clearBufferfv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer) *)
  val clearBufferiv: 'tags this -> buffer:GLenum.t -> drawbuffer:GLint.t -> values:GLint.t Iterable.t -> ?srcOffset:GLuint.t -> unit -> unit [@@js.call "clearBufferiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer) *)
  val clearBufferuiv: 'tags this -> buffer:GLenum.t -> drawbuffer:GLint.t -> values:GLuint.t Iterable.t -> ?srcOffset:GLuint.t -> unit -> unit [@@js.call "clearBufferuiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawBuffers) *)
  val drawBuffers: 'tags this -> buffers:GLenum.t Iterable.t -> unit [@@js.call "drawBuffers"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniforms) *)
  val getActiveUniforms: 'tags this -> program:WebGLProgram.t -> uniformIndices:GLuint.t Iterable.t -> pname:GLenum.t -> any [@@js.call "getActiveUniforms"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformIndices) *)
  val getUniformIndices: 'tags this -> program:WebGLProgram.t -> uniformNames:string Iterable.t -> GLuint.t Iterable.t option [@@js.call "getUniformIndices"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateFramebuffer) *)
  val invalidateFramebuffer: 'tags this -> target:GLenum.t -> attachments:GLenum.t Iterable.t -> unit [@@js.call "invalidateFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateSubFramebuffer) *)
  val invalidateSubFramebuffer: 'tags this -> target:GLenum.t -> attachments:GLenum.t Iterable.t -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "invalidateSubFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/transformFeedbackVaryings) *)
  val transformFeedbackVaryings: 'tags this -> program:WebGLProgram.t -> varyings:string Iterable.t -> bufferMode:GLenum.t -> unit [@@js.call "transformFeedbackVaryings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform1uiv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLuint.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform1uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform2uiv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLuint.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform2uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform3uiv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLuint.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform3uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform4uiv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLuint.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform4uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix2x3fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix2x3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix2x4fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix2x4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix3x2fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix3x2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix3x4fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix3x4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix4x2fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix4x2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix4x3fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix4x3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI) *)
  val vertexAttribI4iv: 'tags this -> index:GLuint.t -> values:GLint.t Iterable.t -> unit [@@js.call "vertexAttribI4iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI) *)
  val vertexAttribI4uiv: 'tags this -> index:GLuint.t -> values:GLuint.t Iterable.t -> unit [@@js.call "vertexAttribI4uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/beginQuery) *)
  val beginQuery: 'tags this -> target:GLenum.t -> query:WebGLQuery.t -> unit [@@js.call "beginQuery"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/beginTransformFeedback) *)
  val beginTransformFeedback: 'tags this -> primitiveMode:GLenum.t -> unit [@@js.call "beginTransformFeedback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindBufferBase) *)
  val bindBufferBase: 'tags this -> target:GLenum.t -> index:GLuint.t -> buffer:WebGLBuffer.t option -> unit [@@js.call "bindBufferBase"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindBufferRange) *)
  val bindBufferRange: 'tags this -> target:GLenum.t -> index:GLuint.t -> buffer:WebGLBuffer.t option -> offset:GLintptr.t -> size:GLsizeiptr.t -> unit [@@js.call "bindBufferRange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindSampler) *)
  val bindSampler: 'tags this -> unit:GLuint.t -> sampler:WebGLSampler.t option -> unit [@@js.call "bindSampler"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindTransformFeedback) *)
  val bindTransformFeedback: 'tags this -> target:GLenum.t -> tf:WebGLTransformFeedback.t option -> unit [@@js.call "bindTransformFeedback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindVertexArray) *)
  val bindVertexArray: 'tags this -> array:WebGLVertexArrayObject.t option -> unit [@@js.call "bindVertexArray"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/blitFramebuffer) *)
  val blitFramebuffer: 'tags this -> srcX0:GLint.t -> srcY0:GLint.t -> srcX1:GLint.t -> srcY1:GLint.t -> dstX0:GLint.t -> dstY0:GLint.t -> dstX1:GLint.t -> dstY1:GLint.t -> mask:GLbitfield.t -> filter:GLenum.t -> unit [@@js.call "blitFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer) *)
  val clearBufferfi: 'tags this -> buffer:GLenum.t -> drawbuffer:GLint.t -> depth:GLfloat.t -> stencil:GLint.t -> unit [@@js.call "clearBufferfi"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer) *)
  val clearBufferfv': 'tags this -> buffer:GLenum.t -> drawbuffer:GLint.t -> values:Float32List.t -> ?srcOffset:GLuint.t -> unit -> unit [@@js.call "clearBufferfv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer) *)
  val clearBufferiv': 'tags this -> buffer:GLenum.t -> drawbuffer:GLint.t -> values:Int32List.t -> ?srcOffset:GLuint.t -> unit -> unit [@@js.call "clearBufferiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer) *)
  val clearBufferuiv': 'tags this -> buffer:GLenum.t -> drawbuffer:GLint.t -> values:Uint32List.t -> ?srcOffset:GLuint.t -> unit -> unit [@@js.call "clearBufferuiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clientWaitSync) *)
  val clientWaitSync: 'tags this -> sync:WebGLSync.t -> flags:GLbitfield.t -> timeout:GLuint64.t -> GLenum.t [@@js.call "clientWaitSync"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexImage3D) *)
  val compressedTexImage3D: 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> border:GLint.t -> imageSize:GLsizei.t -> offset:GLintptr.t -> unit [@@js.call "compressedTexImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexImage3D) *)
  val compressedTexImage3D': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> border:GLint.t -> srcData:ArrayBufferView.t -> ?srcOffset:GLuint.t -> ?srcLengthOverride:GLuint.t -> unit -> unit [@@js.call "compressedTexImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexSubImage3D) *)
  val compressedTexSubImage3D: 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> zoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> format:GLenum.t -> imageSize:GLsizei.t -> offset:GLintptr.t -> unit [@@js.call "compressedTexSubImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexSubImage3D) *)
  val compressedTexSubImage3D': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> zoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> format:GLenum.t -> srcData:ArrayBufferView.t -> ?srcOffset:GLuint.t -> ?srcLengthOverride:GLuint.t -> unit -> unit [@@js.call "compressedTexSubImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/copyBufferSubData) *)
  val copyBufferSubData: 'tags this -> readTarget:GLenum.t -> writeTarget:GLenum.t -> readOffset:GLintptr.t -> writeOffset:GLintptr.t -> size:GLsizeiptr.t -> unit [@@js.call "copyBufferSubData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/copyTexSubImage3D) *)
  val copyTexSubImage3D: 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> zoffset:GLint.t -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "copyTexSubImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createQuery) *)
  val createQuery: 'tags this -> WebGLQuery.t option [@@js.call "createQuery"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createSampler) *)
  val createSampler: 'tags this -> WebGLSampler.t option [@@js.call "createSampler"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createTransformFeedback) *)
  val createTransformFeedback: 'tags this -> WebGLTransformFeedback.t option [@@js.call "createTransformFeedback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createVertexArray) *)
  val createVertexArray: 'tags this -> WebGLVertexArrayObject.t option [@@js.call "createVertexArray"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteQuery) *)
  val deleteQuery: 'tags this -> query:WebGLQuery.t option -> unit [@@js.call "deleteQuery"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteSampler) *)
  val deleteSampler: 'tags this -> sampler:WebGLSampler.t option -> unit [@@js.call "deleteSampler"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteSync) *)
  val deleteSync: 'tags this -> sync:WebGLSync.t option -> unit [@@js.call "deleteSync"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteTransformFeedback) *)
  val deleteTransformFeedback: 'tags this -> tf:WebGLTransformFeedback.t option -> unit [@@js.call "deleteTransformFeedback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteVertexArray) *)
  val deleteVertexArray: 'tags this -> vertexArray:WebGLVertexArrayObject.t option -> unit [@@js.call "deleteVertexArray"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawArraysInstanced) *)
  val drawArraysInstanced: 'tags this -> mode:GLenum.t -> first:GLint.t -> count:GLsizei.t -> instanceCount:GLsizei.t -> unit [@@js.call "drawArraysInstanced"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawBuffers) *)
  val drawBuffers': 'tags this -> buffers:GLenum.t list -> unit [@@js.call "drawBuffers"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawElementsInstanced) *)
  val drawElementsInstanced: 'tags this -> mode:GLenum.t -> count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> instanceCount:GLsizei.t -> unit [@@js.call "drawElementsInstanced"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawRangeElements) *)
  val drawRangeElements: 'tags this -> mode:GLenum.t -> start:GLuint.t -> end_:GLuint.t -> count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit [@@js.call "drawRangeElements"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/endQuery) *)
  val endQuery: 'tags this -> target:GLenum.t -> unit [@@js.call "endQuery"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/endTransformFeedback) *)
  val endTransformFeedback: 'tags this -> unit [@@js.call "endTransformFeedback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/fenceSync) *)
  val fenceSync: 'tags this -> condition:GLenum.t -> flags:GLbitfield.t -> WebGLSync.t option [@@js.call "fenceSync"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/framebufferTextureLayer) *)
  val framebufferTextureLayer: 'tags this -> target:GLenum.t -> attachment:GLenum.t -> texture:WebGLTexture.t option -> level:GLint.t -> layer:GLint.t -> unit [@@js.call "framebufferTextureLayer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockName) *)
  val getActiveUniformBlockName: 'tags this -> program:WebGLProgram.t -> uniformBlockIndex:GLuint.t -> string option [@@js.call "getActiveUniformBlockName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter) *)
  val getActiveUniformBlockParameter: 'tags this -> program:WebGLProgram.t -> uniformBlockIndex:GLuint.t -> pname:GLenum.t -> any [@@js.call "getActiveUniformBlockParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniforms) *)
  val getActiveUniforms': 'tags this -> program:WebGLProgram.t -> uniformIndices:GLuint.t list -> pname:GLenum.t -> any [@@js.call "getActiveUniforms"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getBufferSubData) *)
  val getBufferSubData: 'tags this -> target:GLenum.t -> srcByteOffset:GLintptr.t -> dstBuffer:ArrayBufferView.t -> ?dstOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit [@@js.call "getBufferSubData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getFragDataLocation) *)
  val getFragDataLocation: 'tags this -> program:WebGLProgram.t -> name:string -> GLint.t [@@js.call "getFragDataLocation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getIndexedParameter) *)
  val getIndexedParameter: 'tags this -> target:GLenum.t -> index:GLuint.t -> any [@@js.call "getIndexedParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getInternalformatParameter) *)
  val getInternalformatParameter: 'tags this -> target:GLenum.t -> internalformat:GLenum.t -> pname:GLenum.t -> any [@@js.call "getInternalformatParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getQuery) *)
  val getQuery: 'tags this -> target:GLenum.t -> pname:GLenum.t -> WebGLQuery.t option [@@js.call "getQuery"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getQueryParameter) *)
  val getQueryParameter: 'tags this -> query:WebGLQuery.t -> pname:GLenum.t -> any [@@js.call "getQueryParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getSamplerParameter) *)
  val getSamplerParameter: 'tags this -> sampler:WebGLSampler.t -> pname:GLenum.t -> any [@@js.call "getSamplerParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getSyncParameter) *)
  val getSyncParameter: 'tags this -> sync:WebGLSync.t -> pname:GLenum.t -> any [@@js.call "getSyncParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getTransformFeedbackVarying) *)
  val getTransformFeedbackVarying: 'tags this -> program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option [@@js.call "getTransformFeedbackVarying"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformBlockIndex) *)
  val getUniformBlockIndex: 'tags this -> program:WebGLProgram.t -> uniformBlockName:string -> GLuint.t [@@js.call "getUniformBlockIndex"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformIndices) *)
  val getUniformIndices': 'tags this -> program:WebGLProgram.t -> uniformNames:string list -> GLuint.t list option [@@js.call "getUniformIndices"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateFramebuffer) *)
  val invalidateFramebuffer': 'tags this -> target:GLenum.t -> attachments:GLenum.t list -> unit [@@js.call "invalidateFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateSubFramebuffer) *)
  val invalidateSubFramebuffer': 'tags this -> target:GLenum.t -> attachments:GLenum.t list -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "invalidateSubFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isQuery) *)
  val isQuery: 'tags this -> query:WebGLQuery.t option -> GLboolean.t [@@js.call "isQuery"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isSampler) *)
  val isSampler: 'tags this -> sampler:WebGLSampler.t option -> GLboolean.t [@@js.call "isSampler"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isSync) *)
  val isSync: 'tags this -> sync:WebGLSync.t option -> GLboolean.t [@@js.call "isSync"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isTransformFeedback) *)
  val isTransformFeedback: 'tags this -> tf:WebGLTransformFeedback.t option -> GLboolean.t [@@js.call "isTransformFeedback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isVertexArray) *)
  val isVertexArray: 'tags this -> vertexArray:WebGLVertexArrayObject.t option -> GLboolean.t [@@js.call "isVertexArray"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/pauseTransformFeedback) *)
  val pauseTransformFeedback: 'tags this -> unit [@@js.call "pauseTransformFeedback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/readBuffer) *)
  val readBuffer: 'tags this -> src:GLenum.t -> unit [@@js.call "readBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/renderbufferStorageMultisample) *)
  val renderbufferStorageMultisample: 'tags this -> target:GLenum.t -> samples:GLsizei.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "renderbufferStorageMultisample"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/resumeTransformFeedback) *)
  val resumeTransformFeedback: 'tags this -> unit [@@js.call "resumeTransformFeedback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/samplerParameter) *)
  val samplerParameterf: 'tags this -> sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLfloat.t -> unit [@@js.call "samplerParameterf"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/samplerParameter) *)
  val samplerParameteri: 'tags this -> sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLint.t -> unit [@@js.call "samplerParameteri"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D) *)
  val texImage3D: 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> pboOffset:GLintptr.t -> unit [@@js.call "texImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D) *)
  val texImage3D': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> source:TexImageSource.t -> unit [@@js.call "texImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D) *)
  val texImage3D'': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> srcData:ArrayBufferView.t option -> unit [@@js.call "texImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D) *)
  val texImage3D''': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> srcData:ArrayBufferView.t -> srcOffset:GLuint.t -> unit [@@js.call "texImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texStorage2D) *)
  val texStorage2D: 'tags this -> target:GLenum.t -> levels:GLsizei.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "texStorage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texStorage3D) *)
  val texStorage3D: 'tags this -> target:GLenum.t -> levels:GLsizei.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> unit [@@js.call "texStorage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texSubImage3D) *)
  val texSubImage3D: 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> zoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> pboOffset:GLintptr.t -> unit [@@js.call "texSubImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texSubImage3D) *)
  val texSubImage3D': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> zoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> source:TexImageSource.t -> unit [@@js.call "texSubImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texSubImage3D) *)
  val texSubImage3D'': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> zoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> srcData:ArrayBufferView.t option -> ?srcOffset:GLuint.t -> unit -> unit [@@js.call "texSubImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/transformFeedbackVaryings) *)
  val transformFeedbackVaryings': 'tags this -> program:WebGLProgram.t -> varyings:string list -> bufferMode:GLenum.t -> unit [@@js.call "transformFeedbackVaryings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform1ui: 'tags this -> location:WebGLUniformLocation.t option -> v0:GLuint.t -> unit [@@js.call "uniform1ui"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform1uiv': 'tags this -> location:WebGLUniformLocation.t option -> data:Uint32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform1uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform2ui: 'tags this -> location:WebGLUniformLocation.t option -> v0:GLuint.t -> v1:GLuint.t -> unit [@@js.call "uniform2ui"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform2uiv': 'tags this -> location:WebGLUniformLocation.t option -> data:Uint32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform2uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform3ui: 'tags this -> location:WebGLUniformLocation.t option -> v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> unit [@@js.call "uniform3ui"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform3uiv': 'tags this -> location:WebGLUniformLocation.t option -> data:Uint32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform3uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform4ui: 'tags this -> location:WebGLUniformLocation.t option -> v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> v3:GLuint.t -> unit [@@js.call "uniform4ui"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform4uiv': 'tags this -> location:WebGLUniformLocation.t option -> data:Uint32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform4uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformBlockBinding) *)
  val uniformBlockBinding: 'tags this -> program:WebGLProgram.t -> uniformBlockIndex:GLuint.t -> uniformBlockBinding:GLuint.t -> unit [@@js.call "uniformBlockBinding"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix2x3fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix2x3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix2x4fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix2x4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix3x2fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix3x2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix3x4fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix3x4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix4x2fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix4x2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix4x3fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix4x3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribDivisor) *)
  val vertexAttribDivisor: 'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit [@@js.call "vertexAttribDivisor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI) *)
  val vertexAttribI4i: 'tags this -> index:GLuint.t -> x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit [@@js.call "vertexAttribI4i"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI) *)
  val vertexAttribI4iv': 'tags this -> index:GLuint.t -> values:Int32List.t -> unit [@@js.call "vertexAttribI4iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI) *)
  val vertexAttribI4ui: 'tags this -> index:GLuint.t -> x:GLuint.t -> y:GLuint.t -> z:GLuint.t -> w:GLuint.t -> unit [@@js.call "vertexAttribI4ui"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI) *)
  val vertexAttribI4uiv': 'tags this -> index:GLuint.t -> values:Uint32List.t -> unit [@@js.call "vertexAttribI4uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribIPointer) *)
  val vertexAttribIPointer: 'tags this -> index:GLuint.t -> size:GLint.t -> type_:GLenum.t -> stride:GLsizei.t -> offset:GLintptr.t -> unit [@@js.call "vertexAttribIPointer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/waitSync) *)
  val waitSync: 'tags this -> sync:WebGLSync.t -> flags:GLbitfield.t -> timeout:GLint64.t -> unit [@@js.call "waitSync"]
  val get_READ_BUFFER: 'tags this -> ([`L_n_3074[@js 3074]] [@js.enum]) [@@js.get "READ_BUFFER"]
  val get_UNPACK_ROW_LENGTH: 'tags this -> ([`L_n_3314[@js 3314]] [@js.enum]) [@@js.get "UNPACK_ROW_LENGTH"]
  val get_UNPACK_SKIP_ROWS: 'tags this -> ([`L_n_3315[@js 3315]] [@js.enum]) [@@js.get "UNPACK_SKIP_ROWS"]
  val get_UNPACK_SKIP_PIXELS: 'tags this -> ([`L_n_3316[@js 3316]] [@js.enum]) [@@js.get "UNPACK_SKIP_PIXELS"]
  val get_PACK_ROW_LENGTH: 'tags this -> ([`L_n_3330[@js 3330]] [@js.enum]) [@@js.get "PACK_ROW_LENGTH"]
  val get_PACK_SKIP_ROWS: 'tags this -> ([`L_n_3331[@js 3331]] [@js.enum]) [@@js.get "PACK_SKIP_ROWS"]
  val get_PACK_SKIP_PIXELS: 'tags this -> ([`L_n_3332[@js 3332]] [@js.enum]) [@@js.get "PACK_SKIP_PIXELS"]
  val get_COLOR: 'tags this -> ([`L_n_6144[@js 6144]] [@js.enum]) [@@js.get "COLOR"]
  val get_DEPTH: 'tags this -> ([`L_n_6145[@js 6145]] [@js.enum]) [@@js.get "DEPTH"]
  val get_STENCIL: 'tags this -> ([`L_n_6146[@js 6146]] [@js.enum]) [@@js.get "STENCIL"]
  val get_RED: 'tags this -> ([`L_n_6403[@js 6403]] [@js.enum]) [@@js.get "RED"]
  val get_RGB8: 'tags this -> ([`L_n_32849[@js 32849]] [@js.enum]) [@@js.get "RGB8"]
  val get_RGBA8: 'tags this -> ([`L_n_32856[@js 32856]] [@js.enum]) [@@js.get "RGBA8"]
  val get_RGB10_A2: 'tags this -> ([`L_n_32857[@js 32857]] [@js.enum]) [@@js.get "RGB10_A2"]
  val get_TEXTURE_BINDING_3D: 'tags this -> ([`L_n_32874[@js 32874]] [@js.enum]) [@@js.get "TEXTURE_BINDING_3D"]
  val get_UNPACK_SKIP_IMAGES: 'tags this -> ([`L_n_32877[@js 32877]] [@js.enum]) [@@js.get "UNPACK_SKIP_IMAGES"]
  val get_UNPACK_IMAGE_HEIGHT: 'tags this -> ([`L_n_32878[@js 32878]] [@js.enum]) [@@js.get "UNPACK_IMAGE_HEIGHT"]
  val get_TEXTURE_3D: 'tags this -> ([`L_n_32879[@js 32879]] [@js.enum]) [@@js.get "TEXTURE_3D"]
  val get_TEXTURE_WRAP_R: 'tags this -> ([`L_n_32882[@js 32882]] [@js.enum]) [@@js.get "TEXTURE_WRAP_R"]
  val get_MAX_3D_TEXTURE_SIZE: 'tags this -> ([`L_n_32883[@js 32883]] [@js.enum]) [@@js.get "MAX_3D_TEXTURE_SIZE"]
  val get_UNSIGNED_INT_2_10_10_10_REV: 'tags this -> ([`L_n_33640[@js 33640]] [@js.enum]) [@@js.get "UNSIGNED_INT_2_10_10_10_REV"]
  val get_MAX_ELEMENTS_VERTICES: 'tags this -> ([`L_n_33000[@js 33000]] [@js.enum]) [@@js.get "MAX_ELEMENTS_VERTICES"]
  val get_MAX_ELEMENTS_INDICES: 'tags this -> ([`L_n_33001[@js 33001]] [@js.enum]) [@@js.get "MAX_ELEMENTS_INDICES"]
  val get_TEXTURE_MIN_LOD: 'tags this -> ([`L_n_33082[@js 33082]] [@js.enum]) [@@js.get "TEXTURE_MIN_LOD"]
  val get_TEXTURE_MAX_LOD: 'tags this -> ([`L_n_33083[@js 33083]] [@js.enum]) [@@js.get "TEXTURE_MAX_LOD"]
  val get_TEXTURE_BASE_LEVEL: 'tags this -> ([`L_n_33084[@js 33084]] [@js.enum]) [@@js.get "TEXTURE_BASE_LEVEL"]
  val get_TEXTURE_MAX_LEVEL: 'tags this -> ([`L_n_33085[@js 33085]] [@js.enum]) [@@js.get "TEXTURE_MAX_LEVEL"]
  val get_MIN: 'tags this -> ([`L_n_32775[@js 32775]] [@js.enum]) [@@js.get "MIN"]
  val get_MAX: 'tags this -> ([`L_n_32776[@js 32776]] [@js.enum]) [@@js.get "MAX"]
  val get_DEPTH_COMPONENT24: 'tags this -> ([`L_n_33190[@js 33190]] [@js.enum]) [@@js.get "DEPTH_COMPONENT24"]
  val get_MAX_TEXTURE_LOD_BIAS: 'tags this -> ([`L_n_34045[@js 34045]] [@js.enum]) [@@js.get "MAX_TEXTURE_LOD_BIAS"]
  val get_TEXTURE_COMPARE_MODE: 'tags this -> ([`L_n_34892[@js 34892]] [@js.enum]) [@@js.get "TEXTURE_COMPARE_MODE"]
  val get_TEXTURE_COMPARE_FUNC: 'tags this -> ([`L_n_34893[@js 34893]] [@js.enum]) [@@js.get "TEXTURE_COMPARE_FUNC"]
  val get_CURRENT_QUERY: 'tags this -> ([`L_n_34917[@js 34917]] [@js.enum]) [@@js.get "CURRENT_QUERY"]
  val get_QUERY_RESULT: 'tags this -> ([`L_n_34918[@js 34918]] [@js.enum]) [@@js.get "QUERY_RESULT"]
  val get_QUERY_RESULT_AVAILABLE: 'tags this -> ([`L_n_34919[@js 34919]] [@js.enum]) [@@js.get "QUERY_RESULT_AVAILABLE"]
  val get_STREAM_READ: 'tags this -> ([`L_n_35041[@js 35041]] [@js.enum]) [@@js.get "STREAM_READ"]
  val get_STREAM_COPY: 'tags this -> ([`L_n_35042[@js 35042]] [@js.enum]) [@@js.get "STREAM_COPY"]
  val get_STATIC_READ: 'tags this -> ([`L_n_35045[@js 35045]] [@js.enum]) [@@js.get "STATIC_READ"]
  val get_STATIC_COPY: 'tags this -> ([`L_n_35046[@js 35046]] [@js.enum]) [@@js.get "STATIC_COPY"]
  val get_DYNAMIC_READ: 'tags this -> ([`L_n_35049[@js 35049]] [@js.enum]) [@@js.get "DYNAMIC_READ"]
  val get_DYNAMIC_COPY: 'tags this -> ([`L_n_35050[@js 35050]] [@js.enum]) [@@js.get "DYNAMIC_COPY"]
  val get_MAX_DRAW_BUFFERS: 'tags this -> ([`L_n_34852[@js 34852]] [@js.enum]) [@@js.get "MAX_DRAW_BUFFERS"]
  val get_DRAW_BUFFER0: 'tags this -> ([`L_n_34853[@js 34853]] [@js.enum]) [@@js.get "DRAW_BUFFER0"]
  val get_DRAW_BUFFER1: 'tags this -> ([`L_n_34854[@js 34854]] [@js.enum]) [@@js.get "DRAW_BUFFER1"]
  val get_DRAW_BUFFER2: 'tags this -> ([`L_n_34855[@js 34855]] [@js.enum]) [@@js.get "DRAW_BUFFER2"]
  val get_DRAW_BUFFER3: 'tags this -> ([`L_n_34856[@js 34856]] [@js.enum]) [@@js.get "DRAW_BUFFER3"]
  val get_DRAW_BUFFER4: 'tags this -> ([`L_n_34857[@js 34857]] [@js.enum]) [@@js.get "DRAW_BUFFER4"]
  val get_DRAW_BUFFER5: 'tags this -> ([`L_n_34858[@js 34858]] [@js.enum]) [@@js.get "DRAW_BUFFER5"]
  val get_DRAW_BUFFER6: 'tags this -> ([`L_n_34859[@js 34859]] [@js.enum]) [@@js.get "DRAW_BUFFER6"]
  val get_DRAW_BUFFER7: 'tags this -> ([`L_n_34860[@js 34860]] [@js.enum]) [@@js.get "DRAW_BUFFER7"]
  val get_DRAW_BUFFER8: 'tags this -> ([`L_n_34861[@js 34861]] [@js.enum]) [@@js.get "DRAW_BUFFER8"]
  val get_DRAW_BUFFER9: 'tags this -> ([`L_n_34862[@js 34862]] [@js.enum]) [@@js.get "DRAW_BUFFER9"]
  val get_DRAW_BUFFER10: 'tags this -> ([`L_n_34863[@js 34863]] [@js.enum]) [@@js.get "DRAW_BUFFER10"]
  val get_DRAW_BUFFER11: 'tags this -> ([`L_n_34864[@js 34864]] [@js.enum]) [@@js.get "DRAW_BUFFER11"]
  val get_DRAW_BUFFER12: 'tags this -> ([`L_n_34865[@js 34865]] [@js.enum]) [@@js.get "DRAW_BUFFER12"]
  val get_DRAW_BUFFER13: 'tags this -> ([`L_n_34866[@js 34866]] [@js.enum]) [@@js.get "DRAW_BUFFER13"]
  val get_DRAW_BUFFER14: 'tags this -> ([`L_n_34867[@js 34867]] [@js.enum]) [@@js.get "DRAW_BUFFER14"]
  val get_DRAW_BUFFER15: 'tags this -> ([`L_n_34868[@js 34868]] [@js.enum]) [@@js.get "DRAW_BUFFER15"]
  val get_MAX_FRAGMENT_UNIFORM_COMPONENTS: 'tags this -> ([`L_n_35657[@js 35657]] [@js.enum]) [@@js.get "MAX_FRAGMENT_UNIFORM_COMPONENTS"]
  val get_MAX_VERTEX_UNIFORM_COMPONENTS: 'tags this -> ([`L_n_35658[@js 35658]] [@js.enum]) [@@js.get "MAX_VERTEX_UNIFORM_COMPONENTS"]
  val get_SAMPLER_3D: 'tags this -> ([`L_n_35679[@js 35679]] [@js.enum]) [@@js.get "SAMPLER_3D"]
  val get_SAMPLER_2D_SHADOW: 'tags this -> ([`L_n_35682[@js 35682]] [@js.enum]) [@@js.get "SAMPLER_2D_SHADOW"]
  val get_FRAGMENT_SHADER_DERIVATIVE_HINT: 'tags this -> ([`L_n_35723[@js 35723]] [@js.enum]) [@@js.get "FRAGMENT_SHADER_DERIVATIVE_HINT"]
  val get_PIXEL_PACK_BUFFER: 'tags this -> ([`L_n_35051[@js 35051]] [@js.enum]) [@@js.get "PIXEL_PACK_BUFFER"]
  val get_PIXEL_UNPACK_BUFFER: 'tags this -> ([`L_n_35052[@js 35052]] [@js.enum]) [@@js.get "PIXEL_UNPACK_BUFFER"]
  val get_PIXEL_PACK_BUFFER_BINDING: 'tags this -> ([`L_n_35053[@js 35053]] [@js.enum]) [@@js.get "PIXEL_PACK_BUFFER_BINDING"]
  val get_PIXEL_UNPACK_BUFFER_BINDING: 'tags this -> ([`L_n_35055[@js 35055]] [@js.enum]) [@@js.get "PIXEL_UNPACK_BUFFER_BINDING"]
  val get_FLOAT_MAT2x3: 'tags this -> ([`L_n_35685[@js 35685]] [@js.enum]) [@@js.get "FLOAT_MAT2x3"]
  val get_FLOAT_MAT2x4: 'tags this -> ([`L_n_35686[@js 35686]] [@js.enum]) [@@js.get "FLOAT_MAT2x4"]
  val get_FLOAT_MAT3x2: 'tags this -> ([`L_n_35687[@js 35687]] [@js.enum]) [@@js.get "FLOAT_MAT3x2"]
  val get_FLOAT_MAT3x4: 'tags this -> ([`L_n_35688[@js 35688]] [@js.enum]) [@@js.get "FLOAT_MAT3x4"]
  val get_FLOAT_MAT4x2: 'tags this -> ([`L_n_35689[@js 35689]] [@js.enum]) [@@js.get "FLOAT_MAT4x2"]
  val get_FLOAT_MAT4x3: 'tags this -> ([`L_n_35690[@js 35690]] [@js.enum]) [@@js.get "FLOAT_MAT4x3"]
  val get_SRGB: 'tags this -> ([`L_n_35904[@js 35904]] [@js.enum]) [@@js.get "SRGB"]
  val get_SRGB8: 'tags this -> ([`L_n_35905[@js 35905]] [@js.enum]) [@@js.get "SRGB8"]
  val get_SRGB8_ALPHA8: 'tags this -> ([`L_n_35907[@js 35907]] [@js.enum]) [@@js.get "SRGB8_ALPHA8"]
  val get_COMPARE_REF_TO_TEXTURE: 'tags this -> ([`L_n_34894[@js 34894]] [@js.enum]) [@@js.get "COMPARE_REF_TO_TEXTURE"]
  val get_RGBA32F: 'tags this -> ([`L_n_34836[@js 34836]] [@js.enum]) [@@js.get "RGBA32F"]
  val get_RGB32F: 'tags this -> ([`L_n_34837[@js 34837]] [@js.enum]) [@@js.get "RGB32F"]
  val get_RGBA16F: 'tags this -> ([`L_n_34842[@js 34842]] [@js.enum]) [@@js.get "RGBA16F"]
  val get_RGB16F: 'tags this -> ([`L_n_34843[@js 34843]] [@js.enum]) [@@js.get "RGB16F"]
  val get_VERTEX_ATTRIB_ARRAY_INTEGER: 'tags this -> ([`L_n_35069[@js 35069]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_INTEGER"]
  val get_MAX_ARRAY_TEXTURE_LAYERS: 'tags this -> ([`L_n_35071[@js 35071]] [@js.enum]) [@@js.get "MAX_ARRAY_TEXTURE_LAYERS"]
  val get_MIN_PROGRAM_TEXEL_OFFSET: 'tags this -> ([`L_n_35076[@js 35076]] [@js.enum]) [@@js.get "MIN_PROGRAM_TEXEL_OFFSET"]
  val get_MAX_PROGRAM_TEXEL_OFFSET: 'tags this -> ([`L_n_35077[@js 35077]] [@js.enum]) [@@js.get "MAX_PROGRAM_TEXEL_OFFSET"]
  val get_MAX_VARYING_COMPONENTS: 'tags this -> ([`L_n_35659[@js 35659]] [@js.enum]) [@@js.get "MAX_VARYING_COMPONENTS"]
  val get_TEXTURE_2D_ARRAY: 'tags this -> ([`L_n_35866[@js 35866]] [@js.enum]) [@@js.get "TEXTURE_2D_ARRAY"]
  val get_TEXTURE_BINDING_2D_ARRAY: 'tags this -> ([`L_n_35869[@js 35869]] [@js.enum]) [@@js.get "TEXTURE_BINDING_2D_ARRAY"]
  val get_R11F_G11F_B10F: 'tags this -> ([`L_n_35898[@js 35898]] [@js.enum]) [@@js.get "R11F_G11F_B10F"]
  val get_UNSIGNED_INT_10F_11F_11F_REV: 'tags this -> ([`L_n_35899[@js 35899]] [@js.enum]) [@@js.get "UNSIGNED_INT_10F_11F_11F_REV"]
  val get_RGB9_E5: 'tags this -> ([`L_n_35901[@js 35901]] [@js.enum]) [@@js.get "RGB9_E5"]
  val get_UNSIGNED_INT_5_9_9_9_REV: 'tags this -> ([`L_n_35902[@js 35902]] [@js.enum]) [@@js.get "UNSIGNED_INT_5_9_9_9_REV"]
  val get_TRANSFORM_FEEDBACK_BUFFER_MODE: 'tags this -> ([`L_n_35967[@js 35967]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER_MODE"]
  val get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 'tags this -> ([`L_n_35968[@js 35968]] [@js.enum]) [@@js.get "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS"]
  val get_TRANSFORM_FEEDBACK_VARYINGS: 'tags this -> ([`L_n_35971[@js 35971]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_VARYINGS"]
  val get_TRANSFORM_FEEDBACK_BUFFER_START: 'tags this -> ([`L_n_35972[@js 35972]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER_START"]
  val get_TRANSFORM_FEEDBACK_BUFFER_SIZE: 'tags this -> ([`L_n_35973[@js 35973]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER_SIZE"]
  val get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 'tags this -> ([`L_n_35976[@js 35976]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN"]
  val get_RASTERIZER_DISCARD: 'tags this -> ([`L_n_35977[@js 35977]] [@js.enum]) [@@js.get "RASTERIZER_DISCARD"]
  val get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 'tags this -> ([`L_n_35978[@js 35978]] [@js.enum]) [@@js.get "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS"]
  val get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 'tags this -> ([`L_n_35979[@js 35979]] [@js.enum]) [@@js.get "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS"]
  val get_INTERLEAVED_ATTRIBS: 'tags this -> ([`L_n_35980[@js 35980]] [@js.enum]) [@@js.get "INTERLEAVED_ATTRIBS"]
  val get_SEPARATE_ATTRIBS: 'tags this -> ([`L_n_35981[@js 35981]] [@js.enum]) [@@js.get "SEPARATE_ATTRIBS"]
  val get_TRANSFORM_FEEDBACK_BUFFER: 'tags this -> ([`L_n_35982[@js 35982]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER"]
  val get_TRANSFORM_FEEDBACK_BUFFER_BINDING: 'tags this -> ([`L_n_35983[@js 35983]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER_BINDING"]
  val get_RGBA32UI: 'tags this -> ([`L_n_36208[@js 36208]] [@js.enum]) [@@js.get "RGBA32UI"]
  val get_RGB32UI: 'tags this -> ([`L_n_36209[@js 36209]] [@js.enum]) [@@js.get "RGB32UI"]
  val get_RGBA16UI: 'tags this -> ([`L_n_36214[@js 36214]] [@js.enum]) [@@js.get "RGBA16UI"]
  val get_RGB16UI: 'tags this -> ([`L_n_36215[@js 36215]] [@js.enum]) [@@js.get "RGB16UI"]
  val get_RGBA8UI: 'tags this -> ([`L_n_36220[@js 36220]] [@js.enum]) [@@js.get "RGBA8UI"]
  val get_RGB8UI: 'tags this -> ([`L_n_36221[@js 36221]] [@js.enum]) [@@js.get "RGB8UI"]
  val get_RGBA32I: 'tags this -> ([`L_n_36226[@js 36226]] [@js.enum]) [@@js.get "RGBA32I"]
  val get_RGB32I: 'tags this -> ([`L_n_36227[@js 36227]] [@js.enum]) [@@js.get "RGB32I"]
  val get_RGBA16I: 'tags this -> ([`L_n_36232[@js 36232]] [@js.enum]) [@@js.get "RGBA16I"]
  val get_RGB16I: 'tags this -> ([`L_n_36233[@js 36233]] [@js.enum]) [@@js.get "RGB16I"]
  val get_RGBA8I: 'tags this -> ([`L_n_36238[@js 36238]] [@js.enum]) [@@js.get "RGBA8I"]
  val get_RGB8I: 'tags this -> ([`L_n_36239[@js 36239]] [@js.enum]) [@@js.get "RGB8I"]
  val get_RED_INTEGER: 'tags this -> ([`L_n_36244[@js 36244]] [@js.enum]) [@@js.get "RED_INTEGER"]
  val get_RGB_INTEGER: 'tags this -> ([`L_n_36248[@js 36248]] [@js.enum]) [@@js.get "RGB_INTEGER"]
  val get_RGBA_INTEGER: 'tags this -> ([`L_n_36249[@js 36249]] [@js.enum]) [@@js.get "RGBA_INTEGER"]
  val get_SAMPLER_2D_ARRAY: 'tags this -> ([`L_n_36289[@js 36289]] [@js.enum]) [@@js.get "SAMPLER_2D_ARRAY"]
  val get_SAMPLER_2D_ARRAY_SHADOW: 'tags this -> ([`L_n_36292[@js 36292]] [@js.enum]) [@@js.get "SAMPLER_2D_ARRAY_SHADOW"]
  val get_SAMPLER_CUBE_SHADOW: 'tags this -> ([`L_n_36293[@js 36293]] [@js.enum]) [@@js.get "SAMPLER_CUBE_SHADOW"]
  val get_UNSIGNED_INT_VEC2: 'tags this -> ([`L_n_36294[@js 36294]] [@js.enum]) [@@js.get "UNSIGNED_INT_VEC2"]
  val get_UNSIGNED_INT_VEC3: 'tags this -> ([`L_n_36295[@js 36295]] [@js.enum]) [@@js.get "UNSIGNED_INT_VEC3"]
  val get_UNSIGNED_INT_VEC4: 'tags this -> ([`L_n_36296[@js 36296]] [@js.enum]) [@@js.get "UNSIGNED_INT_VEC4"]
  val get_INT_SAMPLER_2D: 'tags this -> ([`L_n_36298[@js 36298]] [@js.enum]) [@@js.get "INT_SAMPLER_2D"]
  val get_INT_SAMPLER_3D: 'tags this -> ([`L_n_36299[@js 36299]] [@js.enum]) [@@js.get "INT_SAMPLER_3D"]
  val get_INT_SAMPLER_CUBE: 'tags this -> ([`L_n_36300[@js 36300]] [@js.enum]) [@@js.get "INT_SAMPLER_CUBE"]
  val get_INT_SAMPLER_2D_ARRAY: 'tags this -> ([`L_n_36303[@js 36303]] [@js.enum]) [@@js.get "INT_SAMPLER_2D_ARRAY"]
  val get_UNSIGNED_INT_SAMPLER_2D: 'tags this -> ([`L_n_36306[@js 36306]] [@js.enum]) [@@js.get "UNSIGNED_INT_SAMPLER_2D"]
  val get_UNSIGNED_INT_SAMPLER_3D: 'tags this -> ([`L_n_36307[@js 36307]] [@js.enum]) [@@js.get "UNSIGNED_INT_SAMPLER_3D"]
  val get_UNSIGNED_INT_SAMPLER_CUBE: 'tags this -> ([`L_n_36308[@js 36308]] [@js.enum]) [@@js.get "UNSIGNED_INT_SAMPLER_CUBE"]
  val get_UNSIGNED_INT_SAMPLER_2D_ARRAY: 'tags this -> ([`L_n_36311[@js 36311]] [@js.enum]) [@@js.get "UNSIGNED_INT_SAMPLER_2D_ARRAY"]
  val get_DEPTH_COMPONENT32F: 'tags this -> ([`L_n_36012[@js 36012]] [@js.enum]) [@@js.get "DEPTH_COMPONENT32F"]
  val get_DEPTH32F_STENCIL8: 'tags this -> ([`L_n_36013[@js 36013]] [@js.enum]) [@@js.get "DEPTH32F_STENCIL8"]
  val get_FLOAT_32_UNSIGNED_INT_24_8_REV: 'tags this -> ([`L_n_36269[@js 36269]] [@js.enum]) [@@js.get "FLOAT_32_UNSIGNED_INT_24_8_REV"]
  val get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 'tags this -> ([`L_n_33296[@js 33296]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING"]
  val get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 'tags this -> ([`L_n_33297[@js 33297]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE"]
  val get_FRAMEBUFFER_ATTACHMENT_RED_SIZE: 'tags this -> ([`L_n_33298[@js 33298]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_RED_SIZE"]
  val get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 'tags this -> ([`L_n_33299[@js 33299]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE"]
  val get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 'tags this -> ([`L_n_33300[@js 33300]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE"]
  val get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 'tags this -> ([`L_n_33301[@js 33301]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE"]
  val get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 'tags this -> ([`L_n_33302[@js 33302]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE"]
  val get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 'tags this -> ([`L_n_33303[@js 33303]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE"]
  val get_FRAMEBUFFER_DEFAULT: 'tags this -> ([`L_n_33304[@js 33304]] [@js.enum]) [@@js.get "FRAMEBUFFER_DEFAULT"]
  val get_UNSIGNED_INT_24_8: 'tags this -> ([`L_n_34042[@js 34042]] [@js.enum]) [@@js.get "UNSIGNED_INT_24_8"]
  val get_DEPTH24_STENCIL8: 'tags this -> ([`L_n_35056[@js 35056]] [@js.enum]) [@@js.get "DEPTH24_STENCIL8"]
  val get_UNSIGNED_NORMALIZED: 'tags this -> ([`L_n_35863[@js 35863]] [@js.enum]) [@@js.get "UNSIGNED_NORMALIZED"]
  val get_DRAW_FRAMEBUFFER_BINDING: 'tags this -> ([`L_n_36006[@js 36006]] [@js.enum]) [@@js.get "DRAW_FRAMEBUFFER_BINDING"]
  val get_READ_FRAMEBUFFER: 'tags this -> ([`L_n_36008[@js 36008]] [@js.enum]) [@@js.get "READ_FRAMEBUFFER"]
  val get_DRAW_FRAMEBUFFER: 'tags this -> ([`L_n_36009[@js 36009]] [@js.enum]) [@@js.get "DRAW_FRAMEBUFFER"]
  val get_READ_FRAMEBUFFER_BINDING: 'tags this -> ([`L_n_36010[@js 36010]] [@js.enum]) [@@js.get "READ_FRAMEBUFFER_BINDING"]
  val get_RENDERBUFFER_SAMPLES: 'tags this -> ([`L_n_36011[@js 36011]] [@js.enum]) [@@js.get "RENDERBUFFER_SAMPLES"]
  val get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 'tags this -> ([`L_n_36052[@js 36052]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER"]
  val get_MAX_COLOR_ATTACHMENTS: 'tags this -> ([`L_n_36063[@js 36063]] [@js.enum]) [@@js.get "MAX_COLOR_ATTACHMENTS"]
  val get_COLOR_ATTACHMENT1: 'tags this -> ([`L_n_36065[@js 36065]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT1"]
  val get_COLOR_ATTACHMENT2: 'tags this -> ([`L_n_36066[@js 36066]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT2"]
  val get_COLOR_ATTACHMENT3: 'tags this -> ([`L_n_36067[@js 36067]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT3"]
  val get_COLOR_ATTACHMENT4: 'tags this -> ([`L_n_36068[@js 36068]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT4"]
  val get_COLOR_ATTACHMENT5: 'tags this -> ([`L_n_36069[@js 36069]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT5"]
  val get_COLOR_ATTACHMENT6: 'tags this -> ([`L_n_36070[@js 36070]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT6"]
  val get_COLOR_ATTACHMENT7: 'tags this -> ([`L_n_36071[@js 36071]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT7"]
  val get_COLOR_ATTACHMENT8: 'tags this -> ([`L_n_36072[@js 36072]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT8"]
  val get_COLOR_ATTACHMENT9: 'tags this -> ([`L_n_36073[@js 36073]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT9"]
  val get_COLOR_ATTACHMENT10: 'tags this -> ([`L_n_36074[@js 36074]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT10"]
  val get_COLOR_ATTACHMENT11: 'tags this -> ([`L_n_36075[@js 36075]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT11"]
  val get_COLOR_ATTACHMENT12: 'tags this -> ([`L_n_36076[@js 36076]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT12"]
  val get_COLOR_ATTACHMENT13: 'tags this -> ([`L_n_36077[@js 36077]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT13"]
  val get_COLOR_ATTACHMENT14: 'tags this -> ([`L_n_36078[@js 36078]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT14"]
  val get_COLOR_ATTACHMENT15: 'tags this -> ([`L_n_36079[@js 36079]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT15"]
  val get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 'tags this -> ([`L_n_36182[@js 36182]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"]
  val get_MAX_SAMPLES: 'tags this -> ([`L_n_36183[@js 36183]] [@js.enum]) [@@js.get "MAX_SAMPLES"]
  val get_HALF_FLOAT: 'tags this -> ([`L_n_5131[@js 5131]] [@js.enum]) [@@js.get "HALF_FLOAT"]
  val get_RG: 'tags this -> ([`L_n_33319[@js 33319]] [@js.enum]) [@@js.get "RG"]
  val get_RG_INTEGER: 'tags this -> ([`L_n_33320[@js 33320]] [@js.enum]) [@@js.get "RG_INTEGER"]
  val get_R8: 'tags this -> ([`L_n_33321[@js 33321]] [@js.enum]) [@@js.get "R8"]
  val get_RG8: 'tags this -> ([`L_n_33323[@js 33323]] [@js.enum]) [@@js.get "RG8"]
  val get_R16F: 'tags this -> ([`L_n_33325[@js 33325]] [@js.enum]) [@@js.get "R16F"]
  val get_R32F: 'tags this -> ([`L_n_33326[@js 33326]] [@js.enum]) [@@js.get "R32F"]
  val get_RG16F: 'tags this -> ([`L_n_33327[@js 33327]] [@js.enum]) [@@js.get "RG16F"]
  val get_RG32F: 'tags this -> ([`L_n_33328[@js 33328]] [@js.enum]) [@@js.get "RG32F"]
  val get_R8I: 'tags this -> ([`L_n_33329[@js 33329]] [@js.enum]) [@@js.get "R8I"]
  val get_R8UI: 'tags this -> ([`L_n_33330[@js 33330]] [@js.enum]) [@@js.get "R8UI"]
  val get_R16I: 'tags this -> ([`L_n_33331[@js 33331]] [@js.enum]) [@@js.get "R16I"]
  val get_R16UI: 'tags this -> ([`L_n_33332[@js 33332]] [@js.enum]) [@@js.get "R16UI"]
  val get_R32I: 'tags this -> ([`L_n_33333[@js 33333]] [@js.enum]) [@@js.get "R32I"]
  val get_R32UI: 'tags this -> ([`L_n_33334[@js 33334]] [@js.enum]) [@@js.get "R32UI"]
  val get_RG8I: 'tags this -> ([`L_n_33335[@js 33335]] [@js.enum]) [@@js.get "RG8I"]
  val get_RG8UI: 'tags this -> ([`L_n_33336[@js 33336]] [@js.enum]) [@@js.get "RG8UI"]
  val get_RG16I: 'tags this -> ([`L_n_33337[@js 33337]] [@js.enum]) [@@js.get "RG16I"]
  val get_RG16UI: 'tags this -> ([`L_n_33338[@js 33338]] [@js.enum]) [@@js.get "RG16UI"]
  val get_RG32I: 'tags this -> ([`L_n_33339[@js 33339]] [@js.enum]) [@@js.get "RG32I"]
  val get_RG32UI: 'tags this -> ([`L_n_33340[@js 33340]] [@js.enum]) [@@js.get "RG32UI"]
  val get_VERTEX_ARRAY_BINDING: 'tags this -> ([`L_n_34229[@js 34229]] [@js.enum]) [@@js.get "VERTEX_ARRAY_BINDING"]
  val get_R8_SNORM: 'tags this -> ([`L_n_36756[@js 36756]] [@js.enum]) [@@js.get "R8_SNORM"]
  val get_RG8_SNORM: 'tags this -> ([`L_n_36757[@js 36757]] [@js.enum]) [@@js.get "RG8_SNORM"]
  val get_RGB8_SNORM: 'tags this -> ([`L_n_36758[@js 36758]] [@js.enum]) [@@js.get "RGB8_SNORM"]
  val get_RGBA8_SNORM: 'tags this -> ([`L_n_36759[@js 36759]] [@js.enum]) [@@js.get "RGBA8_SNORM"]
  val get_SIGNED_NORMALIZED: 'tags this -> ([`L_n_36764[@js 36764]] [@js.enum]) [@@js.get "SIGNED_NORMALIZED"]
  val get_COPY_READ_BUFFER: 'tags this -> ([`L_n_36662[@js 36662]] [@js.enum]) [@@js.get "COPY_READ_BUFFER"]
  val get_COPY_WRITE_BUFFER: 'tags this -> ([`L_n_36663[@js 36663]] [@js.enum]) [@@js.get "COPY_WRITE_BUFFER"]
  val get_COPY_READ_BUFFER_BINDING: 'tags this -> ([`L_n_36662[@js 36662]] [@js.enum]) [@@js.get "COPY_READ_BUFFER_BINDING"]
  val get_COPY_WRITE_BUFFER_BINDING: 'tags this -> ([`L_n_36663[@js 36663]] [@js.enum]) [@@js.get "COPY_WRITE_BUFFER_BINDING"]
  val get_UNIFORM_BUFFER: 'tags this -> ([`L_n_35345[@js 35345]] [@js.enum]) [@@js.get "UNIFORM_BUFFER"]
  val get_UNIFORM_BUFFER_BINDING: 'tags this -> ([`L_n_35368[@js 35368]] [@js.enum]) [@@js.get "UNIFORM_BUFFER_BINDING"]
  val get_UNIFORM_BUFFER_START: 'tags this -> ([`L_n_35369[@js 35369]] [@js.enum]) [@@js.get "UNIFORM_BUFFER_START"]
  val get_UNIFORM_BUFFER_SIZE: 'tags this -> ([`L_n_35370[@js 35370]] [@js.enum]) [@@js.get "UNIFORM_BUFFER_SIZE"]
  val get_MAX_VERTEX_UNIFORM_BLOCKS: 'tags this -> ([`L_n_35371[@js 35371]] [@js.enum]) [@@js.get "MAX_VERTEX_UNIFORM_BLOCKS"]
  val get_MAX_FRAGMENT_UNIFORM_BLOCKS: 'tags this -> ([`L_n_35373[@js 35373]] [@js.enum]) [@@js.get "MAX_FRAGMENT_UNIFORM_BLOCKS"]
  val get_MAX_COMBINED_UNIFORM_BLOCKS: 'tags this -> ([`L_n_35374[@js 35374]] [@js.enum]) [@@js.get "MAX_COMBINED_UNIFORM_BLOCKS"]
  val get_MAX_UNIFORM_BUFFER_BINDINGS: 'tags this -> ([`L_n_35375[@js 35375]] [@js.enum]) [@@js.get "MAX_UNIFORM_BUFFER_BINDINGS"]
  val get_MAX_UNIFORM_BLOCK_SIZE: 'tags this -> ([`L_n_35376[@js 35376]] [@js.enum]) [@@js.get "MAX_UNIFORM_BLOCK_SIZE"]
  val get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 'tags this -> ([`L_n_35377[@js 35377]] [@js.enum]) [@@js.get "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS"]
  val get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 'tags this -> ([`L_n_35379[@js 35379]] [@js.enum]) [@@js.get "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS"]
  val get_UNIFORM_BUFFER_OFFSET_ALIGNMENT: 'tags this -> ([`L_n_35380[@js 35380]] [@js.enum]) [@@js.get "UNIFORM_BUFFER_OFFSET_ALIGNMENT"]
  val get_ACTIVE_UNIFORM_BLOCKS: 'tags this -> ([`L_n_35382[@js 35382]] [@js.enum]) [@@js.get "ACTIVE_UNIFORM_BLOCKS"]
  val get_UNIFORM_TYPE: 'tags this -> ([`L_n_35383[@js 35383]] [@js.enum]) [@@js.get "UNIFORM_TYPE"]
  val get_UNIFORM_SIZE: 'tags this -> ([`L_n_35384[@js 35384]] [@js.enum]) [@@js.get "UNIFORM_SIZE"]
  val get_UNIFORM_BLOCK_INDEX: 'tags this -> ([`L_n_35386[@js 35386]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_INDEX"]
  val get_UNIFORM_OFFSET: 'tags this -> ([`L_n_35387[@js 35387]] [@js.enum]) [@@js.get "UNIFORM_OFFSET"]
  val get_UNIFORM_ARRAY_STRIDE: 'tags this -> ([`L_n_35388[@js 35388]] [@js.enum]) [@@js.get "UNIFORM_ARRAY_STRIDE"]
  val get_UNIFORM_MATRIX_STRIDE: 'tags this -> ([`L_n_35389[@js 35389]] [@js.enum]) [@@js.get "UNIFORM_MATRIX_STRIDE"]
  val get_UNIFORM_IS_ROW_MAJOR: 'tags this -> ([`L_n_35390[@js 35390]] [@js.enum]) [@@js.get "UNIFORM_IS_ROW_MAJOR"]
  val get_UNIFORM_BLOCK_BINDING: 'tags this -> ([`L_n_35391[@js 35391]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_BINDING"]
  val get_UNIFORM_BLOCK_DATA_SIZE: 'tags this -> ([`L_n_35392[@js 35392]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_DATA_SIZE"]
  val get_UNIFORM_BLOCK_ACTIVE_UNIFORMS: 'tags this -> ([`L_n_35394[@js 35394]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_ACTIVE_UNIFORMS"]
  val get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 'tags this -> ([`L_n_35395[@js 35395]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES"]
  val get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 'tags this -> ([`L_n_35396[@js 35396]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER"]
  val get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 'tags this -> ([`L_n_35398[@js 35398]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER"]
  val get_INVALID_INDEX: 'tags this -> ([`L_n_minus1[@js -1]] [@js.enum]) [@@js.get "INVALID_INDEX"]
  val get_MAX_VERTEX_OUTPUT_COMPONENTS: 'tags this -> ([`L_n_37154[@js 37154]] [@js.enum]) [@@js.get "MAX_VERTEX_OUTPUT_COMPONENTS"]
  val get_MAX_FRAGMENT_INPUT_COMPONENTS: 'tags this -> ([`L_n_37157[@js 37157]] [@js.enum]) [@@js.get "MAX_FRAGMENT_INPUT_COMPONENTS"]
  val get_MAX_SERVER_WAIT_TIMEOUT: 'tags this -> ([`L_n_37137[@js 37137]] [@js.enum]) [@@js.get "MAX_SERVER_WAIT_TIMEOUT"]
  val get_OBJECT_TYPE: 'tags this -> ([`L_n_37138[@js 37138]] [@js.enum]) [@@js.get "OBJECT_TYPE"]
  val get_SYNC_CONDITION: 'tags this -> ([`L_n_37139[@js 37139]] [@js.enum]) [@@js.get "SYNC_CONDITION"]
  val get_SYNC_STATUS: 'tags this -> ([`L_n_37140[@js 37140]] [@js.enum]) [@@js.get "SYNC_STATUS"]
  val get_SYNC_FLAGS: 'tags this -> ([`L_n_37141[@js 37141]] [@js.enum]) [@@js.get "SYNC_FLAGS"]
  val get_SYNC_FENCE: 'tags this -> ([`L_n_37142[@js 37142]] [@js.enum]) [@@js.get "SYNC_FENCE"]
  val get_SYNC_GPU_COMMANDS_COMPLETE: 'tags this -> ([`L_n_37143[@js 37143]] [@js.enum]) [@@js.get "SYNC_GPU_COMMANDS_COMPLETE"]
  val get_UNSIGNALED: 'tags this -> ([`L_n_37144[@js 37144]] [@js.enum]) [@@js.get "UNSIGNALED"]
  val get_SIGNALED: 'tags this -> ([`L_n_37145[@js 37145]] [@js.enum]) [@@js.get "SIGNALED"]
  val get_ALREADY_SIGNALED: 'tags this -> ([`L_n_37146[@js 37146]] [@js.enum]) [@@js.get "ALREADY_SIGNALED"]
  val get_TIMEOUT_EXPIRED: 'tags this -> ([`L_n_37147[@js 37147]] [@js.enum]) [@@js.get "TIMEOUT_EXPIRED"]
  val get_CONDITION_SATISFIED: 'tags this -> ([`L_n_37148[@js 37148]] [@js.enum]) [@@js.get "CONDITION_SATISFIED"]
  val get_WAIT_FAILED: 'tags this -> ([`L_n_37149[@js 37149]] [@js.enum]) [@@js.get "WAIT_FAILED"]
  val get_SYNC_FLUSH_COMMANDS_BIT: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SYNC_FLUSH_COMMANDS_BIT"]
  val get_VERTEX_ATTRIB_ARRAY_DIVISOR: 'tags this -> ([`L_n_35070[@js 35070]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_DIVISOR"]
  val get_ANY_SAMPLES_PASSED: 'tags this -> ([`L_n_35887[@js 35887]] [@js.enum]) [@@js.get "ANY_SAMPLES_PASSED"]
  val get_ANY_SAMPLES_PASSED_CONSERVATIVE: 'tags this -> ([`L_n_36202[@js 36202]] [@js.enum]) [@@js.get "ANY_SAMPLES_PASSED_CONSERVATIVE"]
  val get_SAMPLER_BINDING: 'tags this -> ([`L_n_35097[@js 35097]] [@js.enum]) [@@js.get "SAMPLER_BINDING"]
  val get_RGB10_A2UI: 'tags this -> ([`L_n_36975[@js 36975]] [@js.enum]) [@@js.get "RGB10_A2UI"]
  val get_INT_2_10_10_10_REV: 'tags this -> ([`L_n_36255[@js 36255]] [@js.enum]) [@@js.get "INT_2_10_10_10_REV"]
  val get_TRANSFORM_FEEDBACK: 'tags this -> ([`L_n_36386[@js 36386]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK"]
  val get_TRANSFORM_FEEDBACK_PAUSED: 'tags this -> ([`L_n_36387[@js 36387]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_PAUSED"]
  val get_TRANSFORM_FEEDBACK_ACTIVE: 'tags this -> ([`L_n_36388[@js 36388]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_ACTIVE"]
  val get_TRANSFORM_FEEDBACK_BINDING: 'tags this -> ([`L_n_36389[@js 36389]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BINDING"]
  val get_TEXTURE_IMMUTABLE_FORMAT: 'tags this -> ([`L_n_37167[@js 37167]] [@js.enum]) [@@js.get "TEXTURE_IMMUTABLE_FORMAT"]
  val get_MAX_ELEMENT_INDEX: 'tags this -> ([`L_n_36203[@js 36203]] [@js.enum]) [@@js.get "MAX_ELEMENT_INDEX"]
  val get_TEXTURE_IMMUTABLE_LEVELS: 'tags this -> ([`L_n_33503[@js 33503]] [@js.enum]) [@@js.get "TEXTURE_IMMUTABLE_LEVELS"]
  val get_TIMEOUT_IGNORED: 'tags this -> ([`L_n_minus1[@js -1]] [@js.enum]) [@@js.get "TIMEOUT_IGNORED"]
  val get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 'tags this -> ([`L_n_37447[@js 37447]] [@js.enum]) [@@js.get "MAX_CLIENT_WAIT_TIMEOUT_WEBGL"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and WebGL2RenderingContextOverloads : sig
  type t = [`WebGL2RenderingContextOverloads] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGL2RenderingContextOverloads]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGL2RenderingContextOverloads]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGL2RenderingContextOverloads ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1fv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLfloat.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform1fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1iv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLint.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform1iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2fv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLfloat.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2iv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLint.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform2iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3fv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLfloat.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3iv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLint.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform3iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4fv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLfloat.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4iv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLint.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform4iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix2fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix3fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix4fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData) *)
  val bufferData: 'tags this -> target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit [@@js.call "bufferData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData) *)
  val bufferData': 'tags this -> target:GLenum.t -> srcData:BufferSource.t option -> usage:GLenum.t -> unit [@@js.call "bufferData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData) *)
  val bufferData'': 'tags this -> target:GLenum.t -> srcData:ArrayBufferView.t -> usage:GLenum.t -> srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit [@@js.call "bufferData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferSubData) *)
  val bufferSubData: 'tags this -> target:GLenum.t -> dstByteOffset:GLintptr.t -> srcData:BufferSource.t -> unit [@@js.call "bufferSubData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferSubData) *)
  val bufferSubData': 'tags this -> target:GLenum.t -> dstByteOffset:GLintptr.t -> srcData:ArrayBufferView.t -> srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit [@@js.call "bufferSubData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexImage2D) *)
  val compressedTexImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> imageSize:GLsizei.t -> offset:GLintptr.t -> unit [@@js.call "compressedTexImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexImage2D) *)
  val compressedTexImage2D': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> srcData:ArrayBufferView.t -> ?srcOffset:GLuint.t -> ?srcLengthOverride:GLuint.t -> unit -> unit [@@js.call "compressedTexImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D) *)
  val compressedTexSubImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> imageSize:GLsizei.t -> offset:GLintptr.t -> unit [@@js.call "compressedTexSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D) *)
  val compressedTexSubImage2D': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> srcData:ArrayBufferView.t -> ?srcOffset:GLuint.t -> ?srcLengthOverride:GLuint.t -> unit -> unit [@@js.call "compressedTexSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels) *)
  val readPixels: 'tags this -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> dstData:ArrayBufferView.t option -> unit [@@js.call "readPixels"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels) *)
  val readPixels': 'tags this -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> offset:GLintptr.t -> unit [@@js.call "readPixels"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels) *)
  val readPixels'': 'tags this -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> dstData:ArrayBufferView.t -> dstOffset:GLuint.t -> unit [@@js.call "readPixels"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D) *)
  val texImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> pixels:ArrayBufferView.t option -> unit [@@js.call "texImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D) *)
  val texImage2D': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> format:GLenum.t -> type_:GLenum.t -> source:TexImageSource.t -> unit [@@js.call "texImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D) *)
  val texImage2D'': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> pboOffset:GLintptr.t -> unit [@@js.call "texImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D) *)
  val texImage2D''': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> source:TexImageSource.t -> unit [@@js.call "texImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D) *)
  val texImage2D'''': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> srcData:ArrayBufferView.t -> srcOffset:GLuint.t -> unit [@@js.call "texImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D) *)
  val texSubImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> pixels:ArrayBufferView.t option -> unit [@@js.call "texSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D) *)
  val texSubImage2D': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> format:GLenum.t -> type_:GLenum.t -> source:TexImageSource.t -> unit [@@js.call "texSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D) *)
  val texSubImage2D'': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> pboOffset:GLintptr.t -> unit [@@js.call "texSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D) *)
  val texSubImage2D''': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> source:TexImageSource.t -> unit [@@js.call "texSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D) *)
  val texSubImage2D'''': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> srcData:ArrayBufferView.t -> srcOffset:GLuint.t -> unit [@@js.call "texSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1fv': 'tags this -> location:WebGLUniformLocation.t option -> data:Float32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform1fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1iv': 'tags this -> location:WebGLUniformLocation.t option -> data:Int32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform1iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2fv': 'tags this -> location:WebGLUniformLocation.t option -> data:Float32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2iv': 'tags this -> location:WebGLUniformLocation.t option -> data:Int32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform2iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3fv': 'tags this -> location:WebGLUniformLocation.t option -> data:Float32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3iv': 'tags this -> location:WebGLUniformLocation.t option -> data:Int32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform3iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4fv': 'tags this -> location:WebGLUniformLocation.t option -> data:Float32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4iv': 'tags this -> location:WebGLUniformLocation.t option -> data:Int32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform4iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix2fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix3fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix4fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix4fv"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML <canvas> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext)
*)
and[@js.scope "WebGLRenderingContext"] WebGLRenderingContext : sig
  type t = [`WebGLRenderingContext | `WebGLRenderingContextBase | `WebGLRenderingContextOverloads] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLRenderingContext | `WebGLRenderingContextBase | `WebGLRenderingContextOverloads]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLRenderingContext | `WebGLRenderingContextBase | `WebGLRenderingContextOverloads]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLRenderingContext ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val depth_buffer_bit: unit -> ([`L_n_256[@js 256]] [@js.enum]) [@@js.get "DEPTH_BUFFER_BIT"]
  val stencil_buffer_bit: unit -> ([`L_n_1024[@js 1024]] [@js.enum]) [@@js.get "STENCIL_BUFFER_BIT"]
  val color_buffer_bit: unit -> ([`L_n_16384[@js 16384]] [@js.enum]) [@@js.get "COLOR_BUFFER_BIT"]
  val points: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "POINTS"]
  val lines: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "LINES"]
  val line_loop: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "LINE_LOOP"]
  val line_strip: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "LINE_STRIP"]
  val triangles: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "TRIANGLES"]
  val triangle_strip: unit -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "TRIANGLE_STRIP"]
  val triangle_fan: unit -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "TRIANGLE_FAN"]
  val zero: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "ZERO"]
  val one: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "ONE"]
  val src_color: unit -> ([`L_n_768[@js 768]] [@js.enum]) [@@js.get "SRC_COLOR"]
  val one_minus_src_color: unit -> ([`L_n_769[@js 769]] [@js.enum]) [@@js.get "ONE_MINUS_SRC_COLOR"]
  val src_alpha: unit -> ([`L_n_770[@js 770]] [@js.enum]) [@@js.get "SRC_ALPHA"]
  val one_minus_src_alpha: unit -> ([`L_n_771[@js 771]] [@js.enum]) [@@js.get "ONE_MINUS_SRC_ALPHA"]
  val dst_alpha: unit -> ([`L_n_772[@js 772]] [@js.enum]) [@@js.get "DST_ALPHA"]
  val one_minus_dst_alpha: unit -> ([`L_n_773[@js 773]] [@js.enum]) [@@js.get "ONE_MINUS_DST_ALPHA"]
  val dst_color: unit -> ([`L_n_774[@js 774]] [@js.enum]) [@@js.get "DST_COLOR"]
  val one_minus_dst_color: unit -> ([`L_n_775[@js 775]] [@js.enum]) [@@js.get "ONE_MINUS_DST_COLOR"]
  val src_alpha_saturate: unit -> ([`L_n_776[@js 776]] [@js.enum]) [@@js.get "SRC_ALPHA_SATURATE"]
  val func_add: unit -> ([`L_n_32774[@js 32774]] [@js.enum]) [@@js.get "FUNC_ADD"]
  val blend_equation: unit -> ([`L_n_32777[@js 32777]] [@js.enum]) [@@js.get "BLEND_EQUATION"]
  val blend_equation_rgb: unit -> ([`L_n_32777[@js 32777]] [@js.enum]) [@@js.get "BLEND_EQUATION_RGB"]
  val blend_equation_alpha: unit -> ([`L_n_34877[@js 34877]] [@js.enum]) [@@js.get "BLEND_EQUATION_ALPHA"]
  val func_subtract: unit -> ([`L_n_32778[@js 32778]] [@js.enum]) [@@js.get "FUNC_SUBTRACT"]
  val func_reverse_subtract: unit -> ([`L_n_32779[@js 32779]] [@js.enum]) [@@js.get "FUNC_REVERSE_SUBTRACT"]
  val blend_dst_rgb: unit -> ([`L_n_32968[@js 32968]] [@js.enum]) [@@js.get "BLEND_DST_RGB"]
  val blend_src_rgb: unit -> ([`L_n_32969[@js 32969]] [@js.enum]) [@@js.get "BLEND_SRC_RGB"]
  val blend_dst_alpha: unit -> ([`L_n_32970[@js 32970]] [@js.enum]) [@@js.get "BLEND_DST_ALPHA"]
  val blend_src_alpha: unit -> ([`L_n_32971[@js 32971]] [@js.enum]) [@@js.get "BLEND_SRC_ALPHA"]
  val constant_color: unit -> ([`L_n_32769[@js 32769]] [@js.enum]) [@@js.get "CONSTANT_COLOR"]
  val one_minus_constant_color: unit -> ([`L_n_32770[@js 32770]] [@js.enum]) [@@js.get "ONE_MINUS_CONSTANT_COLOR"]
  val constant_alpha: unit -> ([`L_n_32771[@js 32771]] [@js.enum]) [@@js.get "CONSTANT_ALPHA"]
  val one_minus_constant_alpha: unit -> ([`L_n_32772[@js 32772]] [@js.enum]) [@@js.get "ONE_MINUS_CONSTANT_ALPHA"]
  val blend_color: unit -> ([`L_n_32773[@js 32773]] [@js.enum]) [@@js.get "BLEND_COLOR"]
  val array_buffer: unit -> ([`L_n_34962[@js 34962]] [@js.enum]) [@@js.get "ARRAY_BUFFER"]
  val element_array_buffer: unit -> ([`L_n_34963[@js 34963]] [@js.enum]) [@@js.get "ELEMENT_ARRAY_BUFFER"]
  val array_buffer_binding: unit -> ([`L_n_34964[@js 34964]] [@js.enum]) [@@js.get "ARRAY_BUFFER_BINDING"]
  val element_array_buffer_binding: unit -> ([`L_n_34965[@js 34965]] [@js.enum]) [@@js.get "ELEMENT_ARRAY_BUFFER_BINDING"]
  val stream_draw: unit -> ([`L_n_35040[@js 35040]] [@js.enum]) [@@js.get "STREAM_DRAW"]
  val static_draw: unit -> ([`L_n_35044[@js 35044]] [@js.enum]) [@@js.get "STATIC_DRAW"]
  val dynamic_draw: unit -> ([`L_n_35048[@js 35048]] [@js.enum]) [@@js.get "DYNAMIC_DRAW"]
  val buffer_size: unit -> ([`L_n_34660[@js 34660]] [@js.enum]) [@@js.get "BUFFER_SIZE"]
  val buffer_usage: unit -> ([`L_n_34661[@js 34661]] [@js.enum]) [@@js.get "BUFFER_USAGE"]
  val current_vertex_attrib: unit -> ([`L_n_34342[@js 34342]] [@js.enum]) [@@js.get "CURRENT_VERTEX_ATTRIB"]
  val front: unit -> ([`L_n_1028[@js 1028]] [@js.enum]) [@@js.get "FRONT"]
  val back: unit -> ([`L_n_1029[@js 1029]] [@js.enum]) [@@js.get "BACK"]
  val front_and_back: unit -> ([`L_n_1032[@js 1032]] [@js.enum]) [@@js.get "FRONT_AND_BACK"]
  val cull_face: unit -> ([`L_n_2884[@js 2884]] [@js.enum]) [@@js.get "CULL_FACE"]
  val blend: unit -> ([`L_n_3042[@js 3042]] [@js.enum]) [@@js.get "BLEND"]
  val dither: unit -> ([`L_n_3024[@js 3024]] [@js.enum]) [@@js.get "DITHER"]
  val stencil_test: unit -> ([`L_n_2960[@js 2960]] [@js.enum]) [@@js.get "STENCIL_TEST"]
  val depth_test: unit -> ([`L_n_2929[@js 2929]] [@js.enum]) [@@js.get "DEPTH_TEST"]
  val scissor_test: unit -> ([`L_n_3089[@js 3089]] [@js.enum]) [@@js.get "SCISSOR_TEST"]
  val polygon_offset_fill: unit -> ([`L_n_32823[@js 32823]] [@js.enum]) [@@js.get "POLYGON_OFFSET_FILL"]
  val sample_alpha_to_coverage: unit -> ([`L_n_32926[@js 32926]] [@js.enum]) [@@js.get "SAMPLE_ALPHA_TO_COVERAGE"]
  val sample_coverage: unit -> ([`L_n_32928[@js 32928]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE"]
  val no_error: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NO_ERROR"]
  val invalid_enum: unit -> ([`L_n_1280[@js 1280]] [@js.enum]) [@@js.get "INVALID_ENUM"]
  val invalid_value: unit -> ([`L_n_1281[@js 1281]] [@js.enum]) [@@js.get "INVALID_VALUE"]
  val invalid_operation: unit -> ([`L_n_1282[@js 1282]] [@js.enum]) [@@js.get "INVALID_OPERATION"]
  val out_of_memory: unit -> ([`L_n_1285[@js 1285]] [@js.enum]) [@@js.get "OUT_OF_MEMORY"]
  val cw: unit -> ([`L_n_2304[@js 2304]] [@js.enum]) [@@js.get "CW"]
  val ccw: unit -> ([`L_n_2305[@js 2305]] [@js.enum]) [@@js.get "CCW"]
  val line_width: unit -> ([`L_n_2849[@js 2849]] [@js.enum]) [@@js.get "LINE_WIDTH"]
  val aliased_point_size_range: unit -> ([`L_n_33901[@js 33901]] [@js.enum]) [@@js.get "ALIASED_POINT_SIZE_RANGE"]
  val aliased_line_width_range: unit -> ([`L_n_33902[@js 33902]] [@js.enum]) [@@js.get "ALIASED_LINE_WIDTH_RANGE"]
  val cull_face_mode: unit -> ([`L_n_2885[@js 2885]] [@js.enum]) [@@js.get "CULL_FACE_MODE"]
  val front_face: unit -> ([`L_n_2886[@js 2886]] [@js.enum]) [@@js.get "FRONT_FACE"]
  val depth_range: unit -> ([`L_n_2928[@js 2928]] [@js.enum]) [@@js.get "DEPTH_RANGE"]
  val depth_writemask: unit -> ([`L_n_2930[@js 2930]] [@js.enum]) [@@js.get "DEPTH_WRITEMASK"]
  val depth_clear_value: unit -> ([`L_n_2931[@js 2931]] [@js.enum]) [@@js.get "DEPTH_CLEAR_VALUE"]
  val depth_func: unit -> ([`L_n_2932[@js 2932]] [@js.enum]) [@@js.get "DEPTH_FUNC"]
  val stencil_clear_value: unit -> ([`L_n_2961[@js 2961]] [@js.enum]) [@@js.get "STENCIL_CLEAR_VALUE"]
  val stencil_func: unit -> ([`L_n_2962[@js 2962]] [@js.enum]) [@@js.get "STENCIL_FUNC"]
  val stencil_fail: unit -> ([`L_n_2964[@js 2964]] [@js.enum]) [@@js.get "STENCIL_FAIL"]
  val stencil_pass_depth_fail: unit -> ([`L_n_2965[@js 2965]] [@js.enum]) [@@js.get "STENCIL_PASS_DEPTH_FAIL"]
  val stencil_pass_depth_pass: unit -> ([`L_n_2966[@js 2966]] [@js.enum]) [@@js.get "STENCIL_PASS_DEPTH_PASS"]
  val stencil_ref: unit -> ([`L_n_2967[@js 2967]] [@js.enum]) [@@js.get "STENCIL_REF"]
  val stencil_value_mask: unit -> ([`L_n_2963[@js 2963]] [@js.enum]) [@@js.get "STENCIL_VALUE_MASK"]
  val stencil_writemask: unit -> ([`L_n_2968[@js 2968]] [@js.enum]) [@@js.get "STENCIL_WRITEMASK"]
  val stencil_back_func: unit -> ([`L_n_34816[@js 34816]] [@js.enum]) [@@js.get "STENCIL_BACK_FUNC"]
  val stencil_back_fail: unit -> ([`L_n_34817[@js 34817]] [@js.enum]) [@@js.get "STENCIL_BACK_FAIL"]
  val stencil_back_pass_depth_fail: unit -> ([`L_n_34818[@js 34818]] [@js.enum]) [@@js.get "STENCIL_BACK_PASS_DEPTH_FAIL"]
  val stencil_back_pass_depth_pass: unit -> ([`L_n_34819[@js 34819]] [@js.enum]) [@@js.get "STENCIL_BACK_PASS_DEPTH_PASS"]
  val stencil_back_ref: unit -> ([`L_n_36003[@js 36003]] [@js.enum]) [@@js.get "STENCIL_BACK_REF"]
  val stencil_back_value_mask: unit -> ([`L_n_36004[@js 36004]] [@js.enum]) [@@js.get "STENCIL_BACK_VALUE_MASK"]
  val stencil_back_writemask: unit -> ([`L_n_36005[@js 36005]] [@js.enum]) [@@js.get "STENCIL_BACK_WRITEMASK"]
  val viewport: unit -> ([`L_n_2978[@js 2978]] [@js.enum]) [@@js.get "VIEWPORT"]
  val scissor_box: unit -> ([`L_n_3088[@js 3088]] [@js.enum]) [@@js.get "SCISSOR_BOX"]
  val color_clear_value: unit -> ([`L_n_3106[@js 3106]] [@js.enum]) [@@js.get "COLOR_CLEAR_VALUE"]
  val color_writemask: unit -> ([`L_n_3107[@js 3107]] [@js.enum]) [@@js.get "COLOR_WRITEMASK"]
  val unpack_alignment: unit -> ([`L_n_3317[@js 3317]] [@js.enum]) [@@js.get "UNPACK_ALIGNMENT"]
  val pack_alignment: unit -> ([`L_n_3333[@js 3333]] [@js.enum]) [@@js.get "PACK_ALIGNMENT"]
  val max_texture_size: unit -> ([`L_n_3379[@js 3379]] [@js.enum]) [@@js.get "MAX_TEXTURE_SIZE"]
  val max_viewport_dims: unit -> ([`L_n_3386[@js 3386]] [@js.enum]) [@@js.get "MAX_VIEWPORT_DIMS"]
  val subpixel_bits: unit -> ([`L_n_3408[@js 3408]] [@js.enum]) [@@js.get "SUBPIXEL_BITS"]
  val red_bits: unit -> ([`L_n_3410[@js 3410]] [@js.enum]) [@@js.get "RED_BITS"]
  val green_bits: unit -> ([`L_n_3411[@js 3411]] [@js.enum]) [@@js.get "GREEN_BITS"]
  val blue_bits: unit -> ([`L_n_3412[@js 3412]] [@js.enum]) [@@js.get "BLUE_BITS"]
  val alpha_bits: unit -> ([`L_n_3413[@js 3413]] [@js.enum]) [@@js.get "ALPHA_BITS"]
  val depth_bits: unit -> ([`L_n_3414[@js 3414]] [@js.enum]) [@@js.get "DEPTH_BITS"]
  val stencil_bits: unit -> ([`L_n_3415[@js 3415]] [@js.enum]) [@@js.get "STENCIL_BITS"]
  val polygon_offset_units: unit -> ([`L_n_10752[@js 10752]] [@js.enum]) [@@js.get "POLYGON_OFFSET_UNITS"]
  val polygon_offset_factor: unit -> ([`L_n_32824[@js 32824]] [@js.enum]) [@@js.get "POLYGON_OFFSET_FACTOR"]
  val texture_binding_2d: unit -> ([`L_n_32873[@js 32873]] [@js.enum]) [@@js.get "TEXTURE_BINDING_2D"]
  val sample_buffers: unit -> ([`L_n_32936[@js 32936]] [@js.enum]) [@@js.get "SAMPLE_BUFFERS"]
  val samples: unit -> ([`L_n_32937[@js 32937]] [@js.enum]) [@@js.get "SAMPLES"]
  val sample_coverage_value: unit -> ([`L_n_32938[@js 32938]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE_VALUE"]
  val sample_coverage_invert: unit -> ([`L_n_32939[@js 32939]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE_INVERT"]
  val compressed_texture_formats: unit -> ([`L_n_34467[@js 34467]] [@js.enum]) [@@js.get "COMPRESSED_TEXTURE_FORMATS"]
  val dont_care: unit -> ([`L_n_4352[@js 4352]] [@js.enum]) [@@js.get "DONT_CARE"]
  val fastest: unit -> ([`L_n_4353[@js 4353]] [@js.enum]) [@@js.get "FASTEST"]
  val nicest: unit -> ([`L_n_4354[@js 4354]] [@js.enum]) [@@js.get "NICEST"]
  val generate_mipmap_hint: unit -> ([`L_n_33170[@js 33170]] [@js.enum]) [@@js.get "GENERATE_MIPMAP_HINT"]
  val byte: unit -> ([`L_n_5120[@js 5120]] [@js.enum]) [@@js.get "BYTE"]
  val unsigned_byte: unit -> ([`L_n_5121[@js 5121]] [@js.enum]) [@@js.get "UNSIGNED_BYTE"]
  val short: unit -> ([`L_n_5122[@js 5122]] [@js.enum]) [@@js.get "SHORT"]
  val unsigned_short: unit -> ([`L_n_5123[@js 5123]] [@js.enum]) [@@js.get "UNSIGNED_SHORT"]
  val int: unit -> ([`L_n_5124[@js 5124]] [@js.enum]) [@@js.get "INT"]
  val unsigned_int: unit -> ([`L_n_5125[@js 5125]] [@js.enum]) [@@js.get "UNSIGNED_INT"]
  val float: unit -> ([`L_n_5126[@js 5126]] [@js.enum]) [@@js.get "FLOAT"]
  val depth_component: unit -> ([`L_n_6402[@js 6402]] [@js.enum]) [@@js.get "DEPTH_COMPONENT"]
  val alpha: unit -> ([`L_n_6406[@js 6406]] [@js.enum]) [@@js.get "ALPHA"]
  val rgb: unit -> ([`L_n_6407[@js 6407]] [@js.enum]) [@@js.get "RGB"]
  val rgba: unit -> ([`L_n_6408[@js 6408]] [@js.enum]) [@@js.get "RGBA"]
  val luminance: unit -> ([`L_n_6409[@js 6409]] [@js.enum]) [@@js.get "LUMINANCE"]
  val luminance_alpha: unit -> ([`L_n_6410[@js 6410]] [@js.enum]) [@@js.get "LUMINANCE_ALPHA"]
  val unsigned_short_4_4_4_4: unit -> ([`L_n_32819[@js 32819]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_4_4_4_4"]
  val unsigned_short_5_5_5_1: unit -> ([`L_n_32820[@js 32820]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_5_5_5_1"]
  val unsigned_short_5_6_5: unit -> ([`L_n_33635[@js 33635]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_5_6_5"]
  val fragment_shader: unit -> ([`L_n_35632[@js 35632]] [@js.enum]) [@@js.get "FRAGMENT_SHADER"]
  val vertex_shader: unit -> ([`L_n_35633[@js 35633]] [@js.enum]) [@@js.get "VERTEX_SHADER"]
  val max_vertex_attribs: unit -> ([`L_n_34921[@js 34921]] [@js.enum]) [@@js.get "MAX_VERTEX_ATTRIBS"]
  val max_vertex_uniform_vectors: unit -> ([`L_n_36347[@js 36347]] [@js.enum]) [@@js.get "MAX_VERTEX_UNIFORM_VECTORS"]
  val max_varying_vectors: unit -> ([`L_n_36348[@js 36348]] [@js.enum]) [@@js.get "MAX_VARYING_VECTORS"]
  val max_combined_texture_image_units: unit -> ([`L_n_35661[@js 35661]] [@js.enum]) [@@js.get "MAX_COMBINED_TEXTURE_IMAGE_UNITS"]
  val max_vertex_texture_image_units: unit -> ([`L_n_35660[@js 35660]] [@js.enum]) [@@js.get "MAX_VERTEX_TEXTURE_IMAGE_UNITS"]
  val max_texture_image_units: unit -> ([`L_n_34930[@js 34930]] [@js.enum]) [@@js.get "MAX_TEXTURE_IMAGE_UNITS"]
  val max_fragment_uniform_vectors: unit -> ([`L_n_36349[@js 36349]] [@js.enum]) [@@js.get "MAX_FRAGMENT_UNIFORM_VECTORS"]
  val shader_type: unit -> ([`L_n_35663[@js 35663]] [@js.enum]) [@@js.get "SHADER_TYPE"]
  val delete_status: unit -> ([`L_n_35712[@js 35712]] [@js.enum]) [@@js.get "DELETE_STATUS"]
  val link_status: unit -> ([`L_n_35714[@js 35714]] [@js.enum]) [@@js.get "LINK_STATUS"]
  val validate_status: unit -> ([`L_n_35715[@js 35715]] [@js.enum]) [@@js.get "VALIDATE_STATUS"]
  val attached_shaders: unit -> ([`L_n_35717[@js 35717]] [@js.enum]) [@@js.get "ATTACHED_SHADERS"]
  val active_uniforms: unit -> ([`L_n_35718[@js 35718]] [@js.enum]) [@@js.get "ACTIVE_UNIFORMS"]
  val active_attributes: unit -> ([`L_n_35721[@js 35721]] [@js.enum]) [@@js.get "ACTIVE_ATTRIBUTES"]
  val shading_language_version: unit -> ([`L_n_35724[@js 35724]] [@js.enum]) [@@js.get "SHADING_LANGUAGE_VERSION"]
  val current_program: unit -> ([`L_n_35725[@js 35725]] [@js.enum]) [@@js.get "CURRENT_PROGRAM"]
  val never: unit -> ([`L_n_512[@js 512]] [@js.enum]) [@@js.get "NEVER"]
  val less: unit -> ([`L_n_513[@js 513]] [@js.enum]) [@@js.get "LESS"]
  val equal: unit -> ([`L_n_514[@js 514]] [@js.enum]) [@@js.get "EQUAL"]
  val lequal: unit -> ([`L_n_515[@js 515]] [@js.enum]) [@@js.get "LEQUAL"]
  val greater: unit -> ([`L_n_516[@js 516]] [@js.enum]) [@@js.get "GREATER"]
  val notequal: unit -> ([`L_n_517[@js 517]] [@js.enum]) [@@js.get "NOTEQUAL"]
  val gequal: unit -> ([`L_n_518[@js 518]] [@js.enum]) [@@js.get "GEQUAL"]
  val always: unit -> ([`L_n_519[@js 519]] [@js.enum]) [@@js.get "ALWAYS"]
  val keep: unit -> ([`L_n_7680[@js 7680]] [@js.enum]) [@@js.get "KEEP"]
  val replace: unit -> ([`L_n_7681[@js 7681]] [@js.enum]) [@@js.get "REPLACE"]
  val incr: unit -> ([`L_n_7682[@js 7682]] [@js.enum]) [@@js.get "INCR"]
  val decr: unit -> ([`L_n_7683[@js 7683]] [@js.enum]) [@@js.get "DECR"]
  val invert: unit -> ([`L_n_5386[@js 5386]] [@js.enum]) [@@js.get "INVERT"]
  val incr_wrap: unit -> ([`L_n_34055[@js 34055]] [@js.enum]) [@@js.get "INCR_WRAP"]
  val decr_wrap: unit -> ([`L_n_34056[@js 34056]] [@js.enum]) [@@js.get "DECR_WRAP"]
  val vendor: unit -> ([`L_n_7936[@js 7936]] [@js.enum]) [@@js.get "VENDOR"]
  val renderer: unit -> ([`L_n_7937[@js 7937]] [@js.enum]) [@@js.get "RENDERER"]
  val version: unit -> ([`L_n_7938[@js 7938]] [@js.enum]) [@@js.get "VERSION"]
  val nearest: unit -> ([`L_n_9728[@js 9728]] [@js.enum]) [@@js.get "NEAREST"]
  val linear: unit -> ([`L_n_9729[@js 9729]] [@js.enum]) [@@js.get "LINEAR"]
  val nearest_mipmap_nearest: unit -> ([`L_n_9984[@js 9984]] [@js.enum]) [@@js.get "NEAREST_MIPMAP_NEAREST"]
  val linear_mipmap_nearest: unit -> ([`L_n_9985[@js 9985]] [@js.enum]) [@@js.get "LINEAR_MIPMAP_NEAREST"]
  val nearest_mipmap_linear: unit -> ([`L_n_9986[@js 9986]] [@js.enum]) [@@js.get "NEAREST_MIPMAP_LINEAR"]
  val linear_mipmap_linear: unit -> ([`L_n_9987[@js 9987]] [@js.enum]) [@@js.get "LINEAR_MIPMAP_LINEAR"]
  val texture_mag_filter: unit -> ([`L_n_10240[@js 10240]] [@js.enum]) [@@js.get "TEXTURE_MAG_FILTER"]
  val texture_min_filter: unit -> ([`L_n_10241[@js 10241]] [@js.enum]) [@@js.get "TEXTURE_MIN_FILTER"]
  val texture_wrap_s: unit -> ([`L_n_10242[@js 10242]] [@js.enum]) [@@js.get "TEXTURE_WRAP_S"]
  val texture_wrap_t: unit -> ([`L_n_10243[@js 10243]] [@js.enum]) [@@js.get "TEXTURE_WRAP_T"]
  val texture_2d: unit -> ([`L_n_3553[@js 3553]] [@js.enum]) [@@js.get "TEXTURE_2D"]
  val texture: unit -> ([`L_n_5890[@js 5890]] [@js.enum]) [@@js.get "TEXTURE"]
  val texture_cube_map: unit -> ([`L_n_34067[@js 34067]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP"]
  val texture_binding_cube_map: unit -> ([`L_n_34068[@js 34068]] [@js.enum]) [@@js.get "TEXTURE_BINDING_CUBE_MAP"]
  val texture_cube_map_positive_x: unit -> ([`L_n_34069[@js 34069]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_X"]
  val texture_cube_map_negative_x: unit -> ([`L_n_34070[@js 34070]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_X"]
  val texture_cube_map_positive_y: unit -> ([`L_n_34071[@js 34071]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_Y"]
  val texture_cube_map_negative_y: unit -> ([`L_n_34072[@js 34072]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_Y"]
  val texture_cube_map_positive_z: unit -> ([`L_n_34073[@js 34073]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_Z"]
  val texture_cube_map_negative_z: unit -> ([`L_n_34074[@js 34074]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_Z"]
  val max_cube_map_texture_size: unit -> ([`L_n_34076[@js 34076]] [@js.enum]) [@@js.get "MAX_CUBE_MAP_TEXTURE_SIZE"]
  val texture0: unit -> ([`L_n_33984[@js 33984]] [@js.enum]) [@@js.get "TEXTURE0"]
  val texture1: unit -> ([`L_n_33985[@js 33985]] [@js.enum]) [@@js.get "TEXTURE1"]
  val texture2: unit -> ([`L_n_33986[@js 33986]] [@js.enum]) [@@js.get "TEXTURE2"]
  val texture3: unit -> ([`L_n_33987[@js 33987]] [@js.enum]) [@@js.get "TEXTURE3"]
  val texture4: unit -> ([`L_n_33988[@js 33988]] [@js.enum]) [@@js.get "TEXTURE4"]
  val texture5: unit -> ([`L_n_33989[@js 33989]] [@js.enum]) [@@js.get "TEXTURE5"]
  val texture6: unit -> ([`L_n_33990[@js 33990]] [@js.enum]) [@@js.get "TEXTURE6"]
  val texture7: unit -> ([`L_n_33991[@js 33991]] [@js.enum]) [@@js.get "TEXTURE7"]
  val texture8: unit -> ([`L_n_33992[@js 33992]] [@js.enum]) [@@js.get "TEXTURE8"]
  val texture9: unit -> ([`L_n_33993[@js 33993]] [@js.enum]) [@@js.get "TEXTURE9"]
  val texture10: unit -> ([`L_n_33994[@js 33994]] [@js.enum]) [@@js.get "TEXTURE10"]
  val texture11: unit -> ([`L_n_33995[@js 33995]] [@js.enum]) [@@js.get "TEXTURE11"]
  val texture12: unit -> ([`L_n_33996[@js 33996]] [@js.enum]) [@@js.get "TEXTURE12"]
  val texture13: unit -> ([`L_n_33997[@js 33997]] [@js.enum]) [@@js.get "TEXTURE13"]
  val texture14: unit -> ([`L_n_33998[@js 33998]] [@js.enum]) [@@js.get "TEXTURE14"]
  val texture15: unit -> ([`L_n_33999[@js 33999]] [@js.enum]) [@@js.get "TEXTURE15"]
  val texture16: unit -> ([`L_n_34000[@js 34000]] [@js.enum]) [@@js.get "TEXTURE16"]
  val texture17: unit -> ([`L_n_34001[@js 34001]] [@js.enum]) [@@js.get "TEXTURE17"]
  val texture18: unit -> ([`L_n_34002[@js 34002]] [@js.enum]) [@@js.get "TEXTURE18"]
  val texture19: unit -> ([`L_n_34003[@js 34003]] [@js.enum]) [@@js.get "TEXTURE19"]
  val texture20: unit -> ([`L_n_34004[@js 34004]] [@js.enum]) [@@js.get "TEXTURE20"]
  val texture21: unit -> ([`L_n_34005[@js 34005]] [@js.enum]) [@@js.get "TEXTURE21"]
  val texture22: unit -> ([`L_n_34006[@js 34006]] [@js.enum]) [@@js.get "TEXTURE22"]
  val texture23: unit -> ([`L_n_34007[@js 34007]] [@js.enum]) [@@js.get "TEXTURE23"]
  val texture24: unit -> ([`L_n_34008[@js 34008]] [@js.enum]) [@@js.get "TEXTURE24"]
  val texture25: unit -> ([`L_n_34009[@js 34009]] [@js.enum]) [@@js.get "TEXTURE25"]
  val texture26: unit -> ([`L_n_34010[@js 34010]] [@js.enum]) [@@js.get "TEXTURE26"]
  val texture27: unit -> ([`L_n_34011[@js 34011]] [@js.enum]) [@@js.get "TEXTURE27"]
  val texture28: unit -> ([`L_n_34012[@js 34012]] [@js.enum]) [@@js.get "TEXTURE28"]
  val texture29: unit -> ([`L_n_34013[@js 34013]] [@js.enum]) [@@js.get "TEXTURE29"]
  val texture30: unit -> ([`L_n_34014[@js 34014]] [@js.enum]) [@@js.get "TEXTURE30"]
  val texture31: unit -> ([`L_n_34015[@js 34015]] [@js.enum]) [@@js.get "TEXTURE31"]
  val active_texture: unit -> ([`L_n_34016[@js 34016]] [@js.enum]) [@@js.get "ACTIVE_TEXTURE"]
  val repeat: unit -> ([`L_n_10497[@js 10497]] [@js.enum]) [@@js.get "REPEAT"]
  val clamp_to_edge: unit -> ([`L_n_33071[@js 33071]] [@js.enum]) [@@js.get "CLAMP_TO_EDGE"]
  val mirrored_repeat: unit -> ([`L_n_33648[@js 33648]] [@js.enum]) [@@js.get "MIRRORED_REPEAT"]
  val float_vec2: unit -> ([`L_n_35664[@js 35664]] [@js.enum]) [@@js.get "FLOAT_VEC2"]
  val float_vec3: unit -> ([`L_n_35665[@js 35665]] [@js.enum]) [@@js.get "FLOAT_VEC3"]
  val float_vec4: unit -> ([`L_n_35666[@js 35666]] [@js.enum]) [@@js.get "FLOAT_VEC4"]
  val int_vec2: unit -> ([`L_n_35667[@js 35667]] [@js.enum]) [@@js.get "INT_VEC2"]
  val int_vec3: unit -> ([`L_n_35668[@js 35668]] [@js.enum]) [@@js.get "INT_VEC3"]
  val int_vec4: unit -> ([`L_n_35669[@js 35669]] [@js.enum]) [@@js.get "INT_VEC4"]
  val bool: unit -> ([`L_n_35670[@js 35670]] [@js.enum]) [@@js.get "BOOL"]
  val bool_vec2: unit -> ([`L_n_35671[@js 35671]] [@js.enum]) [@@js.get "BOOL_VEC2"]
  val bool_vec3: unit -> ([`L_n_35672[@js 35672]] [@js.enum]) [@@js.get "BOOL_VEC3"]
  val bool_vec4: unit -> ([`L_n_35673[@js 35673]] [@js.enum]) [@@js.get "BOOL_VEC4"]
  val float_mat2: unit -> ([`L_n_35674[@js 35674]] [@js.enum]) [@@js.get "FLOAT_MAT2"]
  val float_mat3: unit -> ([`L_n_35675[@js 35675]] [@js.enum]) [@@js.get "FLOAT_MAT3"]
  val float_mat4: unit -> ([`L_n_35676[@js 35676]] [@js.enum]) [@@js.get "FLOAT_MAT4"]
  val sampler_2d: unit -> ([`L_n_35678[@js 35678]] [@js.enum]) [@@js.get "SAMPLER_2D"]
  val sampler_cube: unit -> ([`L_n_35680[@js 35680]] [@js.enum]) [@@js.get "SAMPLER_CUBE"]
  val vertex_attrib_array_enabled: unit -> ([`L_n_34338[@js 34338]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_ENABLED"]
  val vertex_attrib_array_size: unit -> ([`L_n_34339[@js 34339]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_SIZE"]
  val vertex_attrib_array_stride: unit -> ([`L_n_34340[@js 34340]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_STRIDE"]
  val vertex_attrib_array_type: unit -> ([`L_n_34341[@js 34341]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_TYPE"]
  val vertex_attrib_array_normalized: unit -> ([`L_n_34922[@js 34922]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_NORMALIZED"]
  val vertex_attrib_array_pointer: unit -> ([`L_n_34373[@js 34373]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_POINTER"]
  val vertex_attrib_array_buffer_binding: unit -> ([`L_n_34975[@js 34975]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"]
  val implementation_color_read_type: unit -> ([`L_n_35738[@js 35738]] [@js.enum]) [@@js.get "IMPLEMENTATION_COLOR_READ_TYPE"]
  val implementation_color_read_format: unit -> ([`L_n_35739[@js 35739]] [@js.enum]) [@@js.get "IMPLEMENTATION_COLOR_READ_FORMAT"]
  val compile_status: unit -> ([`L_n_35713[@js 35713]] [@js.enum]) [@@js.get "COMPILE_STATUS"]
  val low_float: unit -> ([`L_n_36336[@js 36336]] [@js.enum]) [@@js.get "LOW_FLOAT"]
  val medium_float: unit -> ([`L_n_36337[@js 36337]] [@js.enum]) [@@js.get "MEDIUM_FLOAT"]
  val high_float: unit -> ([`L_n_36338[@js 36338]] [@js.enum]) [@@js.get "HIGH_FLOAT"]
  val low_int: unit -> ([`L_n_36339[@js 36339]] [@js.enum]) [@@js.get "LOW_INT"]
  val medium_int: unit -> ([`L_n_36340[@js 36340]] [@js.enum]) [@@js.get "MEDIUM_INT"]
  val high_int: unit -> ([`L_n_36341[@js 36341]] [@js.enum]) [@@js.get "HIGH_INT"]
  val framebuffer: unit -> ([`L_n_36160[@js 36160]] [@js.enum]) [@@js.get "FRAMEBUFFER"]
  val renderbuffer: unit -> ([`L_n_36161[@js 36161]] [@js.enum]) [@@js.get "RENDERBUFFER"]
  val rgba4: unit -> ([`L_n_32854[@js 32854]] [@js.enum]) [@@js.get "RGBA4"]
  val rgb5_a1: unit -> ([`L_n_32855[@js 32855]] [@js.enum]) [@@js.get "RGB5_A1"]
  val rgb565: unit -> ([`L_n_36194[@js 36194]] [@js.enum]) [@@js.get "RGB565"]
  val depth_component16: unit -> ([`L_n_33189[@js 33189]] [@js.enum]) [@@js.get "DEPTH_COMPONENT16"]
  val stencil_index8: unit -> ([`L_n_36168[@js 36168]] [@js.enum]) [@@js.get "STENCIL_INDEX8"]
  val depth_stencil: unit -> ([`L_n_34041[@js 34041]] [@js.enum]) [@@js.get "DEPTH_STENCIL"]
  val renderbuffer_width: unit -> ([`L_n_36162[@js 36162]] [@js.enum]) [@@js.get "RENDERBUFFER_WIDTH"]
  val renderbuffer_height: unit -> ([`L_n_36163[@js 36163]] [@js.enum]) [@@js.get "RENDERBUFFER_HEIGHT"]
  val renderbuffer_internal_format: unit -> ([`L_n_36164[@js 36164]] [@js.enum]) [@@js.get "RENDERBUFFER_INTERNAL_FORMAT"]
  val renderbuffer_red_size: unit -> ([`L_n_36176[@js 36176]] [@js.enum]) [@@js.get "RENDERBUFFER_RED_SIZE"]
  val renderbuffer_green_size: unit -> ([`L_n_36177[@js 36177]] [@js.enum]) [@@js.get "RENDERBUFFER_GREEN_SIZE"]
  val renderbuffer_blue_size: unit -> ([`L_n_36178[@js 36178]] [@js.enum]) [@@js.get "RENDERBUFFER_BLUE_SIZE"]
  val renderbuffer_alpha_size: unit -> ([`L_n_36179[@js 36179]] [@js.enum]) [@@js.get "RENDERBUFFER_ALPHA_SIZE"]
  val renderbuffer_depth_size: unit -> ([`L_n_36180[@js 36180]] [@js.enum]) [@@js.get "RENDERBUFFER_DEPTH_SIZE"]
  val renderbuffer_stencil_size: unit -> ([`L_n_36181[@js 36181]] [@js.enum]) [@@js.get "RENDERBUFFER_STENCIL_SIZE"]
  val framebuffer_attachment_object_type: unit -> ([`L_n_36048[@js 36048]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"]
  val framebuffer_attachment_object_name: unit -> ([`L_n_36049[@js 36049]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"]
  val framebuffer_attachment_texture_level: unit -> ([`L_n_36050[@js 36050]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"]
  val framebuffer_attachment_texture_cube_map_face: unit -> ([`L_n_36051[@js 36051]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"]
  val color_attachment0: unit -> ([`L_n_36064[@js 36064]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT0"]
  val depth_attachment: unit -> ([`L_n_36096[@js 36096]] [@js.enum]) [@@js.get "DEPTH_ATTACHMENT"]
  val stencil_attachment: unit -> ([`L_n_36128[@js 36128]] [@js.enum]) [@@js.get "STENCIL_ATTACHMENT"]
  val depth_stencil_attachment: unit -> ([`L_n_33306[@js 33306]] [@js.enum]) [@@js.get "DEPTH_STENCIL_ATTACHMENT"]
  val none: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NONE"]
  val framebuffer_complete: unit -> ([`L_n_36053[@js 36053]] [@js.enum]) [@@js.get "FRAMEBUFFER_COMPLETE"]
  val framebuffer_incomplete_attachment: unit -> ([`L_n_36054[@js 36054]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_ATTACHMENT"]
  val framebuffer_incomplete_missing_attachment: unit -> ([`L_n_36055[@js 36055]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"]
  val framebuffer_incomplete_dimensions: unit -> ([`L_n_36057[@js 36057]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_DIMENSIONS"]
  val framebuffer_unsupported: unit -> ([`L_n_36061[@js 36061]] [@js.enum]) [@@js.get "FRAMEBUFFER_UNSUPPORTED"]
  val framebuffer_binding: unit -> ([`L_n_36006[@js 36006]] [@js.enum]) [@@js.get "FRAMEBUFFER_BINDING"]
  val renderbuffer_binding: unit -> ([`L_n_36007[@js 36007]] [@js.enum]) [@@js.get "RENDERBUFFER_BINDING"]
  val max_renderbuffer_size: unit -> ([`L_n_34024[@js 34024]] [@js.enum]) [@@js.get "MAX_RENDERBUFFER_SIZE"]
  val invalid_framebuffer_operation: unit -> ([`L_n_1286[@js 1286]] [@js.enum]) [@@js.get "INVALID_FRAMEBUFFER_OPERATION"]
  val unpack_flip_y_webgl: unit -> ([`L_n_37440[@js 37440]] [@js.enum]) [@@js.get "UNPACK_FLIP_Y_WEBGL"]
  val unpack_premultiply_alpha_webgl: unit -> ([`L_n_37441[@js 37441]] [@js.enum]) [@@js.get "UNPACK_PREMULTIPLY_ALPHA_WEBGL"]
  val context_lost_webgl: unit -> ([`L_n_37442[@js 37442]] [@js.enum]) [@@js.get "CONTEXT_LOST_WEBGL"]
  val unpack_colorspace_conversion_webgl: unit -> ([`L_n_37443[@js 37443]] [@js.enum]) [@@js.get "UNPACK_COLORSPACE_CONVERSION_WEBGL"]
  val browser_default_webgl: unit -> ([`L_n_37444[@js 37444]] [@js.enum]) [@@js.get "BROWSER_DEFAULT_WEBGL"]
end
and WebGLRenderingContextOverloads : sig
  type t = [`WebGLRenderingContextOverloads] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLRenderingContextOverloads]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLRenderingContextOverloads]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLRenderingContextOverloads ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1fv: 'tags this -> location:WebGLUniformLocation.t option -> v:GLfloat.t Iterable.t -> unit [@@js.call "uniform1fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1iv: 'tags this -> location:WebGLUniformLocation.t option -> v:GLint.t Iterable.t -> unit [@@js.call "uniform1iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2fv: 'tags this -> location:WebGLUniformLocation.t option -> v:GLfloat.t Iterable.t -> unit [@@js.call "uniform2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2iv: 'tags this -> location:WebGLUniformLocation.t option -> v:GLint.t Iterable.t -> unit [@@js.call "uniform2iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3fv: 'tags this -> location:WebGLUniformLocation.t option -> v:GLfloat.t Iterable.t -> unit [@@js.call "uniform3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3iv: 'tags this -> location:WebGLUniformLocation.t option -> v:GLint.t Iterable.t -> unit [@@js.call "uniform3iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4fv: 'tags this -> location:WebGLUniformLocation.t option -> v:GLfloat.t Iterable.t -> unit [@@js.call "uniform4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4iv: 'tags this -> location:WebGLUniformLocation.t option -> v:GLint.t Iterable.t -> unit [@@js.call "uniform4iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix2fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> value:GLfloat.t Iterable.t -> unit [@@js.call "uniformMatrix2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix3fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> value:GLfloat.t Iterable.t -> unit [@@js.call "uniformMatrix3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix4fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> value:GLfloat.t Iterable.t -> unit [@@js.call "uniformMatrix4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData) *)
  val bufferData: 'tags this -> target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit [@@js.call "bufferData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData) *)
  val bufferData': 'tags this -> target:GLenum.t -> data:BufferSource.t option -> usage:GLenum.t -> unit [@@js.call "bufferData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferSubData) *)
  val bufferSubData: 'tags this -> target:GLenum.t -> offset:GLintptr.t -> data:BufferSource.t -> unit [@@js.call "bufferSubData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexImage2D) *)
  val compressedTexImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> data:ArrayBufferView.t -> unit [@@js.call "compressedTexImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D) *)
  val compressedTexSubImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> data:ArrayBufferView.t -> unit [@@js.call "compressedTexSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels) *)
  val readPixels: 'tags this -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> pixels:ArrayBufferView.t option -> unit [@@js.call "readPixels"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D) *)
  val texImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> pixels:ArrayBufferView.t option -> unit [@@js.call "texImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D) *)
  val texImage2D': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> format:GLenum.t -> type_:GLenum.t -> source:TexImageSource.t -> unit [@@js.call "texImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D) *)
  val texSubImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> pixels:ArrayBufferView.t option -> unit [@@js.call "texSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D) *)
  val texSubImage2D': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> format:GLenum.t -> type_:GLenum.t -> source:TexImageSource.t -> unit [@@js.call "texSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1fv': 'tags this -> location:WebGLUniformLocation.t option -> v:Float32List.t -> unit [@@js.call "uniform1fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1iv': 'tags this -> location:WebGLUniformLocation.t option -> v:Int32List.t -> unit [@@js.call "uniform1iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2fv': 'tags this -> location:WebGLUniformLocation.t option -> v:Float32List.t -> unit [@@js.call "uniform2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2iv': 'tags this -> location:WebGLUniformLocation.t option -> v:Int32List.t -> unit [@@js.call "uniform2iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3fv': 'tags this -> location:WebGLUniformLocation.t option -> v:Float32List.t -> unit [@@js.call "uniform3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3iv': 'tags this -> location:WebGLUniformLocation.t option -> v:Int32List.t -> unit [@@js.call "uniform3iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4fv': 'tags this -> location:WebGLUniformLocation.t option -> v:Float32List.t -> unit [@@js.call "uniform4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4iv': 'tags this -> location:WebGLUniformLocation.t option -> v:Int32List.t -> unit [@@js.call "uniform4iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix2fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> value:Float32List.t -> unit [@@js.call "uniformMatrix2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix3fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> value:Float32List.t -> unit [@@js.call "uniformMatrix3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix4fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> value:Float32List.t -> unit [@@js.call "uniformMatrix4fv"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ErrorEventInit : sig
  type t = [`ErrorEventInit | `EventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ErrorEventInit | `EventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ErrorEventInit | `EventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ErrorEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_colno: 'tags this -> float option [@@js.get "colno"]
  val set_colno: 'tags this -> float -> unit [@@js.set "colno"]
  val get_error: 'tags this -> any option [@@js.get "error"]
  val set_error: 'tags this -> any -> unit [@@js.set "error"]
  val get_filename: 'tags this -> string option [@@js.get "filename"]
  val set_filename: 'tags this -> string -> unit [@@js.set "filename"]
  val get_lineno: 'tags this -> float option [@@js.get "lineno"]
  val set_lineno: 'tags this -> float -> unit [@@js.set "lineno"]
  val get_message: 'tags this -> string option [@@js.get "message"]
  val set_message: 'tags this -> string -> unit [@@js.set "message"]
  val create: ?colno:float -> ?error:any -> ?filename:string -> ?lineno:float -> ?message:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Events providing information related to errors in scripts or in files.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ErrorEvent)
*)
module[@js.scope "ErrorEvent"] ErrorEvent : sig
  type t = [`ErrorEvent | `Event] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ErrorEvent | `Event]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ErrorEvent | `Event]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ErrorEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ErrorEvent/colno) *)
  val get_colno: 'tags this -> float [@@js.get "colno"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ErrorEvent/error) *)
  val get_error: 'tags this -> any [@@js.get "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ErrorEvent/filename) *)
  val get_filename: 'tags this -> string [@@js.get "filename"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ErrorEvent/lineno) *)
  val get_lineno: 'tags this -> float [@@js.get "lineno"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ErrorEvent/message) *)
  val get_message: 'tags this -> string [@@js.get "message"]
  val create: colno:float -> error:any -> filename:string -> lineno:float -> message:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:ErrorEventInit.t -> unit -> t [@@js.create]
end
module AbstractWorker : sig
  type t = [`AbstractWorker] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbstractWorker]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbstractWorker]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AbstractWorker ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:ErrorEvent.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:ErrorEvent.t -> any) option -> unit [@@js.set "onerror"]
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AbstractWorkerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AbstractWorkerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A message received by a target object.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent)
*)
module[@js.scope "MessageEvent"] rec MessageEvent : sig
  type 'T t = [`Event | `MessageEvent of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'T tags = [`Event | `MessageEvent of 'T]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`Event | `MessageEvent of 'T]
    type tags_0 = any tags
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `MessageEvent of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/initMessageEvent) *)
  val initMessageEvent: ('tags, 'T) this -> type_:string -> ?bubbles:bool -> ?cancelable:bool -> ?data:any -> ?origin:string -> ?lastEventId:string -> ?source:MessageEventSource.t option -> ?ports:MessagePort.t Iterable.t -> unit -> unit [@@js.call "initMessageEvent"]
  
  (**
    Returns the data of the message.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/data)
  *)
  val get_data: ('tags, 'T) this -> 'T [@@js.get "data"]
  
  (**
    Returns the last event ID string, for server-sent events.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/lastEventId)
  *)
  val get_lastEventId: ('tags, 'T) this -> string [@@js.get "lastEventId"]
  
  (**
    Returns the origin of the message, for server-sent events and cross-document messaging.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/origin)
  *)
  val get_origin: ('tags, 'T) this -> string [@@js.get "origin"]
  
  (**
    Returns the MessagePort array sent with the message, for cross-document messaging and channel messaging.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/ports)
  *)
  val get_ports: ('tags, 'T) this -> MessagePort.t list [@@js.get "ports"]
  
  (**
    Returns the WindowProxy of the source window, for cross-document messaging, and the MessagePort being attached, in the connect event fired at SharedWorkerGlobalScope objects.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/source)
  *)
  val get_source: ('tags, 'T) this -> MessageEventSource.t option [@@js.get "source"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/initMessageEvent) *)
  val initMessageEvent': ('tags, 'T) this -> type_:string -> ?bubbles:bool -> ?cancelable:bool -> ?data:any -> ?origin:string -> ?lastEventId:string -> ?source:MessageEventSource.t option -> ?ports:MessagePort.t list -> unit -> unit [@@js.call "initMessageEvent"]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: type_:string -> ?eventInitDict:'T MessageEventInit.t -> unit -> 'T t [@@js.create]
end
and MessageEventInit : sig
  type 'T t = [`EventInit | `MessageEventInit of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'T tags = [`EventInit | `MessageEventInit of 'T]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`EventInit | `MessageEventInit of 'T]
    type tags_0 = any tags
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `MessageEventInit of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_data: ('tags, 'T) this -> 'T option [@@js.get "data"]
  val set_data: ('tags, 'T) this -> 'T -> unit [@@js.set "data"]
  val get_lastEventId: ('tags, 'T) this -> string option [@@js.get "lastEventId"]
  val set_lastEventId: ('tags, 'T) this -> string -> unit [@@js.set "lastEventId"]
  val get_origin: ('tags, 'T) this -> string option [@@js.get "origin"]
  val set_origin: ('tags, 'T) this -> string -> unit [@@js.set "origin"]
  val get_ports: ('tags, 'T) this -> MessagePort.t list option [@@js.get "ports"]
  val set_ports: ('tags, 'T) this -> MessagePort.t list -> unit [@@js.set "ports"]
  val get_source: ('tags, 'T) this -> MessageEventSource.t option [@@js.get "source"]
  val set_source: ('tags, 'T) this -> MessageEventSource.t option -> unit [@@js.set "source"]
  val create: ?data:'T -> ?lastEventId:string -> ?origin:string -> ?ports:MessagePort.t list -> ?source:MessageEventSource.t -> unit -> 'T t [@@js.builder]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
end
and MessageEventSource : sig
  type t = (MessagePort.t, ServiceWorker.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  This Channel Messaging API interface represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort)
*)
and[@js.scope "MessagePort"] MessagePort : sig
  type t = [`EventTarget | `MessagePort] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `MessagePort]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `MessagePort]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MessagePort ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort/messageerror_event) *)
  val get_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessageerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort/messageerror_event) *)
  val set_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessageerror"]
  
  (**
    Disconnects the port, so that it is no longer active.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort/close)
  *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (**
    Posts a message through the channel. Objects listed in transfer are transferred, not just cloned, meaning that they are no longer usable on the sending side.
    
    Throws a "DataCloneError" DOMException if transfer contains duplicate objects or port, or if message could not be cloned.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort/postMessage)
  *)
  val postMessage: 'tags this -> message:any -> transfer:Transferable.t list -> unit [@@js.call "postMessage"]
  
  (**
    Posts a message through the channel. Objects listed in transfer are transferred, not just cloned, meaning that they are no longer usable on the sending side.
    
    Throws a "DataCloneError" DOMException if transfer contains duplicate objects or port, or if message could not be cloned.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort/postMessage)
  *)
  val postMessage': 'tags this -> message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit [@@js.call "postMessage"]
  
  (**
    Begins dispatching messages received on the port.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort/start)
  *)
  val start: 'tags this -> unit [@@js.call "start"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MessagePortEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MessagePortEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  This ServiceWorker API interface provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker)
*)
and[@js.scope "ServiceWorker"] ServiceWorker : sig
  type t = [`AbstractWorker | `EventTarget | `ServiceWorker] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbstractWorker | `EventTarget | `ServiceWorker]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbstractWorker | `EventTarget | `ServiceWorker]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ServiceWorker ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker/statechange_event) *)
  val get_onstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker/statechange_event) *)
  val set_onstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker/scriptURL) *)
  val get_scriptURL: 'tags this -> string [@@js.get "scriptURL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker/state) *)
  val get_state: 'tags this -> ServiceWorkerState.t [@@js.get "state"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker/postMessage) *)
  val postMessage: 'tags this -> message:any -> transfer:Transferable.t list -> unit [@@js.call "postMessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker/postMessage) *)
  val postMessage': 'tags this -> message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit [@@js.call "postMessage"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ServiceWorkerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ServiceWorkerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and StructuredSerializeOptions : sig
  type t = [`StructuredSerializeOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`StructuredSerializeOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`StructuredSerializeOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StructuredSerializeOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_transfer: 'tags this -> Transferable.t list option [@@js.get "transfer"]
  val set_transfer: 'tags this -> Transferable.t list -> unit [@@js.set "transfer"]
  val create: ?transfer:Transferable.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and Transferable : sig
  type t = (ArrayBuffer.t, ImageBitmap.t, MessagePort.t, OffscreenCanvas.t, ReadableStream.t_0, TransformStream.t_0, VideoFrame.t, WritableStream.t_0) union8
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AbstractWorkerEventMap : sig
  type t = [`AbstractWorkerEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbstractWorkerEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbstractWorkerEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AbstractWorkerEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_error: 'tags this -> ErrorEvent.t [@@js.get "error"]
  val set_error: 'tags this -> ErrorEvent.t -> unit [@@js.set "error"]
  val create: error:ErrorEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module WorkerEventMap : sig
  type t = [`AbstractWorkerEventMap | `WorkerEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbstractWorkerEventMap | `WorkerEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbstractWorkerEventMap | `WorkerEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WorkerEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_message: 'tags this -> MessageEvent.t_0 [@@js.get "message"]
  val set_message: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "message"]
  val get_messageerror: 'tags this -> MessageEvent.t_0 [@@js.get "messageerror"]
  val set_messageerror: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "messageerror"]
  val create: message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module WorkerType : sig
  type t = ([`L_s198_module[@js "module"] | `L_s78_classic[@js "classic"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module WorkerOptions : sig
  type t = [`WorkerOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WorkerOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WorkerOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WorkerOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_credentials: 'tags this -> RequestCredentials.t option [@@js.get "credentials"]
  val set_credentials: 'tags this -> RequestCredentials.t -> unit [@@js.set "credentials"]
  val get_name: 'tags this -> string option [@@js.get "name"]
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  val get_type: 'tags this -> WorkerType.t option [@@js.get "type"]
  val set_type: 'tags this -> WorkerType.t -> unit [@@js.set "type"]
  val create: ?credentials:RequestCredentials.t -> ?name:string -> ?type_:(WorkerType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Web Workers API interface represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worker)
*)
module[@js.scope "Worker"] Worker : sig
  type t = [`AbstractWorker | `EventTarget | `Worker] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbstractWorker | `EventTarget | `Worker]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbstractWorker | `EventTarget | `Worker]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Worker ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worker/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worker/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worker/messageerror_event) *)
  val get_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessageerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worker/messageerror_event) *)
  val set_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessageerror"]
  
  (**
    Clones message and transmits it to worker's global environment. transfer can be passed as a list of objects that are to be transferred rather than cloned.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worker/postMessage)
  *)
  val postMessage: 'tags this -> message:any -> transfer:Transferable.t list -> unit [@@js.call "postMessage"]
  
  (**
    Clones message and transmits it to worker's global environment. transfer can be passed as a list of objects that are to be transferred rather than cloned.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worker/postMessage)
  *)
  val postMessage': 'tags this -> message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit [@@js.call "postMessage"]
  
  (**
    Aborts worker's associated global environment.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worker/terminate)
  *)
  val terminate: 'tags this -> unit [@@js.call "terminate"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'WorkerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'WorkerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: scriptURL:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?options:WorkerOptions.t -> unit -> t [@@js.create]
end
module CloseEventInit : sig
  type t = [`CloseEventInit | `EventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CloseEventInit | `EventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CloseEventInit | `EventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CloseEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_code: 'tags this -> float option [@@js.get "code"]
  val set_code: 'tags this -> float -> unit [@@js.set "code"]
  val get_reason: 'tags this -> string option [@@js.get "reason"]
  val set_reason: 'tags this -> string -> unit [@@js.set "reason"]
  val get_wasClean: 'tags this -> bool option [@@js.get "wasClean"]
  val set_wasClean: 'tags this -> bool -> unit [@@js.set "wasClean"]
  val create: ?code:float -> ?reason:string -> ?wasClean:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CloseEvent)
*)
module[@js.scope "CloseEvent"] CloseEvent : sig
  type t = [`CloseEvent | `Event] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CloseEvent | `Event]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CloseEvent | `Event]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CloseEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the WebSocket connection close code provided by the server.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CloseEvent/code)
  *)
  val get_code: 'tags this -> float [@@js.get "code"]
  
  (**
    Returns the WebSocket connection close reason provided by the server.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CloseEvent/reason)
  *)
  val get_reason: 'tags this -> string [@@js.get "reason"]
  
  (**
    Returns true if the connection closed cleanly; false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CloseEvent/wasClean)
  *)
  val get_wasClean: 'tags this -> bool [@@js.get "wasClean"]
  val create: code:float -> reason:string -> wasClean:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:CloseEventInit.t -> unit -> t [@@js.create]
end
module WebSocketEventMap : sig
  type t = [`WebSocketEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebSocketEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebSocketEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebSocketEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_close: 'tags this -> CloseEvent.t [@@js.get "close"]
  val set_close: 'tags this -> CloseEvent.t -> unit [@@js.set "close"]
  val get_error: 'tags this -> Event.t [@@js.get "error"]
  val set_error: 'tags this -> Event.t -> unit [@@js.set "error"]
  val get_message: 'tags this -> MessageEvent.t_0 [@@js.get "message"]
  val set_message: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "message"]
  val get_open: 'tags this -> Event.t [@@js.get "open"]
  val set_open: 'tags this -> Event.t -> unit [@@js.set "open"]
  val create: close:CloseEvent.t -> error:Event.t -> message:MessageEvent.t_0 -> open_:(Event.t[@js "open"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module BinaryType : sig
  type t = ([`L_s56_arraybuffer[@js "arraybuffer"] | `L_s66_blob[@js "blob"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket)
*)
module[@js.scope "WebSocket"] WebSocket : sig
  type t = [`EventTarget | `WebSocket] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `WebSocket]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `WebSocket]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebSocket ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:
    
    Can be set, to change how binary data is returned. The default is "blob".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/binaryType)
  *)
  val get_binaryType: 'tags this -> BinaryType.t [@@js.get "binaryType"]
  
  (**
    Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:
    
    Can be set, to change how binary data is returned. The default is "blob".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/binaryType)
  *)
  val set_binaryType: 'tags this -> BinaryType.t -> unit [@@js.set "binaryType"]
  
  (**
    Returns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.
    
    If the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/bufferedAmount)
  *)
  val get_bufferedAmount: 'tags this -> float [@@js.get "bufferedAmount"]
  
  (**
    Returns the extensions selected by the server, if any.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/extensions)
  *)
  val get_extensions: 'tags this -> string [@@js.get "extensions"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/close_event) *)
  val get_onclose: 'tags this -> (this:t -> ev:CloseEvent.t -> any) option [@@js.get "onclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/close_event) *)
  val set_onclose: 'tags this -> (this:t -> ev:CloseEvent.t -> any) option -> unit [@@js.set "onclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/open_event) *)
  val get_onopen: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onopen"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/open_event) *)
  val set_onopen: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onopen"]
  
  (**
    Returns the subprotocol selected by the server, if any. It can be used in conjunction with the array form of the constructor's second argument to perform subprotocol negotiation.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/protocol)
  *)
  val get_protocol: 'tags this -> string [@@js.get "protocol"]
  
  (**
    Returns the state of the WebSocket object's connection. It can have the values described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/readyState)
  *)
  val get_readyState: 'tags this -> float [@@js.get "readyState"]
  
  (**
    Returns the URL that was used to establish the WebSocket connection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/url)
  *)
  val get_url: 'tags this -> string [@@js.get "url"]
  
  (**
    Closes the WebSocket connection, optionally using code as the the WebSocket connection close code and reason as the the WebSocket connection close reason.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/close)
  *)
  val close: 'tags this -> ?code:float -> ?reason:string -> unit -> unit [@@js.call "close"]
  
  (**
    Transmits data using the WebSocket connection. data can be a string, a Blob, an ArrayBuffer, or an ArrayBufferView.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/send)
  *)
  val send: 'tags this -> data:([`U1 of string | `U2 of ArrayBufferLike.t | `U3 of Blob.t | `U4 of ArrayBufferView.t] [@js.union]) -> unit [@@js.call "send"]
  val get_CONNECTING: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "CONNECTING"]
  val get_OPEN: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "OPEN"]
  val get_CLOSING: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "CLOSING"]
  val get_CLOSED: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "CLOSED"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'WebSocketEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'WebSocketEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: url:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?protocols:([`U1 of string | `U2 of string list] [@js.union]) -> unit -> t [@@js.create]
  val connecting: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "CONNECTING"]
  val open_: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "OPEN"]
  val closing: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "CLOSING"]
  val closed: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "CLOSED"]
end
module WebGLContextEventInit : sig
  type t = [`EventInit | `WebGLContextEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `WebGLContextEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `WebGLContextEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLContextEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_statusMessage: 'tags this -> string option [@@js.get "statusMessage"]
  val set_statusMessage: 'tags this -> string -> unit [@@js.set "statusMessage"]
  val create: ?statusMessage:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent)
*)
module[@js.scope "WebGLContextEvent"] WebGLContextEvent : sig
  type t = [`Event | `WebGLContextEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `WebGLContextEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `WebGLContextEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLContextEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent/statusMessage) *)
  val get_statusMessage: 'tags this -> string [@@js.get "statusMessage"]
  val create: statusMessage:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInit:WebGLContextEventInit.t -> unit -> t [@@js.create]
end
module[@js.scope "WebAssembly"] WebAssembly : sig
  module ImportExportKind : sig
    type t = ([`L_s141_function[@js "function"] | `L_s144_global[@js "global"] | `L_s192_memory[@js "memory"] | `L_s310_table[@js "table"]] [@js.enum])
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
  end
  module ModuleImportDescriptor : sig
    type t = [`WebAssembly_ModuleImportDescriptor] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_ModuleImportDescriptor]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_ModuleImportDescriptor]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_ModuleImportDescriptor ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_kind: 'tags this -> ImportExportKind.t [@@js.get "kind"]
    val set_kind: 'tags this -> ImportExportKind.t -> unit [@@js.set "kind"]
    val get_module: 'tags this -> string [@@js.get "module"]
    val set_module: 'tags this -> string -> unit [@@js.set "module"]
    val get_name: 'tags this -> string [@@js.get "name"]
    val set_name: 'tags this -> string -> unit [@@js.set "name"]
    val create: kind:ImportExportKind.t -> module_:(string[@js "module"]) -> name:string -> unit -> t [@@js.builder]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  end
  module ModuleExportDescriptor : sig
    type t = [`WebAssembly_ModuleExportDescriptor] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_ModuleExportDescriptor]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_ModuleExportDescriptor]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_ModuleExportDescriptor ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_kind: 'tags this -> ImportExportKind.t [@@js.get "kind"]
    val set_kind: 'tags this -> ImportExportKind.t -> unit [@@js.set "kind"]
    val get_name: 'tags this -> string [@@js.get "name"]
    val set_name: 'tags this -> string -> unit [@@js.set "name"]
    val create: kind:ImportExportKind.t -> name:string -> unit -> t [@@js.builder]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  end
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module) *)
  module[@js.scope "Module"] Module : sig
    type t = [`WebAssembly_Module] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_Module]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_Module]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_Module ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
    val prototype: unit -> t [@@js.get "prototype"]
    val create: BufferSource.t -> t [@@js.create]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/customSections) *)
    val customSections: moduleObject:t -> sectionName:string -> ArrayBuffer.t list [@@js.global "customSections"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/exports) *)
    val exports: t -> ModuleExportDescriptor.t list [@@js.global "exports"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/imports) *)
    val imports: t -> ModuleImportDescriptor.t list [@@js.global "imports"]
  end
  module TableKind : sig
    type t = ([`L_s125_externref[@js "externref"] | `L_s55_anyfunc[@js "anyfunc"]] [@js.enum])
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
  end
  module TableDescriptor : sig
    type t = [`WebAssembly_TableDescriptor] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_TableDescriptor]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_TableDescriptor]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_TableDescriptor ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_element: 'tags this -> TableKind.t [@@js.get "element"]
    val set_element: 'tags this -> TableKind.t -> unit [@@js.set "element"]
    val get_initial: 'tags this -> float [@@js.get "initial"]
    val set_initial: 'tags this -> float -> unit [@@js.set "initial"]
    val get_maximum: 'tags this -> float option [@@js.get "maximum"]
    val set_maximum: 'tags this -> float -> unit [@@js.set "maximum"]
    val create: element:TableKind.t -> initial:float -> ?maximum:float -> unit -> t [@@js.builder]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  end
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table) *)
  module[@js.scope "Table"] Table : sig
    type t = [`WebAssembly_Table] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_Table]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_Table]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_Table ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/length) *)
    val get_length: 'tags this -> float [@@js.get "length"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/get) *)
    val get_: 'tags this -> index:float -> any [@@js.call "get"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/grow) *)
    val grow: 'tags this -> delta:float -> ?value:any -> unit -> float [@@js.call "grow"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/set) *)
    val set_: 'tags this -> index:float -> ?value:any -> unit -> unit [@@js.call "set"]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
    val prototype: unit -> t [@@js.get "prototype"]
    val create: descriptor:TableDescriptor.t -> ?value:any -> unit -> t [@@js.create]
  end
  module MemoryDescriptor : sig
    type t = [`WebAssembly_MemoryDescriptor] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_MemoryDescriptor]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_MemoryDescriptor]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_MemoryDescriptor ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_initial: 'tags this -> float [@@js.get "initial"]
    val set_initial: 'tags this -> float -> unit [@@js.set "initial"]
    val get_maximum: 'tags this -> float option [@@js.get "maximum"]
    val set_maximum: 'tags this -> float -> unit [@@js.set "maximum"]
    val get_shared: 'tags this -> bool option [@@js.get "shared"]
    val set_shared: 'tags this -> bool -> unit [@@js.set "shared"]
    val create: initial:float -> ?maximum:float -> ?shared:bool -> unit -> t [@@js.builder]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  end
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory) *)
  module[@js.scope "Memory"] Memory : sig
    type t = [`WebAssembly_Memory] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_Memory]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_Memory]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_Memory ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory/buffer) *)
    val get_buffer: 'tags this -> ArrayBuffer.t [@@js.get "buffer"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory/grow) *)
    val grow: 'tags this -> delta:float -> float [@@js.call "grow"]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
    val prototype: unit -> t [@@js.get "prototype"]
    val create: MemoryDescriptor.t -> t [@@js.create]
  end
  module ValueType : sig
    type t = ([`L_s125_externref[@js "externref"] | `L_s128_f32[@js "f32"] | `L_s129_f64[@js "f64"] | `L_s154_i32[@js "i32"] | `L_s155_i64[@js "i64"] | `L_s330_v128[@js "v128"] | `L_s55_anyfunc[@js "anyfunc"]] [@js.enum])
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
  end
  module GlobalDescriptor : sig
    type t = [`WebAssembly_GlobalDescriptor] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_GlobalDescriptor]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_GlobalDescriptor]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_GlobalDescriptor ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_mutable: 'tags this -> bool option [@@js.get "mutable"]
    val set_mutable: 'tags this -> bool -> unit [@@js.set "mutable"]
    val get_value: 'tags this -> ValueType.t [@@js.get "value"]
    val set_value: 'tags this -> ValueType.t -> unit [@@js.set "value"]
    val create: ?mutable_:(bool[@js "mutable"]) -> value:ValueType.t -> unit -> t [@@js.builder]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  end
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Global) *)
  module[@js.scope "Global"] Global : sig
    type t = [`WebAssembly_Global] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_Global]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_Global]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_Global ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Global/value) *)
    val get_value: 'tags this -> any [@@js.get "value"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Global/value) *)
    val set_value: 'tags this -> any -> unit [@@js.set "value"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Global/valueOf) *)
    val valueOf: 'tags this -> any [@@js.call "valueOf"]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
    val prototype: unit -> t [@@js.get "prototype"]
    val create: descriptor:GlobalDescriptor.t -> ?v:any -> unit -> t [@@js.create]
  end
  module ExportValue : sig
    type t = (untyped_function, Global.t, Memory.t, Table.t) union4
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
  end
  module ImportValue : sig
    type t = ([`Number of float | `Other of ExportValue.t] [@js.union on_field "dummy"]) Primitive.t
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
  end
  module ModuleImports : sig
    type t = (string, ImportValue.t) Record.t
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
  end
  module Imports : sig
    type t = (string, ModuleImports.t) Record.t
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
  end
  module Exports : sig
    type t = (string, ExportValue.t) Record.t
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
  end
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance) *)
  module[@js.scope "Instance"] Instance : sig
    type t = [`WebAssembly_Instance] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_Instance]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_Instance]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_Instance ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance/exports) *)
    val get_exports: 'tags this -> Exports.t [@@js.get "exports"]
    val create: exports:Exports.t -> unit -> t [@@js.builder]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
    val prototype: unit -> t [@@js.get "prototype"]
    val create': module_:Module.t -> ?importObject:Imports.t -> unit -> t [@@js.create]
  end
  module WebAssemblyInstantiatedSource : sig
    type t = [`WebAssembly_WebAssemblyInstantiatedSource] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_WebAssemblyInstantiatedSource]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_WebAssemblyInstantiatedSource]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_WebAssemblyInstantiatedSource ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_instance: 'tags this -> Instance.t [@@js.get "instance"]
    val set_instance: 'tags this -> Instance.t -> unit [@@js.set "instance"]
    val get_module: 'tags this -> Module.t [@@js.get "module"]
    val set_module: 'tags this -> Module.t -> unit [@@js.set "module"]
    val create: instance:Instance.t -> module_:(Module.t[@js "module"]) -> unit -> t [@@js.builder]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  end
  module[@js.scope "RuntimeError"] RuntimeError : sig
    type t = [`WebAssembly_RuntimeError] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_RuntimeError]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_RuntimeError]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_RuntimeError ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
    val prototype: unit -> t [@@js.get "prototype"]
    val create: ?message:string -> unit -> t [@@js.create]
    val invoke: ?message:string -> unit -> t [@@js.invoke]
  end
  module[@js.scope "LinkError"] LinkError : sig
    type t = [`WebAssembly_LinkError] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_LinkError]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_LinkError]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_LinkError ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
    val prototype: unit -> t [@@js.get "prototype"]
    val create: ?message:string -> unit -> t [@@js.create]
    val invoke: ?message:string -> unit -> t [@@js.invoke]
  end
  module[@js.scope "CompileError"] CompileError : sig
    type t = [`WebAssembly_CompileError] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_CompileError]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_CompileError]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_CompileError ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
    val prototype: unit -> t [@@js.get "prototype"]
    val create: ?message:string -> unit -> t [@@js.create]
    val invoke: ?message:string -> unit -> t [@@js.invoke]
  end
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile) *)
  val compile: BufferSource.t -> Module.t Promise.t [@@js.global "compile"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compileStreaming) *)
  val compileStreaming: (Response.t, Response.t PromiseLike.t) union2 -> Module.t Promise.t [@@js.global "compileStreaming"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate) *)
  val instantiate: bytes:BufferSource.t -> ?importObject:Imports.t -> unit -> WebAssemblyInstantiatedSource.t Promise.t [@@js.global "instantiate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate) *)
  val instantiate': moduleObject:Module.t -> ?importObject:Imports.t -> unit -> Instance.t Promise.t [@@js.global "instantiate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming) *)
  val instantiateStreaming: source:(Response.t, Response.t PromiseLike.t) union2 -> ?importObject:Imports.t -> unit -> WebAssemblyInstantiatedSource.t Promise.t [@@js.global "instantiateStreaming"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/validate) *)
  val validate: BufferSource.t -> bool [@@js.global "validate"]
end
module VideoEncoderEventMap : sig
  type t = [`VideoEncoderEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoEncoderEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoEncoderEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoEncoderEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_dequeue: 'tags this -> Event.t [@@js.get "dequeue"]
  val set_dequeue: 'tags this -> Event.t -> unit [@@js.set "dequeue"]
  val create: dequeue:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoEncoderBitrateMode : sig
  type t = ([`L_s256_quantizer[@js "quantizer"] | `L_s331_variable[@js "variable"] | `L_s89_constant[@js "constant"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module LatencyMode : sig
  type t = ([`L_s255_quality[@js "quality"] | `L_s261_realtime[@js "realtime"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module HardwareAcceleration : sig
  type t = ([`L_s208_no_preference[@js "no-preference"] | `L_s243_prefer_hardware[@js "prefer-hardware"] | `L_s244_prefer_software[@js "prefer-software"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AvcBitstreamFormat : sig
  type t = ([`L_s54_annexb[@js "annexb"] | `L_s62_avc[@js "avc"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AvcEncoderConfig : sig
  type t = [`AvcEncoderConfig] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AvcEncoderConfig]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AvcEncoderConfig]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AvcEncoderConfig ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_format: 'tags this -> AvcBitstreamFormat.t option [@@js.get "format"]
  val set_format: 'tags this -> AvcBitstreamFormat.t -> unit [@@js.set "format"]
  val create: ?format:AvcBitstreamFormat.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoEncoderConfig : sig
  type t = [`VideoEncoderConfig] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoEncoderConfig]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoEncoderConfig]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoEncoderConfig ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_alpha: 'tags this -> AlphaOption.t option [@@js.get "alpha"]
  val set_alpha: 'tags this -> AlphaOption.t -> unit [@@js.set "alpha"]
  val get_avc: 'tags this -> AvcEncoderConfig.t option [@@js.get "avc"]
  val set_avc: 'tags this -> AvcEncoderConfig.t -> unit [@@js.set "avc"]
  val get_bitrate: 'tags this -> float option [@@js.get "bitrate"]
  val set_bitrate: 'tags this -> float -> unit [@@js.set "bitrate"]
  val get_bitrateMode: 'tags this -> VideoEncoderBitrateMode.t option [@@js.get "bitrateMode"]
  val set_bitrateMode: 'tags this -> VideoEncoderBitrateMode.t -> unit [@@js.set "bitrateMode"]
  val get_codec: 'tags this -> string [@@js.get "codec"]
  val set_codec: 'tags this -> string -> unit [@@js.set "codec"]
  val get_displayHeight: 'tags this -> float option [@@js.get "displayHeight"]
  val set_displayHeight: 'tags this -> float -> unit [@@js.set "displayHeight"]
  val get_displayWidth: 'tags this -> float option [@@js.get "displayWidth"]
  val set_displayWidth: 'tags this -> float -> unit [@@js.set "displayWidth"]
  val get_framerate: 'tags this -> float option [@@js.get "framerate"]
  val set_framerate: 'tags this -> float -> unit [@@js.set "framerate"]
  val get_hardwareAcceleration: 'tags this -> HardwareAcceleration.t option [@@js.get "hardwareAcceleration"]
  val set_hardwareAcceleration: 'tags this -> HardwareAcceleration.t -> unit [@@js.set "hardwareAcceleration"]
  val get_height: 'tags this -> float [@@js.get "height"]
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  val get_latencyMode: 'tags this -> LatencyMode.t option [@@js.get "latencyMode"]
  val set_latencyMode: 'tags this -> LatencyMode.t -> unit [@@js.set "latencyMode"]
  val get_scalabilityMode: 'tags this -> string option [@@js.get "scalabilityMode"]
  val set_scalabilityMode: 'tags this -> string -> unit [@@js.set "scalabilityMode"]
  val get_width: 'tags this -> float [@@js.get "width"]
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  val create: ?alpha:AlphaOption.t -> ?avc:AvcEncoderConfig.t -> ?bitrate:float -> ?bitrateMode:VideoEncoderBitrateMode.t -> codec:string -> ?displayHeight:float -> ?displayWidth:float -> ?framerate:float -> ?hardwareAcceleration:HardwareAcceleration.t -> height:float -> ?latencyMode:LatencyMode.t -> ?scalabilityMode:string -> width:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoEncoderSupport : sig
  type t = [`VideoEncoderSupport] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoEncoderSupport]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoEncoderSupport]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoEncoderSupport ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_config: 'tags this -> VideoEncoderConfig.t option [@@js.get "config"]
  val set_config: 'tags this -> VideoEncoderConfig.t -> unit [@@js.set "config"]
  val get_supported: 'tags this -> bool option [@@js.get "supported"]
  val set_supported: 'tags this -> bool -> unit [@@js.set "supported"]
  val create: ?config:VideoEncoderConfig.t -> ?supported:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module WebCodecsErrorCallback : sig
  type t = [`WebCodecsErrorCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebCodecsErrorCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebCodecsErrorCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebCodecsErrorCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> error:DOMException.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoDecoderConfig : sig
  type t = [`VideoDecoderConfig] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoDecoderConfig]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoDecoderConfig]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoDecoderConfig ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_codec: 'tags this -> string [@@js.get "codec"]
  val set_codec: 'tags this -> string -> unit [@@js.set "codec"]
  val get_codedHeight: 'tags this -> float option [@@js.get "codedHeight"]
  val set_codedHeight: 'tags this -> float -> unit [@@js.set "codedHeight"]
  val get_codedWidth: 'tags this -> float option [@@js.get "codedWidth"]
  val set_codedWidth: 'tags this -> float -> unit [@@js.set "codedWidth"]
  val get_colorSpace: 'tags this -> VideoColorSpaceInit.t option [@@js.get "colorSpace"]
  val set_colorSpace: 'tags this -> VideoColorSpaceInit.t -> unit [@@js.set "colorSpace"]
  val get_description: 'tags this -> BufferSource.t option [@@js.get "description"]
  val set_description: 'tags this -> BufferSource.t -> unit [@@js.set "description"]
  val get_displayAspectHeight: 'tags this -> float option [@@js.get "displayAspectHeight"]
  val set_displayAspectHeight: 'tags this -> float -> unit [@@js.set "displayAspectHeight"]
  val get_displayAspectWidth: 'tags this -> float option [@@js.get "displayAspectWidth"]
  val set_displayAspectWidth: 'tags this -> float -> unit [@@js.set "displayAspectWidth"]
  val get_hardwareAcceleration: 'tags this -> HardwareAcceleration.t option [@@js.get "hardwareAcceleration"]
  val set_hardwareAcceleration: 'tags this -> HardwareAcceleration.t -> unit [@@js.set "hardwareAcceleration"]
  val get_optimizeForLatency: 'tags this -> bool option [@@js.get "optimizeForLatency"]
  val set_optimizeForLatency: 'tags this -> bool -> unit [@@js.set "optimizeForLatency"]
  val create: codec:string -> ?codedHeight:float -> ?codedWidth:float -> ?colorSpace:VideoColorSpaceInit.t -> ?description:BufferSource.t -> ?displayAspectHeight:float -> ?displayAspectWidth:float -> ?hardwareAcceleration:HardwareAcceleration.t -> ?optimizeForLatency:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module EncodedVideoChunkMetadata : sig
  type t = [`EncodedVideoChunkMetadata] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EncodedVideoChunkMetadata]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EncodedVideoChunkMetadata]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EncodedVideoChunkMetadata ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_decoderConfig: 'tags this -> VideoDecoderConfig.t option [@@js.get "decoderConfig"]
  val set_decoderConfig: 'tags this -> VideoDecoderConfig.t -> unit [@@js.set "decoderConfig"]
  val create: ?decoderConfig:VideoDecoderConfig.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module EncodedVideoChunkType : sig
  type t = ([`L_s100_delta[@js "delta"] | `L_s170_key[@js "key"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module EncodedVideoChunkInit : sig
  type t = [`EncodedVideoChunkInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EncodedVideoChunkInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EncodedVideoChunkInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EncodedVideoChunkInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_data: 'tags this -> BufferSource.t [@@js.get "data"]
  val set_data: 'tags this -> BufferSource.t -> unit [@@js.set "data"]
  val get_duration: 'tags this -> float option [@@js.get "duration"]
  val set_duration: 'tags this -> float -> unit [@@js.set "duration"]
  val get_timestamp: 'tags this -> float [@@js.get "timestamp"]
  val set_timestamp: 'tags this -> float -> unit [@@js.set "timestamp"]
  val get_type: 'tags this -> EncodedVideoChunkType.t [@@js.get "type"]
  val set_type: 'tags this -> EncodedVideoChunkType.t -> unit [@@js.set "type"]
  val create: data:BufferSource.t -> ?duration:float -> timestamp:float -> type_:(EncodedVideoChunkType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk) *)
module[@js.scope "EncodedVideoChunk"] EncodedVideoChunk : sig
  type t = [`EncodedVideoChunk] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EncodedVideoChunk]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EncodedVideoChunk]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EncodedVideoChunk ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/byteLength) *)
  val get_byteLength: 'tags this -> float [@@js.get "byteLength"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/duration) *)
  val get_duration: 'tags this -> float option [@@js.get "duration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/timestamp) *)
  val get_timestamp: 'tags this -> float [@@js.get "timestamp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/type) *)
  val get_type: 'tags this -> EncodedVideoChunkType.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/copyTo) *)
  val copyTo: 'tags this -> destination:BufferSource.t -> unit [@@js.call "copyTo"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: EncodedVideoChunkInit.t -> t [@@js.create]
end
module EncodedVideoChunkOutputCallback : sig
  type t = [`EncodedVideoChunkOutputCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EncodedVideoChunkOutputCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EncodedVideoChunkOutputCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EncodedVideoChunkOutputCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> chunk:EncodedVideoChunk.t -> ?metadata:EncodedVideoChunkMetadata.t -> unit -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoEncoderInit : sig
  type t = [`VideoEncoderInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoEncoderInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoEncoderInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoEncoderInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_error: 'tags this -> WebCodecsErrorCallback.t [@@js.get "error"]
  val set_error: 'tags this -> WebCodecsErrorCallback.t -> unit [@@js.set "error"]
  val get_output: 'tags this -> EncodedVideoChunkOutputCallback.t [@@js.get "output"]
  val set_output: 'tags this -> EncodedVideoChunkOutputCallback.t -> unit [@@js.set "output"]
  val create: error:WebCodecsErrorCallback.t -> output:EncodedVideoChunkOutputCallback.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoEncoderEncodeOptions : sig
  type t = [`VideoEncoderEncodeOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoEncoderEncodeOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoEncoderEncodeOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoEncoderEncodeOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_keyFrame: 'tags this -> bool option [@@js.get "keyFrame"]
  val set_keyFrame: 'tags this -> bool -> unit [@@js.set "keyFrame"]
  val create: ?keyFrame:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CodecState : sig
  type t = ([`L_s322_unconfigured[@js "unconfigured"] | `L_s81_closed[@js "closed"] | `L_s87_configured[@js "configured"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoEncoder)
*)
module[@js.scope "VideoEncoder"] VideoEncoder : sig
  type t = [`EventTarget | `VideoEncoder] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `VideoEncoder]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `VideoEncoder]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoEncoder ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoEncoder/encodeQueueSize) *)
  val get_encodeQueueSize: 'tags this -> float [@@js.get "encodeQueueSize"]
  val get_ondequeue: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "ondequeue"]
  val set_ondequeue: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "ondequeue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoEncoder/state) *)
  val get_state: 'tags this -> CodecState.t [@@js.get "state"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoEncoder/close) *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoEncoder/configure) *)
  val configure: 'tags this -> config:VideoEncoderConfig.t -> unit [@@js.call "configure"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoEncoder/encode) *)
  val encode: 'tags this -> frame:VideoFrame.t -> ?options:VideoEncoderEncodeOptions.t -> unit -> unit [@@js.call "encode"]
  val flush: 'tags this -> unit Promise.t [@@js.call "flush"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoEncoder/reset) *)
  val reset: 'tags this -> unit [@@js.call "reset"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'VideoEncoderEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'VideoEncoderEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: VideoEncoderInit.t -> t [@@js.create]
  val isConfigSupported: VideoEncoderConfig.t -> VideoEncoderSupport.t Promise.t [@@js.global "isConfigSupported"]
end
module VideoDecoderEventMap : sig
  type t = [`VideoDecoderEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoDecoderEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoDecoderEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoDecoderEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_dequeue: 'tags this -> Event.t [@@js.get "dequeue"]
  val set_dequeue: 'tags this -> Event.t -> unit [@@js.set "dequeue"]
  val create: dequeue:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoDecoderSupport : sig
  type t = [`VideoDecoderSupport] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoDecoderSupport]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoDecoderSupport]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoDecoderSupport ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_config: 'tags this -> VideoDecoderConfig.t option [@@js.get "config"]
  val set_config: 'tags this -> VideoDecoderConfig.t -> unit [@@js.set "config"]
  val get_supported: 'tags this -> bool option [@@js.get "supported"]
  val set_supported: 'tags this -> bool -> unit [@@js.set "supported"]
  val create: ?config:VideoDecoderConfig.t -> ?supported:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoFrameOutputCallback : sig
  type t = [`VideoFrameOutputCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoFrameOutputCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoFrameOutputCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoFrameOutputCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> output:VideoFrame.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoDecoderInit : sig
  type t = [`VideoDecoderInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoDecoderInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoDecoderInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoDecoderInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_error: 'tags this -> WebCodecsErrorCallback.t [@@js.get "error"]
  val set_error: 'tags this -> WebCodecsErrorCallback.t -> unit [@@js.set "error"]
  val get_output: 'tags this -> VideoFrameOutputCallback.t [@@js.get "output"]
  val set_output: 'tags this -> VideoFrameOutputCallback.t -> unit [@@js.set "output"]
  val create: error:WebCodecsErrorCallback.t -> output:VideoFrameOutputCallback.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoDecoder)
*)
module[@js.scope "VideoDecoder"] VideoDecoder : sig
  type t = [`EventTarget | `VideoDecoder] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `VideoDecoder]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `VideoDecoder]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoDecoder ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoDecoder/decodeQueueSize) *)
  val get_decodeQueueSize: 'tags this -> float [@@js.get "decodeQueueSize"]
  val get_ondequeue: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "ondequeue"]
  val set_ondequeue: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "ondequeue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoDecoder/state) *)
  val get_state: 'tags this -> CodecState.t [@@js.get "state"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoDecoder/close) *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoDecoder/configure) *)
  val configure: 'tags this -> config:VideoDecoderConfig.t -> unit [@@js.call "configure"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoDecoder/decode) *)
  val decode: 'tags this -> chunk:EncodedVideoChunk.t -> unit [@@js.call "decode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoDecoder/flush) *)
  val flush: 'tags this -> unit Promise.t [@@js.call "flush"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoDecoder/reset) *)
  val reset: 'tags this -> unit [@@js.call "reset"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'VideoDecoderEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'VideoDecoderEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: VideoDecoderInit.t -> t [@@js.create]
  val isConfigSupported: VideoDecoderConfig.t -> VideoDecoderSupport.t Promise.t [@@js.global "isConfigSupported"]
end
module TextEncoderCommon : sig
  type t = [`TextEncoderCommon] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextEncoderCommon]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextEncoderCommon]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderCommon ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns "utf-8".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextEncoder/encoding)
  *)
  val get_encoding: 'tags this -> string [@@js.get "encoding"]
  val create: encoding:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module GenericTransformStream : sig
  type t = [`GenericTransformStream] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GenericTransformStream]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GenericTransformStream]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GenericTransformStream ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompressionStream/readable) *)
  val get_readable: 'tags this -> ReadableStream.t_0 [@@js.get "readable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompressionStream/writable) *)
  val get_writable: 'tags this -> WritableStream.t_0 [@@js.get "writable"]
  val create: readable:ReadableStream.t_0 -> writable:WritableStream.t_0 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextEncoderStream) *)
module[@js.scope "TextEncoderStream"] TextEncoderStream : sig
  type t = [`GenericTransformStream | `TextEncoderCommon | `TextEncoderStream] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GenericTransformStream | `TextEncoderCommon | `TextEncoderStream]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GenericTransformStream | `TextEncoderCommon | `TextEncoderStream]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderStream ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompressionStream/readable) *)
  val get_readable: 'tags this -> Uint8Array.t ReadableStream.t [@@js.get "readable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompressionStream/writable) *)
  val get_writable: 'tags this -> string WritableStream.t [@@js.get "writable"]
  val create: readable:Uint8Array.t ReadableStream.t -> writable:string WritableStream.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module TextEncoderEncodeIntoResult : sig
  type t = [`TextEncoderEncodeIntoResult] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextEncoderEncodeIntoResult]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextEncoderEncodeIntoResult]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderEncodeIntoResult ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_read: 'tags this -> float option [@@js.get "read"]
  val set_read: 'tags this -> float -> unit [@@js.set "read"]
  val get_written: 'tags this -> float option [@@js.get "written"]
  val set_written: 'tags this -> float -> unit [@@js.set "written"]
  val create: ?read:float -> ?written:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  TextEncoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see StringView â a C-like representation of strings based on typed arrays.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextEncoder)
*)
module[@js.scope "TextEncoder"] TextEncoder : sig
  type t = [`TextEncoder | `TextEncoderCommon] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextEncoder | `TextEncoderCommon]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextEncoder | `TextEncoderCommon]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextEncoder ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the result of running UTF-8's encoder.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextEncoder/encode)
  *)
  val encode: 'tags this -> ?input:string -> unit -> Uint8Array.t [@@js.call "encode"]
  
  (**
    Runs the UTF-8 encoder on source, stores the result of that operation into destination, and returns the progress made as an object wherein read is the number of converted code units of source and written is the number of bytes modified in destination.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextEncoder/encodeInto)
  *)
  val encodeInto: 'tags this -> source:string -> destination:Uint8Array.t -> TextEncoderEncodeIntoResult.t [@@js.call "encodeInto"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module TextDecoderOptions : sig
  type t = [`TextDecoderOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextDecoderOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextDecoderOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_fatal: 'tags this -> bool option [@@js.get "fatal"]
  val set_fatal: 'tags this -> bool -> unit [@@js.set "fatal"]
  val get_ignoreBOM: 'tags this -> bool option [@@js.get "ignoreBOM"]
  val set_ignoreBOM: 'tags this -> bool -> unit [@@js.set "ignoreBOM"]
  val create: ?fatal:bool -> ?ignoreBOM:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module TextDecoderCommon : sig
  type t = [`TextDecoderCommon] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextDecoderCommon]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextDecoderCommon]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderCommon ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns encoding's name, lowercased.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextDecoder/encoding)
  *)
  val get_encoding: 'tags this -> string [@@js.get "encoding"]
  
  (**
    Returns true if error mode is "fatal", otherwise false.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextDecoder/fatal)
  *)
  val get_fatal: 'tags this -> bool [@@js.get "fatal"]
  
  (**
    Returns the value of ignore BOM.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextDecoder/ignoreBOM)
  *)
  val get_ignoreBOM: 'tags this -> bool [@@js.get "ignoreBOM"]
  val create: encoding:string -> fatal:bool -> ignoreBOM:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextDecoderStream) *)
module[@js.scope "TextDecoderStream"] TextDecoderStream : sig
  type t = [`GenericTransformStream | `TextDecoderCommon | `TextDecoderStream] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GenericTransformStream | `TextDecoderCommon | `TextDecoderStream]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GenericTransformStream | `TextDecoderCommon | `TextDecoderStream]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderStream ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompressionStream/readable) *)
  val get_readable: 'tags this -> string ReadableStream.t [@@js.get "readable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompressionStream/writable) *)
  val get_writable: 'tags this -> BufferSource.t WritableStream.t [@@js.get "writable"]
  val create: readable:string ReadableStream.t -> writable:BufferSource.t WritableStream.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': ?label:string -> ?options:TextDecoderOptions.t -> unit -> t [@@js.create]
end
module TextDecodeOptions : sig
  type t = [`TextDecodeOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextDecodeOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextDecodeOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextDecodeOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_stream: 'tags this -> bool option [@@js.get "stream"]
  val set_stream: 'tags this -> bool -> unit [@@js.set "stream"]
  val create: ?stream:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A decoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, etc.Â A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see StringView â a C-like representation of strings based on typed arrays.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextDecoder)
*)
module[@js.scope "TextDecoder"] TextDecoder : sig
  type t = [`TextDecoder | `TextDecoderCommon] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextDecoder | `TextDecoderCommon]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextDecoder | `TextDecoderCommon]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextDecoder ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the result of running encoding's decoder. The method can be invoked zero or more times with options's stream set to true, and then once without options's stream (or set to false), to process a fragmented input. If the invocation without options's stream (or set to false) has no input, it's clearest to omit both arguments.
    
    ```
    var string = "", decoder = new TextDecoder(encoding), buffer;
    while(buffer = next_chunk()) \{
      string += decoder.decode(buffer, \{stream:true\});
    \}
    string += decoder.decode(); // end-of-queue
    ```
    
    If the error mode is "fatal" and encoding's decoder returns error, throws a TypeError.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextDecoder/decode)
  *)
  val decode: 'tags this -> ?input:BufferSource.t -> ?options:TextDecodeOptions.t -> unit -> string [@@js.call "decode"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?label:string -> ?options:TextDecoderOptions.t -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleValue) *)
module[@js.scope "CSSStyleValue"] CSSStyleValue : sig
  type t = [`CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSStyleValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val toString: 'tags this -> string [@@js.call "toString"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly) *)
module[@js.scope "StylePropertyMapReadOnly"] StylePropertyMapReadOnly : sig
  type t = [`StylePropertyMapReadOnly] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`StylePropertyMapReadOnly]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`StylePropertyMapReadOnly]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StylePropertyMapReadOnly ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> (string * CSSStyleValue.t Iterable.t) IterableIterator.t *)
  val entries: 'tags this -> (string * CSSStyleValue.t Iterable.t) IterableIterator.t [@@js.call "entries"]
  val keys: 'tags this -> string IterableIterator.t [@@js.call "keys"]
  val values: 'tags this -> CSSStyleValue.t Iterable.t IterableIterator.t [@@js.call "values"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/size) *)
  val get_size: 'tags this -> float [@@js.get "size"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/get) *)
  val get_: 'tags this -> property:string -> CSSStyleValue.t option [@@js.call "get"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/getAll) *)
  val getAll: 'tags this -> property:string -> CSSStyleValue.t list [@@js.call "getAll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/has) *)
  val has: 'tags this -> property:string -> bool [@@js.call "has"]
  val forEach: 'tags this -> callbackfn:(value:CSSStyleValue.t list -> key:string -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module PromiseRejectionEventInit : sig
  type t = [`EventInit | `PromiseRejectionEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `PromiseRejectionEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `PromiseRejectionEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PromiseRejectionEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_promise: 'tags this -> any Promise.t [@@js.get "promise"]
  val set_promise: 'tags this -> any Promise.t -> unit [@@js.set "promise"]
  val get_reason: 'tags this -> any option [@@js.get "reason"]
  val set_reason: 'tags this -> any -> unit [@@js.set "reason"]
  val create: promise:any Promise.t -> ?reason:any -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent) *)
module[@js.scope "PromiseRejectionEvent"] PromiseRejectionEvent : sig
  type t = [`Event | `PromiseRejectionEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `PromiseRejectionEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `PromiseRejectionEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PromiseRejectionEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent/promise) *)
  val get_promise: 'tags this -> any Promise.t [@@js.get "promise"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent/reason) *)
  val get_reason: 'tags this -> any [@@js.get "reason"]
  val create: promise:any Promise.t -> reason:any -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:PromiseRejectionEventInit.t -> t [@@js.create]
end
module WorkerGlobalScopeEventMap : sig
  type t = [`WorkerGlobalScopeEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WorkerGlobalScopeEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WorkerGlobalScopeEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WorkerGlobalScopeEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_error: 'tags this -> ErrorEvent.t [@@js.get "error"]
  val set_error: 'tags this -> ErrorEvent.t -> unit [@@js.set "error"]
  val get_languagechange: 'tags this -> Event.t [@@js.get "languagechange"]
  val set_languagechange: 'tags this -> Event.t -> unit [@@js.set "languagechange"]
  val get_offline: 'tags this -> Event.t [@@js.get "offline"]
  val set_offline: 'tags this -> Event.t -> unit [@@js.set "offline"]
  val get_online: 'tags this -> Event.t [@@js.get "online"]
  val set_online: 'tags this -> Event.t -> unit [@@js.set "online"]
  val get_rejectionhandled: 'tags this -> PromiseRejectionEvent.t [@@js.get "rejectionhandled"]
  val set_rejectionhandled: 'tags this -> PromiseRejectionEvent.t -> unit [@@js.set "rejectionhandled"]
  val get_unhandledrejection: 'tags this -> PromiseRejectionEvent.t [@@js.get "unhandledrejection"]
  val set_unhandledrejection: 'tags this -> PromiseRejectionEvent.t -> unit [@@js.set "unhandledrejection"]
  val create: error:ErrorEvent.t -> languagechange:Event.t -> offline:Event.t -> online:Event.t -> rejectionhandled:PromiseRejectionEvent.t -> unhandledrejection:PromiseRejectionEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module SharedWorkerGlobalScopeEventMap : sig
  type t = [`SharedWorkerGlobalScopeEventMap | `WorkerGlobalScopeEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SharedWorkerGlobalScopeEventMap | `WorkerGlobalScopeEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SharedWorkerGlobalScopeEventMap | `WorkerGlobalScopeEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SharedWorkerGlobalScopeEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_connect: 'tags this -> MessageEvent.t_0 [@@js.get "connect"]
  val set_connect: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "connect"]
  val create: connect:MessageEvent.t_0 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A subset of the Navigator interface allowed to be accessed from a Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.navigator property obtained by calling window.self.navigator.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerNavigator)
*)
module[@js.scope "WorkerNavigator"] WorkerNavigator : sig
  type t = [`NavigatorBadge | `NavigatorConcurrentHardware | `NavigatorID | `NavigatorLanguage | `NavigatorLocks | `NavigatorOnLine | `NavigatorStorage | `WorkerNavigator] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorBadge | `NavigatorConcurrentHardware | `NavigatorID | `NavigatorLanguage | `NavigatorLocks | `NavigatorOnLine | `NavigatorStorage | `WorkerNavigator]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorBadge | `NavigatorConcurrentHardware | `NavigatorID | `NavigatorLanguage | `NavigatorLocks | `NavigatorOnLine | `NavigatorStorage | `WorkerNavigator]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WorkerNavigator ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerNavigator/mediaCapabilities) *)
  val get_mediaCapabilities: 'tags this -> MediaCapabilities.t [@@js.get "mediaCapabilities"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerNavigator/permissions) *)
  val get_permissions: 'tags this -> Permissions.t [@@js.get "permissions"]
  val create: mediaCapabilities:MediaCapabilities.t -> permissions:Permissions.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  The absolute location of the script executed by the Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.location property obtained by calling self.location.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation)
*)
module[@js.scope "WorkerLocation"] WorkerLocation : sig
  type t = [`WorkerLocation] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WorkerLocation]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WorkerLocation]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WorkerLocation ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/hash) *)
  val get_hash: 'tags this -> string [@@js.get "hash"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/host) *)
  val get_host: 'tags this -> string [@@js.get "host"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/hostname) *)
  val get_hostname: 'tags this -> string [@@js.get "hostname"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/href) *)
  val get_href: 'tags this -> string [@@js.get "href"]
  val toString: 'tags this -> string [@@js.call "toString"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/origin) *)
  val get_origin: 'tags this -> string [@@js.get "origin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/pathname) *)
  val get_pathname: 'tags this -> string [@@js.get "pathname"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/port) *)
  val get_port: 'tags this -> string [@@js.get "port"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/protocol) *)
  val get_protocol: 'tags this -> string [@@js.get "protocol"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerLocation/search) *)
  val get_search: 'tags this -> string [@@js.get "search"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module VoidFunction : sig
  type t = [`VoidFunction] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VoidFunction]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VoidFunction]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VoidFunction ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module TimerHandler : sig
  type t = ([`String of string | `Other of untyped_function] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ImageBitmapSource : sig
  type t = (Blob.t, CanvasImageSource.t, ImageData.t) union3
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ResizeQuality : sig
  type t = ([`L_s150_high[@js "high"] | `L_s183_low[@js "low"] | `L_s191_medium[@js "medium"] | `L_s240_pixelated[@js "pixelated"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module PremultiplyAlpha : sig
  type t = ([`L_s212_none[@js "none"] | `L_s245_premultiply[@js "premultiply"] | `L_s97_default[@js "default"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ImageOrientation : sig
  type t = ([`L_s134_flipY[@js "flipY"] | `L_s140_from_image[@js "from-image"] | `L_s212_none[@js "none"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ColorSpaceConversion : sig
  type t = ([`L_s212_none[@js "none"] | `L_s97_default[@js "default"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ImageBitmapOptions : sig
  type t = [`ImageBitmapOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ImageBitmapOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ImageBitmapOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmapOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_colorSpaceConversion: 'tags this -> ColorSpaceConversion.t option [@@js.get "colorSpaceConversion"]
  val set_colorSpaceConversion: 'tags this -> ColorSpaceConversion.t -> unit [@@js.set "colorSpaceConversion"]
  val get_imageOrientation: 'tags this -> ImageOrientation.t option [@@js.get "imageOrientation"]
  val set_imageOrientation: 'tags this -> ImageOrientation.t -> unit [@@js.set "imageOrientation"]
  val get_premultiplyAlpha: 'tags this -> PremultiplyAlpha.t option [@@js.get "premultiplyAlpha"]
  val set_premultiplyAlpha: 'tags this -> PremultiplyAlpha.t -> unit [@@js.set "premultiplyAlpha"]
  val get_resizeHeight: 'tags this -> float option [@@js.get "resizeHeight"]
  val set_resizeHeight: 'tags this -> float -> unit [@@js.set "resizeHeight"]
  val get_resizeQuality: 'tags this -> ResizeQuality.t option [@@js.get "resizeQuality"]
  val set_resizeQuality: 'tags this -> ResizeQuality.t -> unit [@@js.set "resizeQuality"]
  val get_resizeWidth: 'tags this -> float option [@@js.get "resizeWidth"]
  val set_resizeWidth: 'tags this -> float -> unit [@@js.set "resizeWidth"]
  val create: ?colorSpaceConversion:ColorSpaceConversion.t -> ?imageOrientation:ImageOrientation.t -> ?premultiplyAlpha:PremultiplyAlpha.t -> ?resizeHeight:float -> ?resizeQuality:ResizeQuality.t -> ?resizeWidth:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory)
*)
module[@js.scope "IDBFactory"] IDBFactory : sig
  type t = [`IDBFactory] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBFactory]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBFactory]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBFactory ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Compares two values as keys. Returns -1 if key1 precedes key2, 1 if key2 precedes key1, and 0 if the keys are equal.
    
    Throws a "DataError" DOMException if either input is not a valid key.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory/cmp)
  *)
  val cmp: 'tags this -> first:any -> second:any -> float [@@js.call "cmp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory/databases) *)
  val databases: 'tags this -> IDBDatabaseInfo.t list Promise.t [@@js.call "databases"]
  
  (**
    Attempts to delete the named database. If the database already exists and there are open connections that don't close in response to a versionchange event, the request will be blocked until all they close. If the request is successful request's result will be null.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory/deleteDatabase)
  *)
  val deleteDatabase: 'tags this -> name:string -> IDBOpenDBRequest.t [@@js.call "deleteDatabase"]
  
  (**
    Attempts to open a connection to the named database with the current version, or 1 if it does not already exist. If the request is successful request's result will be the connection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory/open)
  *)
  val open_: 'tags this -> name:string -> ?version:float -> unit -> IDBOpenDBRequest.t [@@js.call "open"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Crypto)
*)
module[@js.scope "Crypto"] Crypto : sig
  type t = [`Crypto] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Crypto]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Crypto]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Crypto ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Crypto/subtle)
  *)
  val get_subtle: 'tags this -> SubtleCrypto.t [@@js.get "subtle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Crypto/getRandomValues) *)
  val getRandomValues: 'tags this -> array:'T -> 'T [@@js.call "getRandomValues"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Crypto/randomUUID)
  *)
  val randomUUID: 'tags this -> (* FIXME: unknown type '`${string}-${string}-${string}-${string}-${string}`' *)any [@@js.call "randomUUID"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The storage for Cache objects.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage)
*)
module[@js.scope "CacheStorage"] CacheStorage : sig
  type t = [`CacheStorage] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CacheStorage]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CacheStorage]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CacheStorage ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/delete) *)
  val delete: 'tags this -> cacheName:string -> bool Promise.t [@@js.call "delete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/has) *)
  val has: 'tags this -> cacheName:string -> bool Promise.t [@@js.call "has"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/keys) *)
  val keys: 'tags this -> string list Promise.t [@@js.call "keys"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/match) *)
  val match_: 'tags this -> request:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> ?options:MultiCacheQueryOptions.t -> unit -> Response.t option Promise.t [@@js.call "match"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/open) *)
  val open_: 'tags this -> cacheName:string -> Cache.t Promise.t [@@js.call "open"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module WindowOrWorkerGlobalScope : sig
  type t = [`WindowOrWorkerGlobalScope] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WindowOrWorkerGlobalScope]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WindowOrWorkerGlobalScope]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WindowOrWorkerGlobalScope ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/caches)
  *)
  val get_caches: 'tags this -> CacheStorage.t [@@js.get "caches"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/crossOriginIsolated) *)
  val get_crossOriginIsolated: 'tags this -> bool [@@js.get "crossOriginIsolated"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/crypto_property) *)
  val get_crypto: 'tags this -> Crypto.t [@@js.get "crypto"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/indexedDB) *)
  val get_indexedDB: 'tags this -> IDBFactory.t [@@js.get "indexedDB"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/isSecureContext) *)
  val get_isSecureContext: 'tags this -> bool [@@js.get "isSecureContext"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/origin) *)
  val get_origin: 'tags this -> string [@@js.get "origin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/performance_property) *)
  val get_performance: 'tags this -> Performance.t [@@js.get "performance"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/atob) *)
  val atob: 'tags this -> data:string -> string [@@js.call "atob"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/btoa) *)
  val btoa: 'tags this -> data:string -> string [@@js.call "btoa"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/clearInterval) *)
  val clearInterval: 'tags this -> id:([`Undefined of undefined | `U1 of float] [@js.union]) -> unit [@@js.call "clearInterval"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/clearTimeout) *)
  val clearTimeout: 'tags this -> id:([`Undefined of undefined | `U1 of float] [@js.union]) -> unit [@@js.call "clearTimeout"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/createImageBitmap) *)
  val createImageBitmap: 'tags this -> image:ImageBitmapSource.t -> ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t [@@js.call "createImageBitmap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/createImageBitmap) *)
  val createImageBitmap': 'tags this -> image:ImageBitmapSource.t -> sx:float -> sy:float -> sw:float -> sh:float -> ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t [@@js.call "createImageBitmap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/fetch) *)
  val fetch: 'tags this -> input:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> ?init:RequestInit.t -> unit -> Response.t Promise.t [@@js.call "fetch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/queueMicrotask) *)
  val queueMicrotask: 'tags this -> callback:VoidFunction.t -> unit [@@js.call "queueMicrotask"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/reportError) *)
  val reportError: 'tags this -> e:any -> unit [@@js.call "reportError"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/setInterval) *)
  val setInterval: 'tags this -> handler:TimerHandler.t -> ?timeout:float -> arguments:(any list [@js.variadic]) -> unit -> float [@@js.call "setInterval"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/setTimeout) *)
  val setTimeout: 'tags this -> handler:TimerHandler.t -> ?timeout:float -> arguments:(any list [@js.variadic]) -> unit -> float [@@js.call "setTimeout"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/structuredClone) *)
  val structuredClone: 'tags this -> value:'T -> ?options:StructuredSerializeOptions.t -> unit -> 'T [@@js.call "structuredClone"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FontFaceSource : sig
  type t = [`FontFaceSource] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FontFaceSource]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FontFaceSource]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSource ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fonts) *)
  val get_fonts: 'tags this -> FontFaceSet.t [@@js.get "fonts"]
  val create: fonts:FontFaceSet.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Web Workers API interface is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by Window objects â in this case event handlers, the console or the associated WorkerNavigator object. Each WorkerGlobalScope has its own event loop.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope)
*)
module[@js.scope "WorkerGlobalScope"] WorkerGlobalScope : sig
  type t = [`EventTarget | `FontFaceSource | `WindowOrWorkerGlobalScope | `WorkerGlobalScope] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `FontFaceSource | `WindowOrWorkerGlobalScope | `WorkerGlobalScope]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `FontFaceSource | `WindowOrWorkerGlobalScope | `WorkerGlobalScope]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WorkerGlobalScope ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns workerGlobal's WorkerLocation object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/location)
  *)
  val get_location: 'tags this -> WorkerLocation.t [@@js.get "location"]
  
  (**
    Returns workerGlobal's WorkerNavigator object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/navigator)
  *)
  val get_navigator: 'tags this -> WorkerNavigator.t [@@js.get "navigator"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:ErrorEvent.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:ErrorEvent.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/languagechange_event) *)
  val get_onlanguagechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onlanguagechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/languagechange_event) *)
  val set_onlanguagechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onlanguagechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/offline_event) *)
  val get_onoffline: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onoffline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/offline_event) *)
  val set_onoffline: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onoffline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/online_event) *)
  val get_ononline: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "ononline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/online_event) *)
  val set_ononline: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "ononline"]
  val get_onrejectionhandled: 'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) option [@@js.get "onrejectionhandled"]
  val set_onrejectionhandled: 'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) option -> unit [@@js.set "onrejectionhandled"]
  val get_onunhandledrejection: 'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) option [@@js.get "onunhandledrejection"]
  val set_onunhandledrejection: 'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) option -> unit [@@js.set "onunhandledrejection"]
  
  (**
    Returns workerGlobal.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/self)
  *)
  val get_self: 'tags this -> (t, (* FIXME: unknown type 'typeof globalThis' *)any) intersection2 [@@js.get "self"]
  
  (**
    Fetches each URL in urls, executes them one-by-one in the order they are passed, and then returns (or throws if something went amiss).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/importScripts)
  *)
  val importScripts: 'tags this -> urls:(([`U1 of string | `U2 of URL.t] [@js.union]) list [@js.variadic]) -> unit [@@js.call "importScripts"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'WorkerGlobalScopeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'WorkerGlobalScopeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SharedWorkerGlobalScope) *)
module[@js.scope "SharedWorkerGlobalScope"] SharedWorkerGlobalScope : sig
  type t = [`EventTarget | `FontFaceSource | `SharedWorkerGlobalScope | `WindowOrWorkerGlobalScope | `WorkerGlobalScope] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `FontFaceSource | `SharedWorkerGlobalScope | `WindowOrWorkerGlobalScope | `WorkerGlobalScope]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `FontFaceSource | `SharedWorkerGlobalScope | `WindowOrWorkerGlobalScope | `WorkerGlobalScope]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SharedWorkerGlobalScope ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns sharedWorkerGlobal's name, i.e. the value given to the SharedWorker constructor. Multiple SharedWorker objects can correspond to the same shared worker (and SharedWorkerGlobalScope), by reusing the same name.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SharedWorkerGlobalScope/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SharedWorkerGlobalScope/connect_event) *)
  val get_onconnect: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SharedWorkerGlobalScope/connect_event) *)
  val set_onconnect: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onconnect"]
  
  (**
    Aborts sharedWorkerGlobal.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SharedWorkerGlobalScope/close)
  *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SharedWorkerGlobalScopeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SharedWorkerGlobalScopeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module ServiceWorkerRegistrationEventMap : sig
  type t = [`ServiceWorkerRegistrationEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ServiceWorkerRegistrationEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ServiceWorkerRegistrationEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ServiceWorkerRegistrationEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_updatefound: 'tags this -> Event.t [@@js.get "updatefound"]
  val set_updatefound: 'tags this -> Event.t -> unit [@@js.set "updatefound"]
  val create: updatefound:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Push API interface provides methods which let you retrieve the push data sent by a server in various formats.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushMessageData)
*)
module[@js.scope "PushMessageData"] PushMessageData : sig
  type t = [`PushMessageData] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PushMessageData]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PushMessageData]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PushMessageData ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushMessageData/arrayBuffer) *)
  val arrayBuffer: 'tags this -> ArrayBuffer.t [@@js.call "arrayBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushMessageData/blob) *)
  val blob: 'tags this -> Blob.t [@@js.call "blob"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushMessageData/json) *)
  val json: 'tags this -> any [@@js.call "json"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushMessageData/text) *)
  val text: 'tags this -> string [@@js.call "text"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module PushMessageDataInit : sig
  type t = ([`String of string | `Other of BufferSource.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ExtendableEventInit : sig
  type t = [`EventInit | `ExtendableEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `ExtendableEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `ExtendableEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PushEventInit : sig
  type t = [`EventInit | `ExtendableEventInit | `PushEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `ExtendableEventInit | `PushEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `ExtendableEventInit | `PushEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PushEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_data: 'tags this -> PushMessageDataInit.t option [@@js.get "data"]
  val set_data: 'tags this -> PushMessageDataInit.t -> unit [@@js.set "data"]
  val create: ?data:PushMessageDataInit.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Extends the lifetime of the install and activate events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like FetchEvent) are not dispatched until it upgrades database schemas and deletes the outdated cache entries.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ExtendableEvent)
*)
module[@js.scope "ExtendableEvent"] ExtendableEvent : sig
  type t = [`Event | `ExtendableEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `ExtendableEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `ExtendableEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ExtendableEvent/waitUntil) *)
  val waitUntil: 'tags this -> f:any Promise.t -> unit [@@js.call "waitUntil"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: type_:string -> ?eventInitDict:ExtendableEventInit.t -> unit -> t [@@js.create]
end

(**
  This Push API interface represents a push message that has been received. This event is sent to the global scope of a ServiceWorker. It contains the information sent from an application server to a PushSubscription.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushEvent)
*)
module[@js.scope "PushEvent"] PushEvent : sig
  type t = [`Event | `ExtendableEvent | `PushEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `ExtendableEvent | `PushEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `ExtendableEvent | `PushEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PushEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushEvent/data) *)
  val get_data: 'tags this -> PushMessageData.t option [@@js.get "data"]
  val create: ?data:PushMessageData.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:PushEventInit.t -> unit -> t [@@js.create]
end
module NotificationPermission : sig
  type t = ([`L_s101_denied[@js "denied"] | `L_s145_granted[@js "granted"] | `L_s97_default[@js "default"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module VibratePattern : sig
  type t = ([`Number of float | `Other of float list] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module NotificationAction : sig
  type t = [`NotificationAction] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NotificationAction]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NotificationAction]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NotificationAction ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_action: 'tags this -> string [@@js.get "action"]
  val set_action: 'tags this -> string -> unit [@@js.set "action"]
  val get_icon: 'tags this -> string option [@@js.get "icon"]
  val set_icon: 'tags this -> string -> unit [@@js.set "icon"]
  val get_title: 'tags this -> string [@@js.get "title"]
  val set_title: 'tags this -> string -> unit [@@js.set "title"]
  val create: action:string -> ?icon:string -> title:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NotificationDirection : sig
  type t = ([`L_s185_ltr[@js "ltr"] | `L_s274_rtl[@js "rtl"] | `L_s60_auto[@js "auto"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module EpochTimeStamp : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module NotificationOptions : sig
  type t = [`NotificationOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NotificationOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NotificationOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NotificationOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_actions: 'tags this -> NotificationAction.t list option [@@js.get "actions"]
  val set_actions: 'tags this -> NotificationAction.t list -> unit [@@js.set "actions"]
  val get_badge: 'tags this -> string option [@@js.get "badge"]
  val set_badge: 'tags this -> string -> unit [@@js.set "badge"]
  val get_body: 'tags this -> string option [@@js.get "body"]
  val set_body: 'tags this -> string -> unit [@@js.set "body"]
  val get_data: 'tags this -> any option [@@js.get "data"]
  val set_data: 'tags this -> any -> unit [@@js.set "data"]
  val get_dir: 'tags this -> NotificationDirection.t option [@@js.get "dir"]
  val set_dir: 'tags this -> NotificationDirection.t -> unit [@@js.set "dir"]
  val get_icon: 'tags this -> string option [@@js.get "icon"]
  val set_icon: 'tags this -> string -> unit [@@js.set "icon"]
  val get_image: 'tags this -> string option [@@js.get "image"]
  val set_image: 'tags this -> string -> unit [@@js.set "image"]
  val get_lang: 'tags this -> string option [@@js.get "lang"]
  val set_lang: 'tags this -> string -> unit [@@js.set "lang"]
  val get_renotify: 'tags this -> bool option [@@js.get "renotify"]
  val set_renotify: 'tags this -> bool -> unit [@@js.set "renotify"]
  val get_requireInteraction: 'tags this -> bool option [@@js.get "requireInteraction"]
  val set_requireInteraction: 'tags this -> bool -> unit [@@js.set "requireInteraction"]
  val get_silent: 'tags this -> bool option [@@js.get "silent"]
  val set_silent: 'tags this -> bool -> unit [@@js.set "silent"]
  val get_tag: 'tags this -> string option [@@js.get "tag"]
  val set_tag: 'tags this -> string -> unit [@@js.set "tag"]
  val get_timestamp: 'tags this -> EpochTimeStamp.t option [@@js.get "timestamp"]
  val set_timestamp: 'tags this -> EpochTimeStamp.t -> unit [@@js.set "timestamp"]
  val get_vibrate: 'tags this -> VibratePattern.t option [@@js.get "vibrate"]
  val set_vibrate: 'tags this -> VibratePattern.t -> unit [@@js.set "vibrate"]
  val create: ?actions:NotificationAction.t list -> ?badge:string -> ?body:string -> ?data:any -> ?dir:NotificationDirection.t -> ?icon:string -> ?image:string -> ?lang:string -> ?renotify:bool -> ?requireInteraction:bool -> ?silent:bool -> ?tag:string -> ?timestamp:EpochTimeStamp.t -> ?vibrate:VibratePattern.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Notifications API interface is used to configure and display desktop notifications to the user.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification)
*)
module[@js.scope "Notification"] Notification : sig
  type t = [`EventTarget | `Notification] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `Notification]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `Notification]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Notification ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/body) *)
  val get_body: 'tags this -> string [@@js.get "body"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/data) *)
  val get_data: 'tags this -> any [@@js.get "data"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/dir) *)
  val get_dir: 'tags this -> NotificationDirection.t [@@js.get "dir"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/icon) *)
  val get_icon: 'tags this -> string [@@js.get "icon"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/lang) *)
  val get_lang: 'tags this -> string [@@js.get "lang"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/click_event) *)
  val get_onclick: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onclick"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/click_event) *)
  val set_onclick: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onclick"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/close_event) *)
  val get_onclose: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/close_event) *)
  val set_onclose: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/show_event) *)
  val get_onshow: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onshow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/show_event) *)
  val set_onshow: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onshow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/tag) *)
  val get_tag: 'tags this -> string [@@js.get "tag"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/title) *)
  val get_title: 'tags this -> string [@@js.get "title"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/close) *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'NotificationEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'NotificationEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: title:string -> ?options:NotificationOptions.t -> unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/permission) *)
  val permission: unit -> NotificationPermission.t [@@js.get "permission"]
end
module NotificationEventInit : sig
  type t = [`EventInit | `ExtendableEventInit | `NotificationEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `ExtendableEventInit | `NotificationEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `ExtendableEventInit | `NotificationEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NotificationEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_action: 'tags this -> string option [@@js.get "action"]
  val set_action: 'tags this -> string -> unit [@@js.set "action"]
  val get_notification: 'tags this -> Notification.t [@@js.get "notification"]
  val set_notification: 'tags this -> Notification.t -> unit [@@js.set "notification"]
  val create: ?action:string -> notification:Notification.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The parameter passed into the onnotificationclick handler, the NotificationEvent interface represents a notification click event that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NotificationEvent)
*)
module[@js.scope "NotificationEvent"] NotificationEvent : sig
  type t = [`Event | `ExtendableEvent | `NotificationEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `ExtendableEvent | `NotificationEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `ExtendableEvent | `NotificationEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NotificationEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NotificationEvent/action) *)
  val get_action: 'tags this -> string [@@js.get "action"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NotificationEvent/notification) *)
  val get_notification: 'tags this -> Notification.t [@@js.get "notification"]
  val create: action:string -> notification:Notification.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:NotificationEventInit.t -> t [@@js.create]
end
module FetchEventInit : sig
  type t = [`EventInit | `ExtendableEventInit | `FetchEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `ExtendableEventInit | `FetchEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `ExtendableEventInit | `FetchEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FetchEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_clientId: 'tags this -> string option [@@js.get "clientId"]
  val set_clientId: 'tags this -> string -> unit [@@js.set "clientId"]
  val get_handled: 'tags this -> undefined Promise.t option [@@js.get "handled"]
  val set_handled: 'tags this -> undefined Promise.t -> unit [@@js.set "handled"]
  val get_preloadResponse: 'tags this -> any Promise.t option [@@js.get "preloadResponse"]
  val set_preloadResponse: 'tags this -> any Promise.t -> unit [@@js.set "preloadResponse"]
  val get_replacesClientId: 'tags this -> string option [@@js.get "replacesClientId"]
  val set_replacesClientId: 'tags this -> string -> unit [@@js.set "replacesClientId"]
  val get_request: 'tags this -> Request.t [@@js.get "request"]
  val set_request: 'tags this -> Request.t -> unit [@@js.set "request"]
  val get_resultingClientId: 'tags this -> string option [@@js.get "resultingClientId"]
  val set_resultingClientId: 'tags this -> string -> unit [@@js.set "resultingClientId"]
  val create: ?clientId:string -> ?handled:undefined Promise.t -> ?preloadResponse:any Promise.t -> ?replacesClientId:string -> request:Request.t -> ?resultingClientId:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This is the event type for fetchÂ events dispatched on theÂ service worker global scope. It contains information about the fetch, including theÂ request and how the receiver will treat the response. It provides the event.respondWith() method, which allows us to provide a response to this fetch.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FetchEvent)
*)
module[@js.scope "FetchEvent"] FetchEvent : sig
  type t = [`Event | `ExtendableEvent | `FetchEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `ExtendableEvent | `FetchEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `ExtendableEvent | `FetchEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FetchEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FetchEvent/clientId) *)
  val get_clientId: 'tags this -> string [@@js.get "clientId"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FetchEvent/handled) *)
  val get_handled: 'tags this -> undefined Promise.t [@@js.get "handled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FetchEvent/preloadResponse) *)
  val get_preloadResponse: 'tags this -> any Promise.t [@@js.get "preloadResponse"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FetchEvent/request) *)
  val get_request: 'tags this -> Request.t [@@js.get "request"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FetchEvent/resultingClientId) *)
  val get_resultingClientId: 'tags this -> string [@@js.get "resultingClientId"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FetchEvent/respondWith) *)
  val respondWith: 'tags this -> r:([`U1 of Response.t | `U2 of Response.t PromiseLike.t] [@js.union]) -> unit [@@js.call "respondWith"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: type_:string -> eventInitDict:FetchEventInit.t -> t [@@js.create]
end
module FrameType : sig
  type t = ([`L_s203_nested[@js "nested"] | `L_s212_none[@js "none"] | `L_s316_top_level[@js "top-level"] | `L_s61_auxiliary[@js "auxiliary"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ClientTypes : sig
  type t = ([`L_s285_sharedworker[@js "sharedworker"] | `L_s340_window[@js "window"] | `L_s341_worker[@js "worker"] | `L_s49_all[@js "all"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  The ClientÂ interface represents an executable context such as a Worker, or a SharedWorker. Window clients are represented by the more-specificÂ WindowClient. You can getÂ Client/WindowClientÂ objects from methods such as Clients.matchAll() andÂ Clients.get().
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Client)
*)
module[@js.scope "Client"] Client : sig
  type t = [`Client] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Client]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Client]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Client ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Client/frameType) *)
  val get_frameType: 'tags this -> FrameType.t [@@js.get "frameType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Client/id) *)
  val get_id: 'tags this -> string [@@js.get "id"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Client/type) *)
  val get_type: 'tags this -> ClientTypes.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Client/url) *)
  val get_url: 'tags this -> string [@@js.get "url"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Client/postMessage) *)
  val postMessage: 'tags this -> message:any -> transfer:Transferable.t list -> unit [@@js.call "postMessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Client/postMessage) *)
  val postMessage': 'tags this -> message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit [@@js.call "postMessage"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module ExtendableMessageEventInit : sig
  type t = [`EventInit | `ExtendableEventInit | `ExtendableMessageEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `ExtendableEventInit | `ExtendableMessageEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `ExtendableEventInit | `ExtendableMessageEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ExtendableMessageEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_data: 'tags this -> any option [@@js.get "data"]
  val set_data: 'tags this -> any -> unit [@@js.set "data"]
  val get_lastEventId: 'tags this -> string option [@@js.get "lastEventId"]
  val set_lastEventId: 'tags this -> string -> unit [@@js.set "lastEventId"]
  val get_origin: 'tags this -> string option [@@js.get "origin"]
  val set_origin: 'tags this -> string -> unit [@@js.set "origin"]
  val get_ports: 'tags this -> MessagePort.t list option [@@js.get "ports"]
  val set_ports: 'tags this -> MessagePort.t list -> unit [@@js.set "ports"]
  val get_source: 'tags this -> (Client.t, MessagePort.t, ServiceWorker.t) union3 option [@@js.get "source"]
  val set_source: 'tags this -> ([`Null | `U1 of Client.t | `U2 of ServiceWorker.t | `U3 of MessagePort.t] [@js.union]) -> unit [@@js.set "source"]
  val create: ?data:any -> ?lastEventId:string -> ?origin:string -> ?ports:MessagePort.t list -> ?source:(Client.t, MessagePort.t, ServiceWorker.t) union3 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This ServiceWorker API interface represents the event object of a message event fired on a service worker (when a channel message is received on the ServiceWorkerGlobalScope from another context) â extends the lifetime of such events.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ExtendableMessageEvent)
*)
module[@js.scope "ExtendableMessageEvent"] ExtendableMessageEvent : sig
  type t = [`Event | `ExtendableEvent | `ExtendableMessageEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `ExtendableEvent | `ExtendableMessageEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `ExtendableEvent | `ExtendableMessageEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ExtendableMessageEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ExtendableMessageEvent/data) *)
  val get_data: 'tags this -> any [@@js.get "data"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ExtendableMessageEvent/lastEventId) *)
  val get_lastEventId: 'tags this -> string [@@js.get "lastEventId"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ExtendableMessageEvent/origin) *)
  val get_origin: 'tags this -> string [@@js.get "origin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ExtendableMessageEvent/ports) *)
  val get_ports: 'tags this -> MessagePort.t list [@@js.get "ports"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ExtendableMessageEvent/source) *)
  val get_source: 'tags this -> (Client.t, MessagePort.t, ServiceWorker.t) union3 option [@@js.get "source"]
  val create: data:any -> lastEventId:string -> origin:string -> ports:MessagePort.t list -> ?source:(Client.t, MessagePort.t, ServiceWorker.t) union3 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:ExtendableMessageEventInit.t -> unit -> t [@@js.create]
end
module ServiceWorkerGlobalScopeEventMap : sig
  type t = [`ServiceWorkerGlobalScopeEventMap | `WorkerGlobalScopeEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ServiceWorkerGlobalScopeEventMap | `WorkerGlobalScopeEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ServiceWorkerGlobalScopeEventMap | `WorkerGlobalScopeEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ServiceWorkerGlobalScopeEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_activate: 'tags this -> ExtendableEvent.t [@@js.get "activate"]
  val set_activate: 'tags this -> ExtendableEvent.t -> unit [@@js.set "activate"]
  val get_fetch: 'tags this -> FetchEvent.t [@@js.get "fetch"]
  val set_fetch: 'tags this -> FetchEvent.t -> unit [@@js.set "fetch"]
  val get_install: 'tags this -> ExtendableEvent.t [@@js.get "install"]
  val set_install: 'tags this -> ExtendableEvent.t -> unit [@@js.set "install"]
  val get_message: 'tags this -> ExtendableMessageEvent.t [@@js.get "message"]
  val set_message: 'tags this -> ExtendableMessageEvent.t -> unit [@@js.set "message"]
  val get_messageerror: 'tags this -> MessageEvent.t_0 [@@js.get "messageerror"]
  val set_messageerror: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "messageerror"]
  val get_notificationclick: 'tags this -> NotificationEvent.t [@@js.get "notificationclick"]
  val set_notificationclick: 'tags this -> NotificationEvent.t -> unit [@@js.set "notificationclick"]
  val get_notificationclose: 'tags this -> NotificationEvent.t [@@js.get "notificationclose"]
  val set_notificationclose: 'tags this -> NotificationEvent.t -> unit [@@js.set "notificationclose"]
  val get_push: 'tags this -> PushEvent.t [@@js.get "push"]
  val set_push: 'tags this -> PushEvent.t -> unit [@@js.set "push"]
  val get_pushsubscriptionchange: 'tags this -> Event.t [@@js.get "pushsubscriptionchange"]
  val set_pushsubscriptionchange: 'tags this -> Event.t -> unit [@@js.set "pushsubscriptionchange"]
  val create: activate:ExtendableEvent.t -> fetch:FetchEvent.t -> install:ExtendableEvent.t -> message:ExtendableMessageEvent.t -> messageerror:MessageEvent.t_0 -> notificationclick:NotificationEvent.t -> notificationclose:NotificationEvent.t -> push:PushEvent.t -> pushsubscriptionchange:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ServiceWorkerUpdateViaCache : sig
  type t = ([`L_s160_imports[@js "imports"] | `L_s212_none[@js "none"] | `L_s49_all[@js "all"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module PushSubscriptionOptionsInit : sig
  type t = [`PushSubscriptionOptionsInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PushSubscriptionOptionsInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PushSubscriptionOptionsInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PushSubscriptionOptionsInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_applicationServerKey: 'tags this -> ([`String of string | `Null | `Undefined | `Other of BufferSource.t] [@js.union on_field "dummy"]) Primitive.t [@@js.get "applicationServerKey"]
  val set_applicationServerKey: 'tags this -> ([`Null | `U1 of BufferSource.t | `U2 of string] [@js.union]) -> unit [@@js.set "applicationServerKey"]
  val get_userVisibleOnly: 'tags this -> bool option [@@js.get "userVisibleOnly"]
  val set_userVisibleOnly: 'tags this -> bool -> unit [@@js.set "userVisibleOnly"]
  val create: ?applicationServerKey:([`String of string | `Other of BufferSource.t] [@js.union on_field "dummy"]) Primitive.t -> ?userVisibleOnly:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions)
*)
module[@js.scope "PushSubscriptionOptions"] PushSubscriptionOptions : sig
  type t = [`PushSubscriptionOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PushSubscriptionOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PushSubscriptionOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PushSubscriptionOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions/applicationServerKey) *)
  val get_applicationServerKey: 'tags this -> ArrayBuffer.t option [@@js.get "applicationServerKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions/userVisibleOnly) *)
  val get_userVisibleOnly: 'tags this -> bool [@@js.get "userVisibleOnly"]
  val create: ?applicationServerKey:ArrayBuffer.t -> userVisibleOnly:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module PushSubscriptionJSON : sig
  type t = [`PushSubscriptionJSON] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PushSubscriptionJSON]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PushSubscriptionJSON]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PushSubscriptionJSON ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_endpoint: 'tags this -> string option [@@js.get "endpoint"]
  val set_endpoint: 'tags this -> string -> unit [@@js.set "endpoint"]
  val get_expirationTime: 'tags this -> EpochTimeStamp.t option [@@js.get "expirationTime"]
  val set_expirationTime: 'tags this -> EpochTimeStamp.t option -> unit [@@js.set "expirationTime"]
  val get_keys: 'tags this -> (string, string) Record.t option [@@js.get "keys"]
  val set_keys: 'tags this -> (string, string) Record.t -> unit [@@js.set "keys"]
  val create: ?endpoint:string -> ?expirationTime:EpochTimeStamp.t -> ?keys:(string, string) Record.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PushEncryptionKeyName : sig
  type t = ([`L_s232_p256dh[@js "p256dh"] | `L_s59_auth[@js "auth"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  This Push API interface provides a subcription's URL endpoint and allows unsubscription from a push service.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscription)
*)
module[@js.scope "PushSubscription"] PushSubscription : sig
  type t = [`PushSubscription] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PushSubscription]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PushSubscription]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PushSubscription ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscription/endpoint) *)
  val get_endpoint: 'tags this -> string [@@js.get "endpoint"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscription/expirationTime) *)
  val get_expirationTime: 'tags this -> EpochTimeStamp.t option [@@js.get "expirationTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscription/options) *)
  val get_options: 'tags this -> PushSubscriptionOptions.t [@@js.get "options"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscription/getKey) *)
  val getKey: 'tags this -> name:PushEncryptionKeyName.t -> ArrayBuffer.t option [@@js.call "getKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscription/toJSON) *)
  val toJSON: 'tags this -> PushSubscriptionJSON.t [@@js.call "toJSON"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscription/unsubscribe) *)
  val unsubscribe: 'tags this -> bool Promise.t [@@js.call "unsubscribe"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  This Push API interface provides a way to receive notifications from third-party servers as well as request URLs for push notifications.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushManager)
*)
module[@js.scope "PushManager"] PushManager : sig
  type t = [`PushManager] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PushManager]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PushManager]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PushManager ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushManager/getSubscription) *)
  val getSubscription: 'tags this -> PushSubscription.t option Promise.t [@@js.call "getSubscription"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushManager/permissionState) *)
  val permissionState: 'tags this -> ?options:PushSubscriptionOptionsInit.t -> unit -> PermissionState.t Promise.t [@@js.call "permissionState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushManager/subscribe) *)
  val subscribe: 'tags this -> ?options:PushSubscriptionOptionsInit.t -> unit -> PushSubscription.t Promise.t [@@js.call "subscribe"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushManager/supportedContentEncodings) *)
  val supportedContentEncodings: unit -> string list [@@js.get "supportedContentEncodings"]
end
module NavigationPreloadState : sig
  type t = [`NavigationPreloadState] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigationPreloadState]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigationPreloadState]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigationPreloadState ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_enabled: 'tags this -> bool option [@@js.get "enabled"]
  val set_enabled: 'tags this -> bool -> unit [@@js.set "enabled"]
  val get_headerValue: 'tags this -> string option [@@js.get "headerValue"]
  val set_headerValue: 'tags this -> string -> unit [@@js.set "headerValue"]
  val create: ?enabled:bool -> ?headerValue:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager)
*)
module[@js.scope "NavigationPreloadManager"] NavigationPreloadManager : sig
  type t = [`NavigationPreloadManager] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigationPreloadManager]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigationPreloadManager]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigationPreloadManager ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/disable) *)
  val disable: 'tags this -> unit Promise.t [@@js.call "disable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/enable) *)
  val enable: 'tags this -> unit Promise.t [@@js.call "enable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/getState) *)
  val getState: 'tags this -> NavigationPreloadState.t Promise.t [@@js.call "getState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/setHeaderValue) *)
  val setHeaderValue: 'tags this -> value:string -> unit Promise.t [@@js.call "setHeaderValue"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module GetNotificationOptions : sig
  type t = [`GetNotificationOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GetNotificationOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GetNotificationOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GetNotificationOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_tag: 'tags this -> string option [@@js.get "tag"]
  val set_tag: 'tags this -> string -> unit [@@js.set "tag"]
  val create: ?tag:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This ServiceWorker API interface represents the service worker registration. You register a service worker to control one or more pages that share the same origin.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration)
*)
module[@js.scope "ServiceWorkerRegistration"] ServiceWorkerRegistration : sig
  type t = [`EventTarget | `ServiceWorkerRegistration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `ServiceWorkerRegistration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `ServiceWorkerRegistration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ServiceWorkerRegistration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/active) *)
  val get_active: 'tags this -> ServiceWorker.t option [@@js.get "active"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/installing) *)
  val get_installing: 'tags this -> ServiceWorker.t option [@@js.get "installing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/navigationPreload) *)
  val get_navigationPreload: 'tags this -> NavigationPreloadManager.t [@@js.get "navigationPreload"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updatefound_event) *)
  val get_onupdatefound: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onupdatefound"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updatefound_event) *)
  val set_onupdatefound: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onupdatefound"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/pushManager) *)
  val get_pushManager: 'tags this -> PushManager.t [@@js.get "pushManager"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/scope) *)
  val get_scope: 'tags this -> string [@@js.get "scope"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updateViaCache) *)
  val get_updateViaCache: 'tags this -> ServiceWorkerUpdateViaCache.t [@@js.get "updateViaCache"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/waiting) *)
  val get_waiting: 'tags this -> ServiceWorker.t option [@@js.get "waiting"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/getNotifications) *)
  val getNotifications: 'tags this -> ?filter:GetNotificationOptions.t -> unit -> Notification.t list Promise.t [@@js.call "getNotifications"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/showNotification) *)
  val showNotification: 'tags this -> title:string -> ?options:NotificationOptions.t -> unit -> unit Promise.t [@@js.call "showNotification"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/unregister) *)
  val unregister: 'tags this -> bool Promise.t [@@js.call "unregister"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/update) *)
  val update: 'tags this -> unit Promise.t [@@js.call "update"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ServiceWorkerRegistrationEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ServiceWorkerRegistrationEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module DocumentVisibilityState : sig
  type t = ([`L_s149_hidden[@js "hidden"] | `L_s335_visible[@js "visible"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  This ServiceWorker API interface represents the scope of a service worker client that is a document in a browser context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WindowClient)
*)
module[@js.scope "WindowClient"] WindowClient : sig
  type t = [`Client | `WindowClient] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Client | `WindowClient]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Client | `WindowClient]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WindowClient ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WindowClient/focused) *)
  val get_focused: 'tags this -> bool [@@js.get "focused"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WindowClient/visibilityState) *)
  val get_visibilityState: 'tags this -> DocumentVisibilityState.t [@@js.get "visibilityState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WindowClient/focus) *)
  val focus: 'tags this -> t Promise.t [@@js.call "focus"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WindowClient/navigate) *)
  val navigate: 'tags this -> url:([`U1 of string | `U2 of URL.t] [@js.union]) -> t option Promise.t [@@js.call "navigate"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module ClientQueryOptions : sig
  type t = [`ClientQueryOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ClientQueryOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ClientQueryOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ClientQueryOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_includeUncontrolled: 'tags this -> bool option [@@js.get "includeUncontrolled"]
  val set_includeUncontrolled: 'tags this -> bool -> unit [@@js.set "includeUncontrolled"]
  val get_type: 'tags this -> ClientTypes.t option [@@js.get "type"]
  val set_type: 'tags this -> ClientTypes.t -> unit [@@js.set "type"]
  val create: ?includeUncontrolled:bool -> ?type_:(ClientTypes.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Provides access toÂ ClientÂ objects. Access itÂ via self.clientsÂ within aÂ service worker.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Clients)
*)
module[@js.scope "Clients"] Clients : sig
  type t = [`Clients] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Clients]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Clients]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Clients ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Clients/claim) *)
  val claim: 'tags this -> unit Promise.t [@@js.call "claim"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Clients/get) *)
  val get_: 'tags this -> id:string -> Client.t option Promise.t [@@js.call "get"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Clients/matchAll) *)
  val matchAll: 'tags this -> ?options:'T -> unit -> (* FIXME: unknown type 'T["type"] extends "window" ? WindowClient : Client' *)any list Promise.t [@@js.call "matchAll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Clients/openWindow) *)
  val openWindow: 'tags this -> url:([`U1 of string | `U2 of URL.t] [@js.union]) -> WindowClient.t option Promise.t [@@js.call "openWindow"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  This ServiceWorker API interface represents the global execution context of a service worker.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope)
*)
module[@js.scope "ServiceWorkerGlobalScope"] ServiceWorkerGlobalScope : sig
  type t = [`EventTarget | `FontFaceSource | `ServiceWorkerGlobalScope | `WindowOrWorkerGlobalScope | `WorkerGlobalScope] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `FontFaceSource | `ServiceWorkerGlobalScope | `WindowOrWorkerGlobalScope | `WorkerGlobalScope]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `FontFaceSource | `ServiceWorkerGlobalScope | `WindowOrWorkerGlobalScope | `WorkerGlobalScope]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ServiceWorkerGlobalScope ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/clients) *)
  val get_clients: 'tags this -> Clients.t [@@js.get "clients"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/activate_event) *)
  val get_onactivate: 'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option [@@js.get "onactivate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/activate_event) *)
  val set_onactivate: 'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option -> unit [@@js.set "onactivate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/fetch_event) *)
  val get_onfetch: 'tags this -> (this:t -> ev:FetchEvent.t -> any) option [@@js.get "onfetch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/fetch_event) *)
  val set_onfetch: 'tags this -> (this:t -> ev:FetchEvent.t -> any) option -> unit [@@js.set "onfetch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/install_event) *)
  val get_oninstall: 'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option [@@js.get "oninstall"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/install_event) *)
  val set_oninstall: 'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option -> unit [@@js.set "oninstall"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:ExtendableMessageEvent.t -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:ExtendableMessageEvent.t -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/messageerror_event) *)
  val get_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessageerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/messageerror_event) *)
  val set_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessageerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/notificationclick_event) *)
  val get_onnotificationclick: 'tags this -> (this:t -> ev:NotificationEvent.t -> any) option [@@js.get "onnotificationclick"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/notificationclick_event) *)
  val set_onnotificationclick: 'tags this -> (this:t -> ev:NotificationEvent.t -> any) option -> unit [@@js.set "onnotificationclick"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/notificationclose_event) *)
  val get_onnotificationclose: 'tags this -> (this:t -> ev:NotificationEvent.t -> any) option [@@js.get "onnotificationclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/notificationclose_event) *)
  val set_onnotificationclose: 'tags this -> (this:t -> ev:NotificationEvent.t -> any) option -> unit [@@js.set "onnotificationclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/push_event) *)
  val get_onpush: 'tags this -> (this:t -> ev:PushEvent.t -> any) option [@@js.get "onpush"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/push_event) *)
  val set_onpush: 'tags this -> (this:t -> ev:PushEvent.t -> any) option -> unit [@@js.set "onpush"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/pushsubscriptionchange_event) *)
  val get_onpushsubscriptionchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onpushsubscriptionchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/pushsubscriptionchange_event) *)
  val set_onpushsubscriptionchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onpushsubscriptionchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/registration) *)
  val get_registration: 'tags this -> ServiceWorkerRegistration.t [@@js.get "registration"]
  val get_serviceWorker: 'tags this -> ServiceWorker.t [@@js.get "serviceWorker"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/skipWaiting) *)
  val skipWaiting: 'tags this -> unit Promise.t [@@js.call "skipWaiting"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ServiceWorkerGlobalScopeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ServiceWorkerGlobalScopeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module ServiceWorkerEventMap : sig
  type t = [`AbstractWorkerEventMap | `ServiceWorkerEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbstractWorkerEventMap | `ServiceWorkerEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbstractWorkerEventMap | `ServiceWorkerEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ServiceWorkerEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_statechange: 'tags this -> Event.t [@@js.get "statechange"]
  val set_statechange: 'tags this -> Event.t -> unit [@@js.set "statechange"]
  val create: statechange:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ServiceWorkerContainerEventMap : sig
  type t = [`ServiceWorkerContainerEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ServiceWorkerContainerEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ServiceWorkerContainerEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ServiceWorkerContainerEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_controllerchange: 'tags this -> Event.t [@@js.get "controllerchange"]
  val set_controllerchange: 'tags this -> Event.t -> unit [@@js.set "controllerchange"]
  val get_message: 'tags this -> MessageEvent.t_0 [@@js.get "message"]
  val set_message: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "message"]
  val get_messageerror: 'tags this -> MessageEvent.t_0 [@@js.get "messageerror"]
  val set_messageerror: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "messageerror"]
  val create: controllerchange:Event.t -> message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RegistrationOptions : sig
  type t = [`RegistrationOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RegistrationOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RegistrationOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RegistrationOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_scope: 'tags this -> string option [@@js.get "scope"]
  val set_scope: 'tags this -> string -> unit [@@js.set "scope"]
  val get_type: 'tags this -> WorkerType.t option [@@js.get "type"]
  val set_type: 'tags this -> WorkerType.t -> unit [@@js.set "type"]
  val get_updateViaCache: 'tags this -> ServiceWorkerUpdateViaCache.t option [@@js.get "updateViaCache"]
  val set_updateViaCache: 'tags this -> ServiceWorkerUpdateViaCache.t -> unit [@@js.set "updateViaCache"]
  val create: ?scope:string -> ?type_:(WorkerType.t[@js "type"]) -> ?updateViaCache:ServiceWorkerUpdateViaCache.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  TheÂ ServiceWorkerContainerÂ interface of theÂ ServiceWorker APIÂ provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer)
*)
module[@js.scope "ServiceWorkerContainer"] ServiceWorkerContainer : sig
  type t = [`EventTarget | `ServiceWorkerContainer] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `ServiceWorkerContainer]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `ServiceWorkerContainer]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ServiceWorkerContainer ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controller) *)
  val get_controller: 'tags this -> ServiceWorker.t option [@@js.get "controller"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controllerchange_event) *)
  val get_oncontrollerchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "oncontrollerchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controllerchange_event) *)
  val set_oncontrollerchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "oncontrollerchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/messageerror_event) *)
  val get_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessageerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/messageerror_event) *)
  val set_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessageerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/ready) *)
  val get_ready: 'tags this -> ServiceWorkerRegistration.t Promise.t [@@js.get "ready"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/getRegistration) *)
  val getRegistration: 'tags this -> ?clientURL:([`U1 of string | `U2 of URL.t] [@js.union]) -> unit -> ServiceWorkerRegistration.t option Promise.t [@@js.call "getRegistration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/getRegistrations) *)
  val getRegistrations: 'tags this -> ServiceWorkerRegistration.t list Promise.t [@@js.call "getRegistrations"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/register) *)
  val register: 'tags this -> scriptURL:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?options:RegistrationOptions.t -> unit -> ServiceWorkerRegistration.t Promise.t [@@js.call "register"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/startMessages) *)
  val startMessages: 'tags this -> unit [@@js.call "startMessages"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ServiceWorkerContainerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ServiceWorkerContainerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module SecurityPolicyViolationEventDisposition : sig
  type t = ([`L_s119_enforce[@js "enforce"] | `L_s268_report[@js "report"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module SecurityPolicyViolationEventInit : sig
  type t = [`EventInit | `SecurityPolicyViolationEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `SecurityPolicyViolationEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `SecurityPolicyViolationEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SecurityPolicyViolationEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_blockedURI: 'tags this -> string option [@@js.get "blockedURI"]
  val set_blockedURI: 'tags this -> string -> unit [@@js.set "blockedURI"]
  val get_columnNumber: 'tags this -> float option [@@js.get "columnNumber"]
  val set_columnNumber: 'tags this -> float -> unit [@@js.set "columnNumber"]
  val get_disposition: 'tags this -> SecurityPolicyViolationEventDisposition.t [@@js.get "disposition"]
  val set_disposition: 'tags this -> SecurityPolicyViolationEventDisposition.t -> unit [@@js.set "disposition"]
  val get_documentURI: 'tags this -> string [@@js.get "documentURI"]
  val set_documentURI: 'tags this -> string -> unit [@@js.set "documentURI"]
  val get_effectiveDirective: 'tags this -> string [@@js.get "effectiveDirective"]
  val set_effectiveDirective: 'tags this -> string -> unit [@@js.set "effectiveDirective"]
  val get_lineNumber: 'tags this -> float option [@@js.get "lineNumber"]
  val set_lineNumber: 'tags this -> float -> unit [@@js.set "lineNumber"]
  val get_originalPolicy: 'tags this -> string [@@js.get "originalPolicy"]
  val set_originalPolicy: 'tags this -> string -> unit [@@js.set "originalPolicy"]
  val get_referrer: 'tags this -> string option [@@js.get "referrer"]
  val set_referrer: 'tags this -> string -> unit [@@js.set "referrer"]
  val get_sample: 'tags this -> string option [@@js.get "sample"]
  val set_sample: 'tags this -> string -> unit [@@js.set "sample"]
  val get_sourceFile: 'tags this -> string option [@@js.get "sourceFile"]
  val set_sourceFile: 'tags this -> string -> unit [@@js.set "sourceFile"]
  val get_statusCode: 'tags this -> float [@@js.get "statusCode"]
  val set_statusCode: 'tags this -> float -> unit [@@js.set "statusCode"]
  val get_violatedDirective: 'tags this -> string [@@js.get "violatedDirective"]
  val set_violatedDirective: 'tags this -> string -> unit [@@js.set "violatedDirective"]
  val create: ?blockedURI:string -> ?columnNumber:float -> disposition:SecurityPolicyViolationEventDisposition.t -> documentURI:string -> effectiveDirective:string -> ?lineNumber:float -> originalPolicy:string -> ?referrer:string -> ?sample:string -> ?sourceFile:string -> statusCode:float -> violatedDirective:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Inherits from Event, and represents the event object of an event sent on a document or worker when its content security policy is violated.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent)
*)
module[@js.scope "SecurityPolicyViolationEvent"] SecurityPolicyViolationEvent : sig
  type t = [`Event | `SecurityPolicyViolationEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `SecurityPolicyViolationEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `SecurityPolicyViolationEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SecurityPolicyViolationEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/blockedURI) *)
  val get_blockedURI: 'tags this -> string [@@js.get "blockedURI"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/columnNumber) *)
  val get_columnNumber: 'tags this -> float [@@js.get "columnNumber"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/disposition) *)
  val get_disposition: 'tags this -> SecurityPolicyViolationEventDisposition.t [@@js.get "disposition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/documentURI) *)
  val get_documentURI: 'tags this -> string [@@js.get "documentURI"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/effectiveDirective) *)
  val get_effectiveDirective: 'tags this -> string [@@js.get "effectiveDirective"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/lineNumber) *)
  val get_lineNumber: 'tags this -> float [@@js.get "lineNumber"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/originalPolicy) *)
  val get_originalPolicy: 'tags this -> string [@@js.get "originalPolicy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/referrer) *)
  val get_referrer: 'tags this -> string [@@js.get "referrer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/sample) *)
  val get_sample: 'tags this -> string [@@js.get "sample"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/sourceFile) *)
  val get_sourceFile: 'tags this -> string [@@js.get "sourceFile"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/statusCode) *)
  val get_statusCode: 'tags this -> float [@@js.get "statusCode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/violatedDirective) *)
  val get_violatedDirective: 'tags this -> string [@@js.get "violatedDirective"]
  val create: blockedURI:string -> columnNumber:float -> disposition:SecurityPolicyViolationEventDisposition.t -> documentURI:string -> effectiveDirective:string -> lineNumber:float -> originalPolicy:string -> referrer:string -> sample:string -> sourceFile:string -> statusCode:float -> violatedDirective:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:SecurityPolicyViolationEventInit.t -> unit -> t [@@js.create]
end
module ReportingObserverOptions : sig
  type t = [`ReportingObserverOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReportingObserverOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReportingObserverOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReportingObserverOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_buffered: 'tags this -> bool option [@@js.get "buffered"]
  val set_buffered: 'tags this -> bool -> unit [@@js.set "buffered"]
  val get_types: 'tags this -> string list option [@@js.get "types"]
  val set_types: 'tags this -> string list -> unit [@@js.set "types"]
  val create: ?buffered:bool -> ?types:string list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReportBody) *)
module[@js.scope "ReportBody"] ReportBody : sig
  type t = [`ReportBody] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReportBody]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReportBody]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReportBody ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Report) *)
module[@js.scope "Report"] Report : sig
  type t = [`Report] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Report]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Report]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Report ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Report/body) *)
  val get_body: 'tags this -> ReportBody.t option [@@js.get "body"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Report/type) *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Report/url) *)
  val get_url: 'tags this -> string [@@js.get "url"]
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module ReportList : sig
  type t = Report.t list
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReportingObserver) *)
module[@js.scope "ReportingObserver"] rec ReportingObserver : sig
  type t = [`ReportingObserver] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReportingObserver]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReportingObserver]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReportingObserver ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReportingObserver/disconnect) *)
  val disconnect: 'tags this -> unit [@@js.call "disconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReportingObserver/observe) *)
  val observe: 'tags this -> unit [@@js.call "observe"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReportingObserver/takeRecords) *)
  val takeRecords: 'tags this -> ReportList.t [@@js.call "takeRecords"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: callback:ReportingObserverCallback.t -> ?options:ReportingObserverOptions.t -> unit -> t [@@js.create]
end
and ReportingObserverCallback : sig
  type t = [`ReportingObserverCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReportingObserverCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReportingObserverCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReportingObserverCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> reports:Report.t list -> observer:ReportingObserver.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCEncodedVideoFrameType : sig
  type t = ([`L_s100_delta[@js "delta"] | `L_s116_empty[@js "empty"] | `L_s170_key[@js "key"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCEncodedVideoFrameMetadata : sig
  type t = [`RTCEncodedVideoFrameMetadata] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCEncodedVideoFrameMetadata]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCEncodedVideoFrameMetadata]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCEncodedVideoFrameMetadata ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_contributingSources: 'tags this -> float list option [@@js.get "contributingSources"]
  val set_contributingSources: 'tags this -> float list -> unit [@@js.set "contributingSources"]
  val get_dependencies: 'tags this -> float list option [@@js.get "dependencies"]
  val set_dependencies: 'tags this -> float list -> unit [@@js.set "dependencies"]
  val get_frameId: 'tags this -> float option [@@js.get "frameId"]
  val set_frameId: 'tags this -> float -> unit [@@js.set "frameId"]
  val get_height: 'tags this -> float option [@@js.get "height"]
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  val get_spatialIndex: 'tags this -> float option [@@js.get "spatialIndex"]
  val set_spatialIndex: 'tags this -> float -> unit [@@js.set "spatialIndex"]
  val get_synchronizationSource: 'tags this -> float option [@@js.get "synchronizationSource"]
  val set_synchronizationSource: 'tags this -> float -> unit [@@js.set "synchronizationSource"]
  val get_temporalIndex: 'tags this -> float option [@@js.get "temporalIndex"]
  val set_temporalIndex: 'tags this -> float -> unit [@@js.set "temporalIndex"]
  val get_width: 'tags this -> float option [@@js.get "width"]
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  val create: ?contributingSources:float list -> ?dependencies:float list -> ?frameId:float -> ?height:float -> ?spatialIndex:float -> ?synchronizationSource:float -> ?temporalIndex:float -> ?width:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module[@js.scope "RTCEncodedVideoFrame"] RTCEncodedVideoFrame : sig
  type t = [`RTCEncodedVideoFrame] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCEncodedVideoFrame]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCEncodedVideoFrame]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCEncodedVideoFrame ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_data: 'tags this -> ArrayBuffer.t [@@js.get "data"]
  val set_data: 'tags this -> ArrayBuffer.t -> unit [@@js.set "data"]
  val get_timestamp: 'tags this -> float [@@js.get "timestamp"]
  val get_type: 'tags this -> RTCEncodedVideoFrameType.t [@@js.get "type"]
  val getMetadata: 'tags this -> RTCEncodedVideoFrameMetadata.t [@@js.call "getMetadata"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module RTCEncodedAudioFrameMetadata : sig
  type t = [`RTCEncodedAudioFrameMetadata] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCEncodedAudioFrameMetadata]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCEncodedAudioFrameMetadata]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCEncodedAudioFrameMetadata ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_contributingSources: 'tags this -> float list option [@@js.get "contributingSources"]
  val set_contributingSources: 'tags this -> float list -> unit [@@js.set "contributingSources"]
  val get_synchronizationSource: 'tags this -> float option [@@js.get "synchronizationSource"]
  val set_synchronizationSource: 'tags this -> float -> unit [@@js.set "synchronizationSource"]
  val create: ?contributingSources:float list -> ?synchronizationSource:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module[@js.scope "RTCEncodedAudioFrame"] RTCEncodedAudioFrame : sig
  type t = [`RTCEncodedAudioFrame] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCEncodedAudioFrame]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCEncodedAudioFrame]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCEncodedAudioFrame ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_data: 'tags this -> ArrayBuffer.t [@@js.get "data"]
  val set_data: 'tags this -> ArrayBuffer.t -> unit [@@js.set "data"]
  val get_timestamp: 'tags this -> float [@@js.get "timestamp"]
  val getMetadata: 'tags this -> RTCEncodedAudioFrameMetadata.t [@@js.call "getMetadata"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module PermissionStatusEventMap : sig
  type t = [`PermissionStatusEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PermissionStatusEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PermissionStatusEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PermissionStatusEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_change: 'tags this -> Event.t [@@js.get "change"]
  val set_change: 'tags this -> Event.t -> unit [@@js.set "change"]
  val create: change:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming) *)
module[@js.scope "PerformanceServerTiming"] PerformanceServerTiming : sig
  type t = [`PerformanceServerTiming] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceServerTiming]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceServerTiming]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceServerTiming ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/description) *)
  val get_description: 'tags this -> string [@@js.get "description"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/duration) *)
  val get_duration: 'tags this -> DOMHighResTimeStamp.t [@@js.get "duration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, <SVG>, image, or script.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming)
*)
module[@js.scope "PerformanceResourceTiming"] PerformanceResourceTiming : sig
  type t = [`PerformanceEntry | `PerformanceResourceTiming] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceEntry | `PerformanceResourceTiming]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceEntry | `PerformanceResourceTiming]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceResourceTiming ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/connectEnd) *)
  val get_connectEnd: 'tags this -> DOMHighResTimeStamp.t [@@js.get "connectEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/connectStart) *)
  val get_connectStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "connectStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/decodedBodySize) *)
  val get_decodedBodySize: 'tags this -> float [@@js.get "decodedBodySize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/domainLookupEnd) *)
  val get_domainLookupEnd: 'tags this -> DOMHighResTimeStamp.t [@@js.get "domainLookupEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/domainLookupStart) *)
  val get_domainLookupStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "domainLookupStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/encodedBodySize) *)
  val get_encodedBodySize: 'tags this -> float [@@js.get "encodedBodySize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/fetchStart) *)
  val get_fetchStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "fetchStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/initiatorType) *)
  val get_initiatorType: 'tags this -> string [@@js.get "initiatorType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/nextHopProtocol) *)
  val get_nextHopProtocol: 'tags this -> string [@@js.get "nextHopProtocol"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/redirectEnd) *)
  val get_redirectEnd: 'tags this -> DOMHighResTimeStamp.t [@@js.get "redirectEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/redirectStart) *)
  val get_redirectStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "redirectStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/requestStart) *)
  val get_requestStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "requestStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseEnd) *)
  val get_responseEnd: 'tags this -> DOMHighResTimeStamp.t [@@js.get "responseEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseStart) *)
  val get_responseStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "responseStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/secureConnectionStart) *)
  val get_secureConnectionStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "secureConnectionStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/serverTiming) *)
  val get_serverTiming: 'tags this -> PerformanceServerTiming.t list [@@js.get "serverTiming"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/transferSize) *)
  val get_transferSize: 'tags this -> float [@@js.get "transferSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/workerStart) *)
  val get_workerStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "workerStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module PerformanceObserverInit : sig
  type t = [`PerformanceObserverInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceObserverInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceObserverInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceObserverInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_buffered: 'tags this -> bool option [@@js.get "buffered"]
  val set_buffered: 'tags this -> bool -> unit [@@js.set "buffered"]
  val get_entryTypes: 'tags this -> string list option [@@js.get "entryTypes"]
  val set_entryTypes: 'tags this -> string list -> unit [@@js.set "entryTypes"]
  val get_type: 'tags this -> string option [@@js.get "type"]
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  val create: ?buffered:bool -> ?entryTypes:string list -> ?type_:(string[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList) *)
module[@js.scope "PerformanceObserverEntryList"] PerformanceObserverEntryList : sig
  type t = [`PerformanceObserverEntryList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceObserverEntryList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceObserverEntryList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceObserverEntryList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList/getEntries) *)
  val getEntries: 'tags this -> PerformanceEntryList.t [@@js.call "getEntries"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList/getEntriesByName) *)
  val getEntriesByName: 'tags this -> name:string -> ?type_:string -> unit -> PerformanceEntryList.t [@@js.call "getEntriesByName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList/getEntriesByType) *)
  val getEntriesByType: 'tags this -> type_:string -> PerformanceEntryList.t [@@js.call "getEntriesByType"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserver) *)
module[@js.scope "PerformanceObserver"] rec PerformanceObserver : sig
  type t = [`PerformanceObserver] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceObserver]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceObserver]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceObserver ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/disconnect) *)
  val disconnect: 'tags this -> unit [@@js.call "disconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/observe) *)
  val observe: 'tags this -> ?options:PerformanceObserverInit.t -> unit -> unit [@@js.call "observe"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/takeRecords) *)
  val takeRecords: 'tags this -> PerformanceEntryList.t [@@js.call "takeRecords"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: PerformanceObserverCallback.t -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/supportedEntryTypes) *)
  val supportedEntryTypes: unit -> string list [@@js.get "supportedEntryTypes"]
end
and PerformanceObserverCallback : sig
  type t = [`PerformanceObserverCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceObserverCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceObserverCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceObserverCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> entries:PerformanceObserverEntryList.t -> observer:PerformanceObserver.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PerformanceEventMap : sig
  type t = [`PerformanceEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_resourcetimingbufferfull: 'tags this -> Event.t [@@js.get "resourcetimingbufferfull"]
  val set_resourcetimingbufferfull: 'tags this -> Event.t -> unit [@@js.set "resourcetimingbufferfull"]
  val create: resourcetimingbufferfull:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module OnErrorEventHandlerNonNull : sig
  type t = [`OnErrorEventHandlerNonNull] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OnErrorEventHandlerNonNull]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OnErrorEventHandlerNonNull]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OnErrorEventHandlerNonNull ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> event:([`U1 of Event.t | `U2 of string] [@js.union]) -> ?source:string -> ?lineno:float -> ?colno:float -> ?error:Error.t -> unit -> any [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module OnErrorEventHandler : sig
  type t = OnErrorEventHandlerNonNull.t option
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module OffscreenCanvasEventMap : sig
  type t = [`OffscreenCanvasEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OffscreenCanvasEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OffscreenCanvasEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OffscreenCanvasEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_contextlost: 'tags this -> Event.t [@@js.get "contextlost"]
  val set_contextlost: 'tags this -> Event.t -> unit [@@js.set "contextlost"]
  val get_contextrestored: 'tags this -> Event.t [@@js.get "contextrestored"]
  val set_contextrestored: 'tags this -> Event.t -> unit [@@js.set "contextrestored"]
  val create: contextlost:Event.t -> contextrestored:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed) *)
module OES_draw_buffers_indexed : sig
  type t = [`OES_draw_buffers_indexed] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_draw_buffers_indexed]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_draw_buffers_indexed]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_draw_buffers_indexed ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendEquationSeparateiOES) *)
  val blendEquationSeparateiOES: 'tags this -> buf:GLuint.t -> modeRGB:GLenum.t -> modeAlpha:GLenum.t -> unit [@@js.call "blendEquationSeparateiOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendEquationiOES) *)
  val blendEquationiOES: 'tags this -> buf:GLuint.t -> mode:GLenum.t -> unit [@@js.call "blendEquationiOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendFuncSeparateiOES) *)
  val blendFuncSeparateiOES: 'tags this -> buf:GLuint.t -> srcRGB:GLenum.t -> dstRGB:GLenum.t -> srcAlpha:GLenum.t -> dstAlpha:GLenum.t -> unit [@@js.call "blendFuncSeparateiOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendFunciOES) *)
  val blendFunciOES: 'tags this -> buf:GLuint.t -> src:GLenum.t -> dst:GLenum.t -> unit [@@js.call "blendFunciOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/colorMaskiOES) *)
  val colorMaskiOES: 'tags this -> buf:GLuint.t -> r:GLboolean.t -> g:GLboolean.t -> b:GLboolean.t -> a:GLboolean.t -> unit [@@js.call "colorMaskiOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/disableiOES) *)
  val disableiOES: 'tags this -> target:GLenum.t -> index:GLuint.t -> unit [@@js.call "disableiOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/enableiOES) *)
  val enableiOES: 'tags this -> target:GLenum.t -> index:GLuint.t -> unit [@@js.call "enableiOES"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NotificationEventMap : sig
  type t = [`NotificationEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NotificationEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NotificationEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NotificationEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_click: 'tags this -> Event.t [@@js.get "click"]
  val set_click: 'tags this -> Event.t -> unit [@@js.set "click"]
  val get_close: 'tags this -> Event.t [@@js.get "close"]
  val set_close: 'tags this -> Event.t -> unit [@@js.set "close"]
  val get_error: 'tags this -> Event.t [@@js.get "error"]
  val set_error: 'tags this -> Event.t -> unit [@@js.set "error"]
  val get_show: 'tags this -> Event.t [@@js.get "show"]
  val set_show: 'tags this -> Event.t -> unit [@@js.set "show"]
  val create: click:Event.t -> close:Event.t -> error:Event.t -> show:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MessagePortEventMap : sig
  type t = [`MessagePortEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MessagePortEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MessagePortEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MessagePortEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_message: 'tags this -> MessageEvent.t_0 [@@js.get "message"]
  val set_message: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "message"]
  val get_messageerror: 'tags this -> MessageEvent.t_0 [@@js.get "messageerror"]
  val set_messageerror: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "messageerror"]
  val create: message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Channel Messaging API interface allows us to create a new message channel and send data through it via its two MessagePort properties.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageChannel)
*)
module[@js.scope "MessageChannel"] MessageChannel : sig
  type t = [`MessageChannel] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MessageChannel]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MessageChannel]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MessageChannel ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the first MessagePort object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageChannel/port1)
  *)
  val get_port1: 'tags this -> MessagePort.t [@@js.get "port1"]
  
  (**
    Returns the second MessagePort object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageChannel/port2)
  *)
  val get_port2: 'tags this -> MessagePort.t [@@js.get "port2"]
  val create: port1:MessagePort.t -> port2:MessagePort.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  The type of `import.meta`.
  
  If you need to declare that a given property exists on `import.meta`,
  this type may be augmented via interface merging.
*)
module ImportMeta : sig
  type t = [`ImportMeta] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ImportMeta]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ImportMeta]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ImportMeta ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_url: 'tags this -> string [@@js.get "url"]
  val set_url: 'tags this -> string -> unit [@@js.set "url"]
  val create: url:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ImageBitmapRenderingContextSettings : sig
  type t = [`ImageBitmapRenderingContextSettings] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ImageBitmapRenderingContextSettings]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ImageBitmapRenderingContextSettings]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmapRenderingContextSettings ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_alpha: 'tags this -> bool option [@@js.get "alpha"]
  val set_alpha: 'tags this -> bool -> unit [@@js.set "alpha"]
  val create: ?alpha:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module IDBTransactionEventMap : sig
  type t = [`IDBTransactionEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBTransactionEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBTransactionEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBTransactionEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_abort: 'tags this -> Event.t [@@js.get "abort"]
  val set_abort: 'tags this -> Event.t -> unit [@@js.set "abort"]
  val get_complete: 'tags this -> Event.t [@@js.get "complete"]
  val set_complete: 'tags this -> Event.t -> unit [@@js.set "complete"]
  val get_error: 'tags this -> Event.t [@@js.get "error"]
  val set_error: 'tags this -> Event.t -> unit [@@js.set "error"]
  val create: abort:Event.t -> complete:Event.t -> error:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module IDBRequestEventMap : sig
  type t = [`IDBRequestEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBRequestEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBRequestEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBRequestEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_error: 'tags this -> Event.t [@@js.get "error"]
  val set_error: 'tags this -> Event.t -> unit [@@js.set "error"]
  val get_success: 'tags this -> Event.t [@@js.get "success"]
  val set_success: 'tags this -> Event.t -> unit [@@js.set "success"]
  val create: error:Event.t -> success:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module IDBOpenDBRequestEventMap : sig
  type t = [`IDBOpenDBRequestEventMap | `IDBRequestEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBOpenDBRequestEventMap | `IDBRequestEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBOpenDBRequestEventMap | `IDBRequestEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBOpenDBRequestEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_blocked: 'tags this -> IDBVersionChangeEvent.t [@@js.get "blocked"]
  val set_blocked: 'tags this -> IDBVersionChangeEvent.t -> unit [@@js.set "blocked"]
  val get_upgradeneeded: 'tags this -> IDBVersionChangeEvent.t [@@js.get "upgradeneeded"]
  val set_upgradeneeded: 'tags this -> IDBVersionChangeEvent.t -> unit [@@js.set "upgradeneeded"]
  val create: blocked:IDBVersionChangeEvent.t -> upgradeneeded:IDBVersionChangeEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module IDBDatabaseEventMap : sig
  type t = [`IDBDatabaseEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBDatabaseEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBDatabaseEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_abort: 'tags this -> Event.t [@@js.get "abort"]
  val set_abort: 'tags this -> Event.t -> unit [@@js.set "abort"]
  val get_close: 'tags this -> Event.t [@@js.get "close"]
  val set_close: 'tags this -> Event.t -> unit [@@js.set "close"]
  val get_error: 'tags this -> Event.t [@@js.get "error"]
  val set_error: 'tags this -> Event.t -> unit [@@js.set "error"]
  val get_versionchange: 'tags this -> IDBVersionChangeEvent.t [@@js.get "versionchange"]
  val set_versionchange: 'tags this -> IDBVersionChangeEvent.t -> unit [@@js.set "versionchange"]
  val create: abort:Event.t -> close:Event.t -> error:Event.t -> versionchange:IDBVersionChangeEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FontFaceSetLoadEventInit : sig
  type t = [`EventInit | `FontFaceSetLoadEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `FontFaceSetLoadEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `FontFaceSetLoadEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSetLoadEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_fontfaces: 'tags this -> FontFace.t list option [@@js.get "fontfaces"]
  val set_fontfaces: 'tags this -> FontFace.t list -> unit [@@js.set "fontfaces"]
  val create: ?fontfaces:FontFace.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent) *)
module[@js.scope "FontFaceSetLoadEvent"] FontFaceSetLoadEvent : sig
  type t = [`Event | `FontFaceSetLoadEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `FontFaceSetLoadEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `FontFaceSetLoadEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSetLoadEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent/fontfaces) *)
  val get_fontfaces: 'tags this -> FontFace.t list [@@js.get "fontfaces"]
  val create: fontfaces:FontFace.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:FontFaceSetLoadEventInit.t -> unit -> t [@@js.create]
end
module FontFaceSetEventMap : sig
  type t = [`FontFaceSetEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FontFaceSetEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FontFaceSetEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSetEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_loading: 'tags this -> Event.t [@@js.get "loading"]
  val set_loading: 'tags this -> Event.t -> unit [@@js.set "loading"]
  val get_loadingdone: 'tags this -> Event.t [@@js.get "loadingdone"]
  val set_loadingdone: 'tags this -> Event.t -> unit [@@js.set "loadingdone"]
  val get_loadingerror: 'tags this -> Event.t [@@js.get "loadingerror"]
  val set_loadingerror: 'tags this -> Event.t -> unit [@@js.set "loadingerror"]
  val create: loading:Event.t -> loadingdone:Event.t -> loadingerror:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Allows to read File or Blob objects in a synchronous way.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReaderSync)
*)
module[@js.scope "FileReaderSync"] FileReaderSync : sig
  type t = [`FileReaderSync] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileReaderSync]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileReaderSync]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileReaderSync ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReaderSync/readAsArrayBuffer) *)
  val readAsArrayBuffer: 'tags this -> blob:Blob.t -> ArrayBuffer.t [@@js.call "readAsArrayBuffer"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReaderSync/readAsBinaryString) *)
  val readAsBinaryString: 'tags this -> blob:Blob.t -> string [@@js.call "readAsBinaryString"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReaderSync/readAsDataURL) *)
  val readAsDataURL: 'tags this -> blob:Blob.t -> string [@@js.call "readAsDataURL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReaderSync/readAsText) *)
  val readAsText: 'tags this -> blob:Blob.t -> ?encoding:string -> unit -> string [@@js.call "readAsText"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader)
*)
module[@js.scope "FileReader"] FileReader : sig
  type t = [`EventTarget | `FileReader] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `FileReader]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `FileReader]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileReader ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/error) *)
  val get_error: 'tags this -> DOMException.t option [@@js.get "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/abort_event) *)
  val get_onabort: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option [@@js.get "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/abort_event) *)
  val set_onabort: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit [@@js.set "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/load_event) *)
  val get_onload: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option [@@js.get "onload"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/load_event) *)
  val set_onload: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit [@@js.set "onload"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/loadend_event) *)
  val get_onloadend: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option [@@js.get "onloadend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/loadend_event) *)
  val set_onloadend: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit [@@js.set "onloadend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/loadstart_event) *)
  val get_onloadstart: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option [@@js.get "onloadstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/loadstart_event) *)
  val set_onloadstart: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit [@@js.set "onloadstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/progress_event) *)
  val get_onprogress: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option [@@js.get "onprogress"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/progress_event) *)
  val set_onprogress: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit [@@js.set "onprogress"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/readyState) *)
  val get_readyState: 'tags this -> ([`L_n_0[@js 0] | `L_n_1[@js 1] | `L_n_2[@js 2]] [@js.enum]) [@@js.get "readyState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/result) *)
  val get_result: 'tags this -> ([`String of string | `Null | `Other of ArrayBuffer.t] [@js.union on_field "dummy"]) Primitive.t [@@js.get "result"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/abort) *)
  val abort: 'tags this -> unit [@@js.call "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/readAsArrayBuffer) *)
  val readAsArrayBuffer: 'tags this -> blob:Blob.t -> unit [@@js.call "readAsArrayBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/readAsBinaryString) *)
  val readAsBinaryString: 'tags this -> blob:Blob.t -> unit [@@js.call "readAsBinaryString"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/readAsDataURL) *)
  val readAsDataURL: 'tags this -> blob:Blob.t -> unit [@@js.call "readAsDataURL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/readAsText) *)
  val readAsText: 'tags this -> blob:Blob.t -> ?encoding:string -> unit -> unit [@@js.call "readAsText"]
  val get_EMPTY: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "EMPTY"]
  val get_LOADING: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "LOADING"]
  val get_DONE: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "DONE"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'FileReaderEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'FileReaderEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val empty: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "EMPTY"]
  val loading: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "LOADING"]
  val done_: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "DONE"]
end
module FileReaderEventMap : sig
  type t = [`FileReaderEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileReaderEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileReaderEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileReaderEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_abort: 'tags this -> FileReader.t ProgressEvent.t [@@js.get "abort"]
  val set_abort: 'tags this -> FileReader.t ProgressEvent.t -> unit [@@js.set "abort"]
  val get_error: 'tags this -> FileReader.t ProgressEvent.t [@@js.get "error"]
  val set_error: 'tags this -> FileReader.t ProgressEvent.t -> unit [@@js.set "error"]
  val get_load: 'tags this -> FileReader.t ProgressEvent.t [@@js.get "load"]
  val set_load: 'tags this -> FileReader.t ProgressEvent.t -> unit [@@js.set "load"]
  val get_loadend: 'tags this -> FileReader.t ProgressEvent.t [@@js.get "loadend"]
  val set_loadend: 'tags this -> FileReader.t ProgressEvent.t -> unit [@@js.set "loadend"]
  val get_loadstart: 'tags this -> FileReader.t ProgressEvent.t [@@js.get "loadstart"]
  val set_loadstart: 'tags this -> FileReader.t ProgressEvent.t -> unit [@@js.set "loadstart"]
  val get_progress: 'tags this -> FileReader.t ProgressEvent.t [@@js.get "progress"]
  val set_progress: 'tags this -> FileReader.t ProgressEvent.t -> unit [@@js.set "progress"]
  val create: abort:FileReader.t ProgressEvent.t -> error:FileReader.t ProgressEvent.t -> load:FileReader.t ProgressEvent.t -> loadend:FileReader.t ProgressEvent.t -> loadstart:FileReader.t ProgressEvent.t -> progress:FileReader.t ProgressEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type="file"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileList)
*)
module[@js.scope "FileList"] FileList : sig
  type t = [`FileList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> File.t IterableIterator.t *)
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileList/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileList/item) *)
  val item: 'tags this -> index:float -> File.t option [@@js.call "item"]
  val get: 'tags this -> float -> File.t [@@js.index_get]
  val set: 'tags this -> float -> File.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module EventSourceEventMap : sig
  type t = [`EventSourceEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventSourceEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventSourceEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventSourceEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_error: 'tags this -> Event.t [@@js.get "error"]
  val set_error: 'tags this -> Event.t -> unit [@@js.set "error"]
  val get_message: 'tags this -> MessageEvent.t_0 [@@js.get "message"]
  val set_message: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "message"]
  val get_open: 'tags this -> Event.t [@@js.get "open"]
  val set_open: 'tags this -> Event.t -> unit [@@js.set "open"]
  val create: error:Event.t -> message:MessageEvent.t_0 -> open_:(Event.t[@js "open"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module EventSourceInit : sig
  type t = [`EventSourceInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventSourceInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventSourceInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventSourceInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_withCredentials: 'tags this -> bool option [@@js.get "withCredentials"]
  val set_withCredentials: 'tags this -> bool -> unit [@@js.set "withCredentials"]
  val create: ?withCredentials:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource) *)
module[@js.scope "EventSource"] EventSource : sig
  type t = [`EventSource | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventSource | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventSource | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventSource ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/open_event) *)
  val get_onopen: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onopen"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/open_event) *)
  val set_onopen: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onopen"]
  
  (**
    Returns the state of this EventSource object's connection. It can have the values described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/readyState)
  *)
  val get_readyState: 'tags this -> float [@@js.get "readyState"]
  
  (**
    Returns the URL providing the event stream.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/url)
  *)
  val get_url: 'tags this -> string [@@js.get "url"]
  
  (**
    Returns true if the credentials mode for connection requests to the URL providing the event stream is set to "include", and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/withCredentials)
  *)
  val get_withCredentials: 'tags this -> bool [@@js.get "withCredentials"]
  
  (**
    Aborts any instances of the fetch algorithm started for this EventSource object, and sets the readyState attribute to CLOSED.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/close)
  *)
  val close: 'tags this -> unit [@@js.call "close"]
  val get_CONNECTING: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "CONNECTING"]
  val get_OPEN: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "OPEN"]
  val get_CLOSED: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "CLOSED"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'EventSourceEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:(this:t -> event:MessageEvent.t_0 -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener'': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'EventSourceEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:(this:t -> event:MessageEvent.t_0 -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener'': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: url:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?eventSourceInitDict:EventSourceInit.t -> unit -> t [@@js.create]
  val connecting: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "CONNECTING"]
  val open_: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "OPEN"]
  val closed: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "CLOSED"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_texture_norm16) *)
module EXT_texture_norm16 : sig
  type t = [`EXT_texture_norm16] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_texture_norm16]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_texture_norm16]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_texture_norm16 ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_R16_EXT: 'tags this -> ([`L_n_33322[@js 33322]] [@js.enum]) [@@js.get "R16_EXT"]
  val get_RG16_EXT: 'tags this -> ([`L_n_33324[@js 33324]] [@js.enum]) [@@js.get "RG16_EXT"]
  val get_RGB16_EXT: 'tags this -> ([`L_n_32852[@js 32852]] [@js.enum]) [@@js.get "RGB16_EXT"]
  val get_RGBA16_EXT: 'tags this -> ([`L_n_32859[@js 32859]] [@js.enum]) [@@js.get "RGBA16_EXT"]
  val get_R16_SNORM_EXT: 'tags this -> ([`L_n_36760[@js 36760]] [@js.enum]) [@@js.get "R16_SNORM_EXT"]
  val get_RG16_SNORM_EXT: 'tags this -> ([`L_n_36761[@js 36761]] [@js.enum]) [@@js.get "RG16_SNORM_EXT"]
  val get_RGB16_SNORM_EXT: 'tags this -> ([`L_n_36762[@js 36762]] [@js.enum]) [@@js.get "RGB16_SNORM_EXT"]
  val get_RGBA16_SNORM_EXT: 'tags this -> ([`L_n_36763[@js 36763]] [@js.enum]) [@@js.get "RGBA16_SNORM_EXT"]
  val create: r16_ext:(([`L_n_33322[@js 33322]] [@js.enum])[@js "R16_EXT"]) -> rg16_ext:(([`L_n_33324[@js 33324]] [@js.enum])[@js "RG16_EXT"]) -> rgb16_ext:(([`L_n_32852[@js 32852]] [@js.enum])[@js "RGB16_EXT"]) -> rgba16_ext:(([`L_n_32859[@js 32859]] [@js.enum])[@js "RGBA16_EXT"]) -> r16_snorm_ext:(([`L_n_36760[@js 36760]] [@js.enum])[@js "R16_SNORM_EXT"]) -> rg16_snorm_ext:(([`L_n_36761[@js 36761]] [@js.enum])[@js "RG16_SNORM_EXT"]) -> rgb16_snorm_ext:(([`L_n_36762[@js 36762]] [@js.enum])[@js "RGB16_SNORM_EXT"]) -> rgba16_snorm_ext:(([`L_n_36763[@js 36763]] [@js.enum])[@js "RGBA16_SNORM_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DedicatedWorkerGlobalScopeEventMap : sig
  type t = [`DedicatedWorkerGlobalScopeEventMap | `WorkerGlobalScopeEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DedicatedWorkerGlobalScopeEventMap | `WorkerGlobalScopeEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DedicatedWorkerGlobalScopeEventMap | `WorkerGlobalScopeEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScopeEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_message: 'tags this -> MessageEvent.t_0 [@@js.get "message"]
  val set_message: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "message"]
  val get_messageerror: 'tags this -> MessageEvent.t_0 [@@js.get "messageerror"]
  val set_messageerror: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "messageerror"]
  val create: message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FrameRequestCallback : sig
  type t = [`FrameRequestCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FrameRequestCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FrameRequestCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FrameRequestCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> time:DOMHighResTimeStamp.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AnimationFrameProvider : sig
  type t = [`AnimationFrameProvider] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AnimationFrameProvider]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AnimationFrameProvider]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AnimationFrameProvider ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cancelAnimationFrame: 'tags this -> handle:float -> unit [@@js.call "cancelAnimationFrame"]
  val requestAnimationFrame: 'tags this -> callback:FrameRequestCallback.t -> float [@@js.call "requestAnimationFrame"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  (the Worker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope)
*)
module[@js.scope "DedicatedWorkerGlobalScope"] DedicatedWorkerGlobalScope : sig
  type t = [`AnimationFrameProvider | `DedicatedWorkerGlobalScope | `EventTarget | `FontFaceSource | `WindowOrWorkerGlobalScope | `WorkerGlobalScope] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AnimationFrameProvider | `DedicatedWorkerGlobalScope | `EventTarget | `FontFaceSource | `WindowOrWorkerGlobalScope | `WorkerGlobalScope]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AnimationFrameProvider | `DedicatedWorkerGlobalScope | `EventTarget | `FontFaceSource | `WindowOrWorkerGlobalScope | `WorkerGlobalScope]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScope ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns dedicatedWorkerGlobal's name, i.e. the value given to the Worker constructor. Primarily useful for debugging.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/messageerror_event) *)
  val get_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessageerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/messageerror_event) *)
  val set_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessageerror"]
  
  (**
    Aborts dedicatedWorkerGlobal.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/close)
  *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (**
    Clones message and transmits it to the Worker object associated with dedicatedWorkerGlobal. transfer can be passed as a list of objects that are to be transferred rather than cloned.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/postMessage)
  *)
  val postMessage: 'tags this -> message:any -> transfer:Transferable.t list -> unit [@@js.call "postMessage"]
  
  (**
    Clones message and transmits it to the Worker object associated with dedicatedWorkerGlobal. transfer can be passed as a list of objects that are to be transferred rather than cloned.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/postMessage)
  *)
  val postMessage': 'tags this -> message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit [@@js.call "postMessage"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'DedicatedWorkerGlobalScopeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'DedicatedWorkerGlobalScopeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module CompressionFormat : sig
  type t = ([`L_s146_gzip[@js "gzip"] | `L_s98_deflate[@js "deflate"] | `L_s99_deflate_raw[@js "deflate-raw"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DecompressionStream) *)
module[@js.scope "DecompressionStream"] DecompressionStream : sig
  type t = [`DecompressionStream | `GenericTransformStream] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DecompressionStream | `GenericTransformStream]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DecompressionStream | `GenericTransformStream]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DecompressionStream ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: CompressionFormat.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRect) *)
module[@js.scope "DOMRect"] DOMRect : sig
  type t = [`DOMRect | `DOMRectReadOnly] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMRect | `DOMRectReadOnly]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMRect | `DOMRectReadOnly]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMRect ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/height) *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/height) *)
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/width) *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/width) *)
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/x) *)
  val get_x: 'tags this -> float [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/x) *)
  val set_x: 'tags this -> float -> unit [@@js.set "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/y) *)
  val get_y: 'tags this -> float [@@js.get "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/y) *)
  val set_y: 'tags this -> float -> unit [@@js.set "y"]
  val create: height:float -> width:float -> x:float -> y:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t [@@js.create]
  val fromRect: ?other:DOMRectInit.t -> unit -> t [@@js.global "fromRect"]
end
module DOMQuadInit : sig
  type t = [`DOMQuadInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMQuadInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMQuadInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMQuadInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_p1: 'tags this -> DOMPointInit.t option [@@js.get "p1"]
  val set_p1: 'tags this -> DOMPointInit.t -> unit [@@js.set "p1"]
  val get_p2: 'tags this -> DOMPointInit.t option [@@js.get "p2"]
  val set_p2: 'tags this -> DOMPointInit.t -> unit [@@js.set "p2"]
  val get_p3: 'tags this -> DOMPointInit.t option [@@js.get "p3"]
  val set_p3: 'tags this -> DOMPointInit.t -> unit [@@js.set "p3"]
  val get_p4: 'tags this -> DOMPointInit.t option [@@js.get "p4"]
  val set_p4: 'tags this -> DOMPointInit.t -> unit [@@js.set "p4"]
  val create: ?p1:DOMPointInit.t -> ?p2:DOMPointInit.t -> ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMQuad) *)
module[@js.scope "DOMQuad"] DOMQuad : sig
  type t = [`DOMQuad] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMQuad]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMQuad]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMQuad ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMQuad/p1) *)
  val get_p1: 'tags this -> DOMPoint.t [@@js.get "p1"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMQuad/p2) *)
  val get_p2: 'tags this -> DOMPoint.t [@@js.get "p2"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMQuad/p3) *)
  val get_p3: 'tags this -> DOMPoint.t [@@js.get "p3"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMQuad/p4) *)
  val get_p4: 'tags this -> DOMPoint.t [@@js.get "p4"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMQuad/getBounds) *)
  val getBounds: 'tags this -> DOMRect.t [@@js.call "getBounds"]
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?p1:DOMPointInit.t -> ?p2:DOMPointInit.t -> ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> t [@@js.create]
  val fromQuad: ?other:DOMQuadInit.t -> unit -> t [@@js.global "fromQuad"]
  val fromRect: ?other:DOMRectInit.t -> unit -> t [@@js.global "fromRect"]
end
module CustomEventInit : sig
  type 'T t = [`CustomEventInit of 'T | `EventInit] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'T tags = [`CustomEventInit of 'T | `EventInit]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`CustomEventInit of 'T | `EventInit]
    type tags_0 = any tags
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `CustomEventInit of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_detail: ('tags, 'T) this -> 'T option [@@js.get "detail"]
  val set_detail: ('tags, 'T) this -> 'T -> unit [@@js.set "detail"]
  val create: ?detail:'T -> unit -> 'T t [@@js.builder]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomEvent) *)
module[@js.scope "CustomEvent"] CustomEvent : sig
  type 'T t = [`CustomEvent of 'T | `Event] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'T tags = [`CustomEvent of 'T | `Event]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`CustomEvent of 'T | `Event]
    type tags_0 = any tags
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `CustomEvent of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (**
    Returns any custom data event was created with. Typically used for synthetic events.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomEvent/detail)
  *)
  val get_detail: ('tags, 'T) this -> 'T [@@js.get "detail"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomEvent/initCustomEvent) *)
  val initCustomEvent: ('tags, 'T) this -> type_:string -> ?bubbles:bool -> ?cancelable:bool -> ?detail:'T -> unit -> unit [@@js.call "initCustomEvent"]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: type_:string -> ?eventInitDict:'T CustomEventInit.t -> unit -> 'T t [@@js.create]
end
module QueuingStrategyInit : sig
  type t = [`QueuingStrategyInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`QueuingStrategyInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`QueuingStrategyInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `QueuingStrategyInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Creates a new ByteLengthQueuingStrategy with the provided high water mark.
    
    Note that the provided high water mark will not be validated ahead of time. Instead, if it is negative, NaN, or not a number, the resulting ByteLengthQueuingStrategy will cause the corresponding stream constructor to throw.
  *)
  val get_highWaterMark: 'tags this -> float [@@js.get "highWaterMark"]
  
  (**
    Creates a new ByteLengthQueuingStrategy with the provided high water mark.
    
    Note that the provided high water mark will not be validated ahead of time. Instead, if it is negative, NaN, or not a number, the resulting ByteLengthQueuingStrategy will cause the corresponding stream constructor to throw.
  *)
  val set_highWaterMark: 'tags this -> float -> unit [@@js.set "highWaterMark"]
  val create: highWaterMark:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Streams API interface providesÂ a built-in byte length queuing strategy that can be used when constructing streams.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy)
*)
module[@js.scope "CountQueuingStrategy"] CountQueuingStrategy : sig
  type t = [`CountQueuingStrategy | `QueuingStrategy of any] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CountQueuingStrategy | `QueuingStrategy of any]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CountQueuingStrategy | `QueuingStrategy of any]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CountQueuingStrategy ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/highWaterMark) *)
  val get_highWaterMark: 'tags this -> float [@@js.get "highWaterMark"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/size) *)
  val get_size: 'tags this -> QueuingStrategySize.t_0 [@@js.get "size"]
  val create: highWaterMark:float -> size:QueuingStrategySize.t_0 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': QueuingStrategyInit.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console) *)
module Console : sig
  type t = [`Console] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Console]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Console]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Console ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/assert) *)
  val assert_: 'tags this -> ?condition:bool -> data:(any list [@js.variadic]) -> unit -> unit [@@js.call "assert"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/clear) *)
  val clear: 'tags this -> unit [@@js.call "clear"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/count) *)
  val count: 'tags this -> ?label:string -> unit -> unit [@@js.call "count"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/countReset) *)
  val countReset: 'tags this -> ?label:string -> unit -> unit [@@js.call "countReset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/debug) *)
  val debug: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "debug"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/dir) *)
  val dir: 'tags this -> ?item:any -> ?options:any -> unit -> unit [@@js.call "dir"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/dirxml) *)
  val dirxml: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "dirxml"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/error) *)
  val error: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/group) *)
  val group: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "group"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/groupCollapsed) *)
  val groupCollapsed: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "groupCollapsed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/groupEnd) *)
  val groupEnd: 'tags this -> unit [@@js.call "groupEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/info) *)
  val info: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "info"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/log) *)
  val log: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "log"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/table) *)
  val table: 'tags this -> ?tabularData:any -> ?properties:string list -> unit -> unit [@@js.call "table"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/time) *)
  val time: 'tags this -> ?label:string -> unit -> unit [@@js.call "time"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/timeEnd) *)
  val timeEnd: 'tags this -> ?label:string -> unit -> unit [@@js.call "timeEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/timeLog) *)
  val timeLog: 'tags this -> ?label:string -> data:(any list [@js.variadic]) -> unit -> unit [@@js.call "timeLog"]
  
  (**
    This method does not display anything unless used in the inspector.
     Adds an event with the label `label` to the Timeline panel of the inspector.
  *)
  val timeStamp: 'tags this -> ?label:string -> unit -> unit [@@js.call "timeStamp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/trace) *)
  val trace: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "trace"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/warn) *)
  val warn: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "warn"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompressionStream) *)
module[@js.scope "CompressionStream"] CompressionStream : sig
  type t = [`CompressionStream | `GenericTransformStream] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CompressionStream | `GenericTransformStream]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CompressionStream | `GenericTransformStream]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CompressionStream ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: CompressionFormat.t -> t [@@js.create]
end
module CanvasTextRendering : sig
  type t = ([`L_s143_geometricPrecision[@js "geometricPrecision"] | `L_s226_optimizeLegibility[@js "optimizeLegibility"] | `L_s227_optimizeSpeed[@js "optimizeSpeed"] | `L_s60_auto[@js "auto"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasFontVariantCaps : sig
  type t = ([`L_s214_normal[@js "normal"] | `L_s239_petite_caps[@js "petite-caps"] | `L_s288_small_caps[@js "small-caps"] | `L_s314_titling_caps[@js "titling-caps"] | `L_s324_unicase[@js "unicase"] | `L_s50_all_petite_caps[@js "all-petite-caps"] | `L_s51_all_small_caps[@js "all-small-caps"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasFontStretch : sig
  type t = ([`L_s124_expanded[@js "expanded"] | `L_s126_extra_condensed[@js "extra-condensed"] | `L_s127_extra_expanded[@js "extra-expanded"] | `L_s214_normal[@js "normal"] | `L_s282_semi_condensed[@js "semi-condensed"] | `L_s283_semi_expanded[@js "semi-expanded"] | `L_s320_ultra_condensed[@js "ultra-condensed"] | `L_s321_ultra_expanded[@js "ultra-expanded"] | `L_s86_condensed[@js "condensed"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module rec CSSUnparsedSegment : sig
  type t = ([`String of string | `Other of CSSVariableReferenceValue.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue) *)
and[@js.scope "CSSUnparsedValue"] CSSUnparsedValue : sig
  type t = [`CSSStyleValue | `CSSUnparsedValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSStyleValue | `CSSUnparsedValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSStyleValue | `CSSUnparsedValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSUnparsedValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> CSSUnparsedSegment.t IterableIterator.t *)
  val entries: 'tags this -> (float * CSSUnparsedSegment.t) IterableIterator.t [@@js.call "entries"]
  val keys: 'tags this -> float IterableIterator.t [@@js.call "keys"]
  val values: 'tags this -> CSSUnparsedSegment.t IterableIterator.t [@@js.call "values"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  val forEach: 'tags this -> callbackfn:(value:CSSUnparsedSegment.t -> key:float -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val get: 'tags this -> float -> CSSUnparsedSegment.t [@@js.index_get]
  val set: 'tags this -> float -> CSSUnparsedSegment.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: CSSUnparsedSegment.t list -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue) *)
and[@js.scope "CSSVariableReferenceValue"] CSSVariableReferenceValue : sig
  type t = [`CSSVariableReferenceValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSVariableReferenceValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSVariableReferenceValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSVariableReferenceValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/fallback) *)
  val get_fallback: 'tags this -> CSSUnparsedValue.t option [@@js.get "fallback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/variable) *)
  val get_variable: 'tags this -> string [@@js.get "variable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/variable) *)
  val set_variable: 'tags this -> string -> unit [@@js.set "variable"]
  val create: ?fallback:CSSUnparsedValue.t -> variable:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': variable:string -> ?fallback:CSSUnparsedValue.t option -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent) *)
module[@js.scope "CSSTransformComponent"] CSSTransformComponent : sig
  type t = [`CSSTransformComponent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSTransformComponent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSTransformComponent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSTransformComponent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent/is2D) *)
  val get_is2D: 'tags this -> bool [@@js.get "is2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent/is2D) *)
  val set_is2D: 'tags this -> bool -> unit [@@js.set "is2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent/toMatrix) *)
  val toMatrix: 'tags this -> DOMMatrix.t [@@js.call "toMatrix"]
  val toString: 'tags this -> string [@@js.call "toString"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module CSSNumericBaseType : sig
  type t = ([`L_s133_flex[@js "flex"] | `L_s139_frequency[@js "frequency"] | `L_s173_length[@js "length"] | `L_s237_percent[@js "percent"] | `L_s269_resolution[@js "resolution"] | `L_s312_time[@js "time"] | `L_s53_angle[@js "angle"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CSSNumericType : sig
  type t = [`CSSNumericType] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSNumericType]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSNumericType]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSNumericType ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_angle: 'tags this -> float option [@@js.get "angle"]
  val set_angle: 'tags this -> float -> unit [@@js.set "angle"]
  val get_flex: 'tags this -> float option [@@js.get "flex"]
  val set_flex: 'tags this -> float -> unit [@@js.set "flex"]
  val get_frequency: 'tags this -> float option [@@js.get "frequency"]
  val set_frequency: 'tags this -> float -> unit [@@js.set "frequency"]
  val get_length: 'tags this -> float option [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val get_percent: 'tags this -> float option [@@js.get "percent"]
  val set_percent: 'tags this -> float -> unit [@@js.set "percent"]
  val get_percentHint: 'tags this -> CSSNumericBaseType.t option [@@js.get "percentHint"]
  val set_percentHint: 'tags this -> CSSNumericBaseType.t -> unit [@@js.set "percentHint"]
  val get_resolution: 'tags this -> float option [@@js.get "resolution"]
  val set_resolution: 'tags this -> float -> unit [@@js.set "resolution"]
  val get_time: 'tags this -> float option [@@js.get "time"]
  val set_time: 'tags this -> float -> unit [@@js.set "time"]
  val create: ?angle:float -> ?flex:float -> ?frequency:float -> ?length:float -> ?percent:float -> ?percentHint:CSSNumericBaseType.t -> ?resolution:float -> ?time:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CSSMathOperator : sig
  type t = ([`L_s166_invert[@js "invert"] | `L_s189_max[@js "max"] | `L_s196_min[@js "min"] | `L_s202_negate[@js "negate"] | `L_s249_product[@js "product"] | `L_s308_sum[@js "sum"] | `L_s77_clamp[@js "clamp"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathSum) *)
module[@js.scope "CSSMathSum"] rec CSSMathSum : sig
  type t = [`CSSMathSum | `CSSMathValue | `CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMathSum | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMathSum | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMathSum ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathSum/values) *)
  val get_values: 'tags this -> CSSNumericArray.t [@@js.get "values"]
  val create: values:CSSNumericArray.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': (CSSNumberish.t list [@js.variadic]) -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathValue) *)
and[@js.scope "CSSMathValue"] CSSMathValue : sig
  type t = [`CSSMathValue | `CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMathValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathValue/operator) *)
  val get_operator: 'tags this -> CSSMathOperator.t [@@js.get "operator"]
  val create: operator:CSSMathOperator.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
and CSSNumberish : sig
  type t = ([`Number of float | `Other of CSSNumericValue.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericArray) *)
and[@js.scope "CSSNumericArray"] CSSNumericArray : sig
  type t = [`CSSNumericArray] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSNumericArray]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSNumericArray]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSNumericArray ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> CSSNumericValue.t IterableIterator.t *)
  val entries: 'tags this -> (float * CSSNumericValue.t) IterableIterator.t [@@js.call "entries"]
  val keys: 'tags this -> float IterableIterator.t [@@js.call "keys"]
  val values: 'tags this -> CSSNumericValue.t IterableIterator.t [@@js.call "values"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericArray/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  val forEach: 'tags this -> callbackfn:(value:CSSNumericValue.t -> key:float -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val get: 'tags this -> float -> CSSNumericValue.t [@@js.index_get]
  val set: 'tags this -> float -> CSSNumericValue.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue) *)
and[@js.scope "CSSNumericValue"] CSSNumericValue : sig
  type t = [`CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSNumericValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/add) *)
  val add: 'tags this -> values:(CSSNumberish.t list [@js.variadic]) -> t [@@js.call "add"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/div) *)
  val div: 'tags this -> values:(CSSNumberish.t list [@js.variadic]) -> t [@@js.call "div"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/equals) *)
  val equals: 'tags this -> value:(CSSNumberish.t list [@js.variadic]) -> bool [@@js.call "equals"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/max) *)
  val max: 'tags this -> values:(CSSNumberish.t list [@js.variadic]) -> t [@@js.call "max"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/min) *)
  val min: 'tags this -> values:(CSSNumberish.t list [@js.variadic]) -> t [@@js.call "min"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/mul) *)
  val mul: 'tags this -> values:(CSSNumberish.t list [@js.variadic]) -> t [@@js.call "mul"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/sub) *)
  val sub: 'tags this -> values:(CSSNumberish.t list [@js.variadic]) -> t [@@js.call "sub"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/to) *)
  val to_: 'tags this -> unit:string -> CSSUnitValue.t [@@js.call "to"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/toSum) *)
  val toSum: 'tags this -> units:(string list [@js.variadic]) -> CSSMathSum.t [@@js.call "toSum"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/type) *)
  val type_: 'tags this -> CSSNumericType.t [@@js.call "type"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSUnitValue) *)
and[@js.scope "CSSUnitValue"] CSSUnitValue : sig
  type t = [`CSSNumericValue | `CSSStyleValue | `CSSUnitValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSNumericValue | `CSSStyleValue | `CSSUnitValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSNumericValue | `CSSStyleValue | `CSSUnitValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSUnitValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/unit) *)
  val get_unit: 'tags this -> string [@@js.get "unit"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/value) *)
  val get_value: 'tags this -> float [@@js.get "value"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/value) *)
  val set_value: 'tags this -> float -> unit [@@js.set "value"]
  val create: unit:string -> value:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': value:float -> unit:string -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTranslate) *)
module[@js.scope "CSSTranslate"] CSSTranslate : sig
  type t = [`CSSTransformComponent | `CSSTranslate] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSTransformComponent | `CSSTranslate]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSTransformComponent | `CSSTranslate]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSTranslate ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTranslate/x) *)
  val get_x: 'tags this -> CSSNumericValue.t [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTranslate/x) *)
  val set_x: 'tags this -> CSSNumericValue.t -> unit [@@js.set "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTranslate/y) *)
  val get_y: 'tags this -> CSSNumericValue.t [@@js.get "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTranslate/y) *)
  val set_y: 'tags this -> CSSNumericValue.t -> unit [@@js.set "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTranslate/z) *)
  val get_z: 'tags this -> CSSNumericValue.t [@@js.get "z"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTranslate/z) *)
  val set_z: 'tags this -> CSSNumericValue.t -> unit [@@js.set "z"]
  val create: x:CSSNumericValue.t -> y:CSSNumericValue.t -> z:CSSNumericValue.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': x:CSSNumericValue.t -> y:CSSNumericValue.t -> ?z:CSSNumericValue.t -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransformValue) *)
module[@js.scope "CSSTransformValue"] CSSTransformValue : sig
  type t = [`CSSStyleValue | `CSSTransformValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSStyleValue | `CSSTransformValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSStyleValue | `CSSTransformValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSTransformValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> CSSTransformComponent.t IterableIterator.t *)
  val entries: 'tags this -> (float * CSSTransformComponent.t) IterableIterator.t [@@js.call "entries"]
  val keys: 'tags this -> float IterableIterator.t [@@js.call "keys"]
  val values: 'tags this -> CSSTransformComponent.t IterableIterator.t [@@js.call "values"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/is2D) *)
  val get_is2D: 'tags this -> bool [@@js.get "is2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/toMatrix) *)
  val toMatrix: 'tags this -> DOMMatrix.t [@@js.call "toMatrix"]
  val forEach: 'tags this -> callbackfn:(value:CSSTransformComponent.t -> key:float -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val get: 'tags this -> float -> CSSTransformComponent.t [@@js.index_get]
  val set: 'tags this -> float -> CSSTransformComponent.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: CSSTransformComponent.t list -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkewY) *)
module[@js.scope "CSSSkewY"] CSSSkewY : sig
  type t = [`CSSSkewY | `CSSTransformComponent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSSkewY | `CSSTransformComponent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSSkewY | `CSSTransformComponent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSSkewY ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkewY/ay) *)
  val get_ay: 'tags this -> CSSNumericValue.t [@@js.get "ay"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkewY/ay) *)
  val set_ay: 'tags this -> CSSNumericValue.t -> unit [@@js.set "ay"]
  val create: ay:CSSNumericValue.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': CSSNumericValue.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkewX) *)
module[@js.scope "CSSSkewX"] CSSSkewX : sig
  type t = [`CSSSkewX | `CSSTransformComponent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSSkewX | `CSSTransformComponent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSSkewX | `CSSTransformComponent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSSkewX ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkewX/ax) *)
  val get_ax: 'tags this -> CSSNumericValue.t [@@js.get "ax"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkewX/ax) *)
  val set_ax: 'tags this -> CSSNumericValue.t -> unit [@@js.set "ax"]
  val create: ax:CSSNumericValue.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': CSSNumericValue.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkew) *)
module[@js.scope "CSSSkew"] CSSSkew : sig
  type t = [`CSSSkew | `CSSTransformComponent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSSkew | `CSSTransformComponent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSSkew | `CSSTransformComponent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSSkew ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkew/ax) *)
  val get_ax: 'tags this -> CSSNumericValue.t [@@js.get "ax"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkew/ax) *)
  val set_ax: 'tags this -> CSSNumericValue.t -> unit [@@js.set "ax"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkew/ay) *)
  val get_ay: 'tags this -> CSSNumericValue.t [@@js.get "ay"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkew/ay) *)
  val set_ay: 'tags this -> CSSNumericValue.t -> unit [@@js.set "ay"]
  val create: ax:CSSNumericValue.t -> ay:CSSNumericValue.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': ax:CSSNumericValue.t -> ay:CSSNumericValue.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSScale) *)
module[@js.scope "CSSScale"] CSSScale : sig
  type t = [`CSSScale | `CSSTransformComponent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSScale | `CSSTransformComponent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSScale | `CSSTransformComponent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSScale ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSScale/x) *)
  val get_x: 'tags this -> CSSNumberish.t [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSScale/x) *)
  val set_x: 'tags this -> CSSNumberish.t -> unit [@@js.set "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSScale/y) *)
  val get_y: 'tags this -> CSSNumberish.t [@@js.get "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSScale/y) *)
  val set_y: 'tags this -> CSSNumberish.t -> unit [@@js.set "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSScale/z) *)
  val get_z: 'tags this -> CSSNumberish.t [@@js.get "z"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSScale/z) *)
  val set_z: 'tags this -> CSSNumberish.t -> unit [@@js.set "z"]
  val create: x:CSSNumberish.t -> y:CSSNumberish.t -> z:CSSNumberish.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': x:CSSNumberish.t -> y:CSSNumberish.t -> ?z:CSSNumberish.t -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate) *)
module[@js.scope "CSSRotate"] CSSRotate : sig
  type t = [`CSSRotate | `CSSTransformComponent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSRotate | `CSSTransformComponent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSRotate | `CSSTransformComponent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSRotate ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate/angle) *)
  val get_angle: 'tags this -> CSSNumericValue.t [@@js.get "angle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate/angle) *)
  val set_angle: 'tags this -> CSSNumericValue.t -> unit [@@js.set "angle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate/x) *)
  val get_x: 'tags this -> CSSNumberish.t [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate/x) *)
  val set_x: 'tags this -> CSSNumberish.t -> unit [@@js.set "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate/y) *)
  val get_y: 'tags this -> CSSNumberish.t [@@js.get "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate/y) *)
  val set_y: 'tags this -> CSSNumberish.t -> unit [@@js.set "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate/z) *)
  val get_z: 'tags this -> CSSNumberish.t [@@js.get "z"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate/z) *)
  val set_z: 'tags this -> CSSNumberish.t -> unit [@@js.set "z"]
  val create: angle:CSSNumericValue.t -> x:CSSNumberish.t -> y:CSSNumberish.t -> z:CSSNumberish.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': CSSNumericValue.t -> t [@@js.create]
  val create'': x:CSSNumberish.t -> y:CSSNumberish.t -> z:CSSNumberish.t -> angle:CSSNumericValue.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue) *)
module[@js.scope "CSSKeywordValue"] CSSKeywordValue : sig
  type t = [`CSSKeywordValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSKeywordValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSKeywordValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSKeywordValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue/value) *)
  val get_value: 'tags this -> string [@@js.get "value"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue/value) *)
  val set_value: 'tags this -> string -> unit [@@js.set "value"]
  val create: value:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': string -> t [@@js.create]
end
module CSSKeywordish : sig
  type t = ([`String of string | `Other of CSSKeywordValue.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CSSPerspectiveValue : sig
  type t = (CSSKeywordish.t, CSSNumericValue.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSPerspective) *)
module[@js.scope "CSSPerspective"] CSSPerspective : sig
  type t = [`CSSPerspective | `CSSTransformComponent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSPerspective | `CSSTransformComponent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSPerspective | `CSSTransformComponent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSPerspective ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSPerspective/length) *)
  val get_length: 'tags this -> CSSPerspectiveValue.t [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSPerspective/length) *)
  val set_length: 'tags this -> CSSPerspectiveValue.t -> unit [@@js.set "length"]
  val create: length:CSSPerspectiveValue.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': CSSPerspectiveValue.t -> t [@@js.create]
end
module CSSMatrixComponentOptions : sig
  type t = [`CSSMatrixComponentOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMatrixComponentOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMatrixComponentOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMatrixComponentOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_is2D: 'tags this -> bool option [@@js.get "is2D"]
  val set_is2D: 'tags this -> bool -> unit [@@js.set "is2D"]
  val create: ?is2D:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent) *)
module[@js.scope "CSSMatrixComponent"] CSSMatrixComponent : sig
  type t = [`CSSMatrixComponent | `CSSTransformComponent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMatrixComponent | `CSSTransformComponent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMatrixComponent | `CSSTransformComponent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMatrixComponent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent/matrix) *)
  val get_matrix: 'tags this -> DOMMatrix.t [@@js.get "matrix"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent/matrix) *)
  val set_matrix: 'tags this -> DOMMatrix.t -> unit [@@js.set "matrix"]
  val create: matrix:DOMMatrix.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': matrix:DOMMatrixReadOnly.t -> ?options:CSSMatrixComponentOptions.t -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathProduct) *)
module[@js.scope "CSSMathProduct"] CSSMathProduct : sig
  type t = [`CSSMathProduct | `CSSMathValue | `CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMathProduct | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMathProduct | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMathProduct ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathProduct/values) *)
  val get_values: 'tags this -> CSSNumericArray.t [@@js.get "values"]
  val create: values:CSSNumericArray.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': (CSSNumberish.t list [@js.variadic]) -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathNegate) *)
module[@js.scope "CSSMathNegate"] CSSMathNegate : sig
  type t = [`CSSMathNegate | `CSSMathValue | `CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMathNegate | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMathNegate | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMathNegate ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathNegate/value) *)
  val get_value: 'tags this -> CSSNumericValue.t [@@js.get "value"]
  val create: value:CSSNumericValue.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': CSSNumberish.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathMin) *)
module[@js.scope "CSSMathMin"] CSSMathMin : sig
  type t = [`CSSMathMin | `CSSMathValue | `CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMathMin | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMathMin | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMathMin ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathMin/values) *)
  val get_values: 'tags this -> CSSNumericArray.t [@@js.get "values"]
  val create: values:CSSNumericArray.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': (CSSNumberish.t list [@js.variadic]) -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathMax) *)
module[@js.scope "CSSMathMax"] CSSMathMax : sig
  type t = [`CSSMathMax | `CSSMathValue | `CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMathMax | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMathMax | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMathMax ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathMax/values) *)
  val get_values: 'tags this -> CSSNumericArray.t [@@js.get "values"]
  val create: values:CSSNumericArray.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': (CSSNumberish.t list [@js.variadic]) -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathInvert) *)
module[@js.scope "CSSMathInvert"] CSSMathInvert : sig
  type t = [`CSSMathInvert | `CSSMathValue | `CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMathInvert | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMathInvert | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMathInvert ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathInvert/value) *)
  val get_value: 'tags this -> CSSNumericValue.t [@@js.get "value"]
  val create: value:CSSNumericValue.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': CSSNumberish.t -> t [@@js.create]
end
module[@js.scope "CSSMathClamp"] CSSMathClamp : sig
  type t = [`CSSMathClamp | `CSSMathValue | `CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMathClamp | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMathClamp | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMathClamp ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_lower: 'tags this -> CSSNumericValue.t [@@js.get "lower"]
  val get_upper: 'tags this -> CSSNumericValue.t [@@js.get "upper"]
  val get_value: 'tags this -> CSSNumericValue.t [@@js.get "value"]
  val create: lower:CSSNumericValue.t -> upper:CSSNumericValue.t -> value:CSSNumericValue.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': lower:CSSNumberish.t -> value:CSSNumberish.t -> upper:CSSNumberish.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSImageValue) *)
module[@js.scope "CSSImageValue"] CSSImageValue : sig
  type t = [`CSSImageValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSImageValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSImageValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSImageValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  This Streams API interface providesÂ a built-in byte length queuing strategy that can be used when constructing streams.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy)
*)
module[@js.scope "ByteLengthQueuingStrategy"] ByteLengthQueuingStrategy : sig
  type t = [`ByteLengthQueuingStrategy | `QueuingStrategy of ArrayBufferView.t] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ByteLengthQueuingStrategy | `QueuingStrategy of ArrayBufferView.t]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ByteLengthQueuingStrategy | `QueuingStrategy of ArrayBufferView.t]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ByteLengthQueuingStrategy ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/highWaterMark) *)
  val get_highWaterMark: 'tags this -> float [@@js.get "highWaterMark"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/size) *)
  val get_size: 'tags this -> ArrayBufferView.t QueuingStrategySize.t [@@js.get "size"]
  val create: highWaterMark:float -> size:ArrayBufferView.t QueuingStrategySize.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': QueuingStrategyInit.t -> t [@@js.create]
end
module BroadcastChannelEventMap : sig
  type t = [`BroadcastChannelEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BroadcastChannelEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BroadcastChannelEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `BroadcastChannelEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_message: 'tags this -> MessageEvent.t_0 [@@js.get "message"]
  val set_message: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "message"]
  val get_messageerror: 'tags this -> MessageEvent.t_0 [@@js.get "messageerror"]
  val set_messageerror: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "messageerror"]
  val create: message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BroadcastChannel) *)
module[@js.scope "BroadcastChannel"] BroadcastChannel : sig
  type t = [`BroadcastChannel | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BroadcastChannel | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BroadcastChannel | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `BroadcastChannel ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the channel name (as passed to the constructor).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/messageerror_event) *)
  val get_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessageerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/messageerror_event) *)
  val set_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessageerror"]
  
  (**
    Closes the BroadcastChannel object, opening it up to garbage collection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/close)
  *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (**
    Sends the given message to other BroadcastChannel objects set up for this channel. Messages can be structured objects, e.g. nested objects and arrays.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/postMessage)
  *)
  val postMessage: 'tags this -> message:any -> unit [@@js.call "postMessage"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'BroadcastChannelEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'BroadcastChannelEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: string -> t [@@js.create]
end
module AbortSignalEventMap : sig
  type t = [`AbortSignalEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbortSignalEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbortSignalEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AbortSignalEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_abort: 'tags this -> Event.t [@@js.get "abort"]
  val set_abort: 'tags this -> Event.t -> unit [@@js.set "abort"]
  val create: abort:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A controller object that allows you to abort one or more DOM requests as and when desired.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortController)
  
  
  A controller object that allows you to abort one or more DOM requests as and when desired.
*)
module[@js.scope "AbortController"] AbortController : sig
  type t = [`AbortController] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbortController]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbortController]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AbortController ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the AbortSignal object associated with this object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortController/signal)
    
    
    Returns the AbortSignal object associated with this object.
  *)
  val get_signal: 'tags this -> AbortSignal.t [@@js.get "signal"]
  
  (**
    Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortController/abort)
  *)
  val abort: 'tags this -> ?reason:any -> unit -> unit [@@js.call "abort"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module CustomEventInit_Make (T : Ojs.T) : sig
  type 'T parent = 'T CustomEventInit.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_detail: t -> T.t option [@@js.get "detail"]
  val set_detail: t -> T.t -> unit [@@js.set "detail"]
end
module MessageEventInit_Make (T : Ojs.T) : sig
  type 'T parent = 'T MessageEventInit.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_data: t -> T.t option [@@js.get "data"]
  val set_data: t -> T.t -> unit [@@js.set "data"]
  val get_lastEventId: t -> string option [@@js.get "lastEventId"]
  val set_lastEventId: t -> string -> unit [@@js.set "lastEventId"]
  val get_origin: t -> string option [@@js.get "origin"]
  val set_origin: t -> string -> unit [@@js.set "origin"]
  val get_ports: t -> MessagePort.t list option [@@js.get "ports"]
  val set_ports: t -> MessagePort.t list -> unit [@@js.set "ports"]
  val get_source: t -> MessageEventSource.t option [@@js.get "source"]
  val set_source: t -> MessageEventSource.t option -> unit [@@js.set "source"]
end
module QueuingStrategy_Make (T : Ojs.T) : sig
  type 'T parent = 'T QueuingStrategy.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_highWaterMark: t -> float option [@@js.get "highWaterMark"]
  val set_highWaterMark: t -> float -> unit [@@js.set "highWaterMark"]
  val get_size: t -> T.t QueuingStrategySize.t option [@@js.get "size"]
  val set_size: t -> T.t QueuingStrategySize.t -> unit [@@js.set "size"]
end
module ReadableStreamReadDoneResult_Make (T : Ojs.T) : sig
  type 'T parent = 'T ReadableStreamReadDoneResult.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_done: t -> ([`L_b_true[@js true]] [@js.enum]) [@@js.get "done"]
  val set_done: t -> ([`L_b_true[@js true]] [@js.enum]) -> unit [@@js.set "done"]
  val get_value: t -> T.t option [@@js.get "value"]
  val set_value: t -> T.t -> unit [@@js.set "value"]
end
module ReadableStreamReadValueResult_Make (T : Ojs.T) : sig
  type 'T parent = 'T ReadableStreamReadValueResult.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_done: t -> ([`L_b_false[@js false]] [@js.enum]) [@@js.get "done"]
  val set_done: t -> ([`L_b_false[@js false]] [@js.enum]) -> unit [@@js.set "done"]
  val get_value: t -> T.t [@@js.get "value"]
  val set_value: t -> T.t -> unit [@@js.set "value"]
end
module ReadableWritablePair_Make (R : Ojs.T) (W : Ojs.T) : sig
  type ('R, 'W) parent = ('R, 'W) ReadableWritablePair.t
  type t = (R.t, W.t) parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_readable: t -> R.t ReadableStream.t [@@js.get "readable"]
  val set_readable: t -> R.t ReadableStream.t -> unit [@@js.set "readable"]
  
  (**
    Provides a convenient, chainable way of piping this readable stream through a transform stream (or any other \{ writable, readable \} pair). It simply pipes the stream into the writable side of the supplied pair, and returns the readable side for further use.
    
    Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
  *)
  val get_writable: t -> W.t WritableStream.t [@@js.get "writable"]
  
  (**
    Provides a convenient, chainable way of piping this readable stream through a transform stream (or any other \{ writable, readable \} pair). It simply pipes the stream into the writable side of the supplied pair, and returns the readable side for further use.
    
    Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
  *)
  val set_writable: t -> W.t WritableStream.t -> unit [@@js.set "writable"]
end
module Transformer_Make (I : Ojs.T) (O : Ojs.T) : sig
  type ('I, 'O) parent = ('I, 'O) Transformer.t
  type t = (I.t, O.t) parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_flush: t -> O.t TransformerFlushCallback.t option [@@js.get "flush"]
  val set_flush: t -> O.t TransformerFlushCallback.t -> unit [@@js.set "flush"]
  val get_readableType: t -> undefined [@@js.get "readableType"]
  val set_readableType: t -> undefined -> unit [@@js.set "readableType"]
  val get_start: t -> O.t TransformerStartCallback.t option [@@js.get "start"]
  val set_start: t -> O.t TransformerStartCallback.t -> unit [@@js.set "start"]
  val get_transform: t -> (I.t, O.t) TransformerTransformCallback.t option [@@js.get "transform"]
  val set_transform: t -> (I.t, O.t) TransformerTransformCallback.t -> unit [@@js.set "transform"]
  val get_writableType: t -> undefined [@@js.get "writableType"]
  val set_writableType: t -> undefined -> unit [@@js.set "writableType"]
end
module UnderlyingDefaultSource_Make (R : Ojs.T) : sig
  type 'R parent = 'R UnderlyingDefaultSource.t
  type t = R.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_cancel: t -> UnderlyingSourceCancelCallback.t option [@@js.get "cancel"]
  val set_cancel: t -> UnderlyingSourceCancelCallback.t -> unit [@@js.set "cancel"]
  val get_pull: t -> (R.t ReadableStreamDefaultController.t -> (unit, unit PromiseLike.t) union2) option [@@js.get "pull"]
  val set_pull: t -> (R.t ReadableStreamDefaultController.t -> ([`U1 of unit | `U2 of unit PromiseLike.t] [@js.union])) -> unit [@@js.set "pull"]
  val get_start: t -> (R.t ReadableStreamDefaultController.t -> any) option [@@js.get "start"]
  val set_start: t -> (R.t ReadableStreamDefaultController.t -> any) -> unit [@@js.set "start"]
  val get_type: t -> undefined [@@js.get "type"]
  val set_type: t -> undefined -> unit [@@js.set "type"]
end
module UnderlyingSink_Make (W : Ojs.T) : sig
  type 'W parent = 'W UnderlyingSink.t
  type t = W.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_abort: t -> UnderlyingSinkAbortCallback.t option [@@js.get "abort"]
  val set_abort: t -> UnderlyingSinkAbortCallback.t -> unit [@@js.set "abort"]
  val get_close: t -> UnderlyingSinkCloseCallback.t option [@@js.get "close"]
  val set_close: t -> UnderlyingSinkCloseCallback.t -> unit [@@js.set "close"]
  val get_start: t -> UnderlyingSinkStartCallback.t option [@@js.get "start"]
  val set_start: t -> UnderlyingSinkStartCallback.t -> unit [@@js.set "start"]
  val get_type: t -> undefined [@@js.get "type"]
  val set_type: t -> undefined -> unit [@@js.set "type"]
  val get_write: t -> W.t UnderlyingSinkWriteCallback.t option [@@js.get "write"]
  val set_write: t -> W.t UnderlyingSinkWriteCallback.t -> unit [@@js.set "write"]
end
module UnderlyingSource_Make (R : Ojs.T) : sig
  type 'R parent = 'R UnderlyingSource.t
  type t = R.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_autoAllocateChunkSize: t -> float option [@@js.get "autoAllocateChunkSize"]
  val set_autoAllocateChunkSize: t -> float -> unit [@@js.set "autoAllocateChunkSize"]
  val get_cancel: t -> UnderlyingSourceCancelCallback.t option [@@js.get "cancel"]
  val set_cancel: t -> UnderlyingSourceCancelCallback.t -> unit [@@js.set "cancel"]
  val get_pull: t -> R.t UnderlyingSourcePullCallback.t option [@@js.get "pull"]
  val set_pull: t -> R.t UnderlyingSourcePullCallback.t -> unit [@@js.set "pull"]
  val get_start: t -> R.t UnderlyingSourceStartCallback.t option [@@js.get "start"]
  val set_start: t -> R.t UnderlyingSourceStartCallback.t -> unit [@@js.set "start"]
  val get_type: t -> ReadableStreamType.t option [@@js.get "type"]
  val set_type: t -> ReadableStreamType.t -> unit [@@js.set "type"]
end
module CustomEvent_Make (T : Ojs.T) : sig
  type 'T parent = 'T CustomEvent.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (**
    Returns any custom data event was created with. Typically used for synthetic events.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomEvent/detail)
  *)
  val get_detail: t -> T.t [@@js.get "detail"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomEvent/initCustomEvent) *)
  val initCustomEvent: t -> type_:string -> ?bubbles:bool -> ?cancelable:bool -> ?detail:T.t -> unit -> unit [@@js.call "initCustomEvent"]
end
module IDBRequest_Make (T : Ojs.T) : sig
  type 'T parent = 'T IDBRequest.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (**
    When a request is completed, returns the error (a DOMException), or null if the request succeeded. Throws a "InvalidStateError" DOMException if the request is still pending.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/error)
  *)
  val get_error: t -> DOMException.t option [@@js.get "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/error_event) *)
  val get_onerror: t -> (this:t -> ev:Event.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/error_event) *)
  val set_onerror: t -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/success_event) *)
  val get_onsuccess: t -> (this:t -> ev:Event.t -> any) option [@@js.get "onsuccess"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/success_event) *)
  val set_onsuccess: t -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onsuccess"]
  
  (**
    Returns "pending" until a request is complete, then returns "done".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/readyState)
  *)
  val get_readyState: t -> IDBRequestReadyState.t [@@js.get "readyState"]
  
  (**
    When a request is completed, returns the result, or undefined if the request failed. Throws a "InvalidStateError" DOMException if the request is still pending.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/result)
  *)
  val get_result: t -> T.t [@@js.get "result"]
  
  (**
    Returns the IDBObjectStore, IDBIndex, or IDBCursor the request was made against, or null if is was an open request.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/source)
  *)
  val get_source: t -> (IDBCursor.t, IDBIndex.t, IDBObjectStore.t) union3 [@@js.get "source"]
  
  (**
    Returns the IDBTransaction the request was made within. If this as an open request, then it returns an upgrade transaction while it is running, or null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/transaction)
  *)
  val get_transaction: t -> IDBTransaction.t option [@@js.get "transaction"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: t -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'IDBRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: t -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: t -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'IDBRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: t -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
end
module MessageEvent_Make (T : Ojs.T) : sig
  type 'T parent = 'T MessageEvent.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/initMessageEvent) *)
  val initMessageEvent: t -> type_:string -> ?bubbles:bool -> ?cancelable:bool -> ?data:any -> ?origin:string -> ?lastEventId:string -> ?source:MessageEventSource.t option -> ?ports:MessagePort.t Iterable.t -> unit -> unit [@@js.call "initMessageEvent"]
  
  (**
    Returns the data of the message.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/data)
  *)
  val get_data: t -> T.t [@@js.get "data"]
  
  (**
    Returns the last event ID string, for server-sent events.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/lastEventId)
  *)
  val get_lastEventId: t -> string [@@js.get "lastEventId"]
  
  (**
    Returns the origin of the message, for server-sent events and cross-document messaging.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/origin)
  *)
  val get_origin: t -> string [@@js.get "origin"]
  
  (**
    Returns the MessagePort array sent with the message, for cross-document messaging and channel messaging.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/ports)
  *)
  val get_ports: t -> MessagePort.t list [@@js.get "ports"]
  
  (**
    Returns the WindowProxy of the source window, for cross-document messaging, and the MessagePort being attached, in the connect event fired at SharedWorkerGlobalScope objects.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/source)
  *)
  val get_source: t -> MessageEventSource.t option [@@js.get "source"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/initMessageEvent) *)
  val initMessageEvent: t -> type_:string -> ?bubbles:bool -> ?cancelable:bool -> ?data:any -> ?origin:string -> ?lastEventId:string -> ?source:MessageEventSource.t option -> ?ports:MessagePort.t list -> unit -> unit [@@js.call "initMessageEvent"]
end
module ProgressEvent_Make (T : Ojs.T) : sig
  type 'T parent = 'T ProgressEvent.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ProgressEvent/lengthComputable) *)
  val get_lengthComputable: t -> bool [@@js.get "lengthComputable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ProgressEvent/loaded) *)
  val get_loaded: t -> float [@@js.get "loaded"]
  
  (**
    Returns the object to which event is dispatched (its target).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/target)
  *)
  val get_target: t -> T.t option [@@js.get "target"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ProgressEvent/total) *)
  val get_total: t -> float [@@js.get "total"]
end
module ReadableStream_Make (R : Ojs.T) : sig
  module AnonymousInterface2 : sig
    type t = private Ojs.t
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_mode: t -> ([`L_s73_byob[@js "byob"]] [@js.enum]) [@@js.get "mode"]
    val set_mode: t -> ([`L_s73_byob[@js "byob"]] [@js.enum]) -> unit [@@js.set "mode"]
    val create: mode:([`L_s73_byob[@js "byob"]] [@js.enum]) -> unit -> t [@@js.builder]
  end
  type 'R parent = 'R ReadableStream.t
  type t = R.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked) *)
  val get_locked: t -> bool [@@js.get "locked"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/cancel) *)
  val cancel: t -> ?reason:any -> unit -> unit Promise.t [@@js.call "cancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader) *)
  val getReader: t -> options:AnonymousInterface2.t -> ReadableStreamBYOBReader.t [@@js.call "getReader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader) *)
  val getReader: t -> R.t ReadableStreamDefaultReader.t [@@js.call "getReader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader) *)
  val getReader: t -> ?options:ReadableStreamGetReaderOptions.t -> unit -> R.t ReadableStreamReader.t [@@js.call "getReader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/pipeThrough) *)
  val pipeThrough: t -> transform:('T, R.t) ReadableWritablePair.t -> ?options:StreamPipeOptions.t -> unit -> 'T parent [@@js.call "pipeThrough"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/pipeTo) *)
  val pipeTo: t -> destination:R.t WritableStream.t -> ?options:StreamPipeOptions.t -> unit -> unit Promise.t [@@js.call "pipeTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/tee) *)
  val tee: t -> (t * t) [@@js.call "tee"]
end
module ReadableStreamDefaultController_Make (R : Ojs.T) : sig
  type 'R parent = 'R ReadableStreamDefaultController.t
  type t = R.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/desiredSize) *)
  val get_desiredSize: t -> float option [@@js.get "desiredSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/close) *)
  val close: t -> unit [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/enqueue) *)
  val enqueue: t -> ?chunk:R.t -> unit -> unit [@@js.call "enqueue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/error) *)
  val error: t -> ?e:any -> unit -> unit [@@js.call "error"]
end
module ReadableStreamDefaultReader_Make (R : Ojs.T) : sig
  type 'R parent = 'R ReadableStreamDefaultReader.t
  type t = R.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader/read) *)
  val read: t -> R.t ReadableStreamReadResult.t Promise.t [@@js.call "read"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader/releaseLock) *)
  val releaseLock: t -> unit [@@js.call "releaseLock"]
end
module TransformStream_Make (I : Ojs.T) (O : Ojs.T) : sig
  type ('I, 'O) parent = ('I, 'O) TransformStream.t
  type t = (I.t, O.t) parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStream/readable) *)
  val get_readable: t -> O.t ReadableStream.t [@@js.get "readable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStream/writable) *)
  val get_writable: t -> I.t WritableStream.t [@@js.get "writable"]
end
module TransformStreamDefaultController_Make (O : Ojs.T) : sig
  type 'O parent = 'O TransformStreamDefaultController.t
  type t = O.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/desiredSize) *)
  val get_desiredSize: t -> float option [@@js.get "desiredSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/enqueue) *)
  val enqueue: t -> ?chunk:O.t -> unit -> unit [@@js.call "enqueue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/error) *)
  val error: t -> ?reason:any -> unit -> unit [@@js.call "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/terminate) *)
  val terminate: t -> unit [@@js.call "terminate"]
end
module WritableStream_Make (W : Ojs.T) : sig
  type 'W parent = 'W WritableStream.t
  type t = W.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream/locked) *)
  val get_locked: t -> bool [@@js.get "locked"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream/abort) *)
  val abort: t -> ?reason:any -> unit -> unit Promise.t [@@js.call "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream/close) *)
  val close: t -> unit Promise.t [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream/getWriter) *)
  val getWriter: t -> W.t WritableStreamDefaultWriter.t [@@js.call "getWriter"]
end
module WritableStreamDefaultWriter_Make (W : Ojs.T) : sig
  type 'W parent = 'W WritableStreamDefaultWriter.t
  type t = W.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/closed) *)
  val get_closed: t -> undefined Promise.t [@@js.get "closed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/desiredSize) *)
  val get_desiredSize: t -> float option [@@js.get "desiredSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/ready) *)
  val get_ready: t -> undefined Promise.t [@@js.get "ready"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/abort) *)
  val abort: t -> ?reason:any -> unit -> unit Promise.t [@@js.call "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/close) *)
  val close: t -> unit Promise.t [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/releaseLock) *)
  val releaseLock: t -> unit [@@js.call "releaseLock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/write) *)
  val write: t -> ?chunk:W.t -> unit -> unit Promise.t [@@js.call "write"]
end
module QueuingStrategySize_Make (T : Ojs.T) : sig
  type 'T parent = 'T QueuingStrategySize.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val apply: t -> chunk:T.t -> float [@@js.apply]
end
module TransformerFlushCallback_Make (O : Ojs.T) : sig
  type 'O parent = 'O TransformerFlushCallback.t
  type t = O.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val apply: t -> controller:O.t TransformStreamDefaultController.t -> (unit, unit PromiseLike.t) union2 [@@js.apply]
end
module TransformerStartCallback_Make (O : Ojs.T) : sig
  type 'O parent = 'O TransformerStartCallback.t
  type t = O.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val apply: t -> controller:O.t TransformStreamDefaultController.t -> any [@@js.apply]
end
module TransformerTransformCallback_Make (I : Ojs.T) (O : Ojs.T) : sig
  type ('I, 'O) parent = ('I, 'O) TransformerTransformCallback.t
  type t = (I.t, O.t) parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val apply: t -> chunk:I.t -> controller:O.t TransformStreamDefaultController.t -> (unit, unit PromiseLike.t) union2 [@@js.apply]
end
module UnderlyingSinkWriteCallback_Make (W : Ojs.T) : sig
  type 'W parent = 'W UnderlyingSinkWriteCallback.t
  type t = W.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val apply: t -> chunk:W.t -> controller:WritableStreamDefaultController.t -> (unit, unit PromiseLike.t) union2 [@@js.apply]
end
module UnderlyingSourcePullCallback_Make (R : Ojs.T) : sig
  type 'R parent = 'R UnderlyingSourcePullCallback.t
  type t = R.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val apply: t -> controller:R.t ReadableStreamController.t -> (unit, unit PromiseLike.t) union2 [@@js.apply]
end
module UnderlyingSourceStartCallback_Make (R : Ojs.T) : sig
  type 'R parent = 'R UnderlyingSourceStartCallback.t
  type t = R.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val apply: t -> controller:R.t ReadableStreamController.t -> any [@@js.apply]
end

(**
  Fetches each URL in urls, executes them one-by-one in the order they are passed, and then returns (or throws if something went amiss).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/importScripts)
*)
val importScripts: (string list [@js.variadic]) -> unit [@@js.global "importScripts"]

(**
  The `console` module provides a simple debugging console that is similar to the
  JavaScript console mechanism provided by web browsers.
  
  The module exports two specific components:
  
  * A `Console` class with methods such as `console.log()`, `console.error()` and`console.warn()` that can be used to write to any Node.js stream.
  * A global `console` instance configured to write to `process.stdout` and `process.stderr`. The global `console` can be used without calling`require('console')`.
  
  _**Warning**_: The global console object's methods are neither consistently
  synchronous like the browser APIs they resemble, nor are they consistently
  asynchronous like all other Node.js streams. See the `note on process I/O` for
  more information.
  
  Example using the global `console`:
  
  ```js
  console.log('hello world');
  // Prints: hello world, to stdout
  console.log('hello %s', 'world');
  // Prints: hello world, to stdout
  console.error(new Error('Whoops, something bad happened'));
  // Prints error message and stack trace to stderr:
  //   Error: Whoops, something bad happened
  //     at \[eval\]:5:15
  //     at Script.runInThisContext (node:vm:132:18)
  //     at Object.runInThisContext (node:vm:309:38)
  //     at node:internal/process/execution:77:19
  //     at \[eval\]-wrapper:6:22
  //     at evalScript (node:internal/process/execution:76:60)
  //     at node:internal/main/eval_string:23:3
  
  const name = 'Will Robinson';
  console.warn(`Danger $\{name\}! Danger!`);
  // Prints: Danger Will Robinson! Danger!, to stderr
  ```
  
  Example using the `Console` class:
  
  ```js
  const out = getStreamSomehow();
  const err = getStreamSomehow();
  const myConsole = new console.Console(out, err);
  
  myConsole.log('hello world');
  // Prints: hello world, to out
  myConsole.log('hello %s', 'world');
  // Prints: hello world, to out
  myConsole.error(new Error('Whoops, something bad happened'));
  // Prints: \[Error: Whoops, something bad happened\], to err
  
  const name = 'Will Robinson';
  myConsole.warn(`Danger $\{name\}! Danger!`);
  // Prints: Danger Will Robinson! Danger!, to err
  ```
*)
val console: unit -> Console.t [@@js.get "console"]

(**
  Returns dedicatedWorkerGlobal's name, i.e. the value given to the Worker constructor. Primarily useful for debugging.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/name)
*)
val name: unit -> string [@@js.get "name"]

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/message_event)
  
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/message_event)
*)
val onmessage: unit -> (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/messageerror_event)
  
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/messageerror_event)
*)
val onmessageerror: unit -> (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessageerror"]

(**
  Aborts dedicatedWorkerGlobal.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/close)
*)
val close: unit -> unit [@@js.global "close"]

(**
  Clones message and transmits it to the Worker object associated with dedicatedWorkerGlobal. transfer can be passed as a list of objects that are to be transferred rather than cloned.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/postMessage)
*)
val postMessage: message:any -> transfer:Transferable.t list -> unit [@@js.global "postMessage"]

(**
  Posts a message to the given window. Messages can be structured objects, e.g. nested objects and arrays, can contain JavaScript values (strings, numbers, Date objects, etc), and can contain certain data objects such as File Blob, FileList, and ArrayBuffer objects.
  
  Objects listed in the transfer member of options are transferred, not just cloned, meaning that they are no longer usable on the sending side.
  
  A target origin can be specified using the targetOrigin member of options. If not provided, it defaults to "/". This default restricts the message to same-origin targets only.
  
  If the origin of the target window doesn't match the given target origin, the message is discarded, to avoid information leakage. To send the message to the target regardless of origin, set the target origin to "*".
  
  Throws a "DataCloneError" DOMException if transfer array contains duplicate objects or if message could not be cloned.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/postMessage)
  
  
  Clones message and transmits it to the Worker object associated with dedicatedWorkerGlobal. transfer can be passed as a list of objects that are to be transferred rather than cloned.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/postMessage)
*)
val postMessage': message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit [@@js.global "postMessage"]

(**
  Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent)
*)
val dispatchEvent: Event.t -> bool [@@js.global "dispatchEvent"]

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/location)
  
  
  Returns workerGlobal's WorkerLocation object.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/location)
*)
val location: unit -> WorkerLocation.t [@@js.get "location"]

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/navigator)
  
  
  Returns workerGlobal's WorkerNavigator object.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/navigator)
*)
val navigator: unit -> WorkerNavigator.t [@@js.get "navigator"]

(**
  Fires when an error occurs during object loading.
  
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/error_event)
*)
val onerror: unit -> (this:DedicatedWorkerGlobalScope.t -> ev:ErrorEvent.t -> any) option [@@js.get "onerror"]

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/languagechange_event)
  
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/languagechange_event)
*)
val onlanguagechange: unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) option [@@js.get "onlanguagechange"]

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/offline_event)
  
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/offline_event)
*)
val onoffline: unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) option [@@js.get "onoffline"]

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/online_event)
  
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/online_event)
*)
val ononline: unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) option [@@js.get "ononline"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/rejectionhandled_event) *)
val onrejectionhandled: unit -> (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any) option [@@js.get "onrejectionhandled"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/unhandledrejection_event) *)
val onunhandledrejection: unit -> (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any) option [@@js.get "onunhandledrejection"]

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/self)
  
  
  Returns workerGlobal.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/self)
*)
val self: unit -> (WorkerGlobalScope.t, (* FIXME: unknown type 'typeof globalThis' *)any) intersection2 [@@js.get "self"]

(**
  Fetches each URL in urls, executes them one-by-one in the order they are passed, and then returns (or throws if something went amiss).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/importScripts)
*)
val importScripts': (([`String of string | `Other of URL.t] [@js.union on_field "dummy"]) Primitive.t list [@js.variadic]) -> unit [@@js.global "importScripts"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fonts) *)
val fonts: unit -> FontFaceSet.t [@@js.get "fonts"]

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/caches)
*)
val caches: unit -> CacheStorage.t [@@js.get "caches"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/crossOriginIsolated) *)
val crossOriginIsolated: unit -> bool [@@js.get "crossOriginIsolated"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/crypto_property) *)
val crypto: unit -> Crypto.t [@@js.get "crypto"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/indexedDB) *)
val indexedDB: unit -> IDBFactory.t [@@js.get "indexedDB"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/isSecureContext) *)
val isSecureContext: unit -> bool [@@js.get "isSecureContext"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/origin) *)
val origin: unit -> string [@@js.get "origin"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/performance_property) *)
val performance: unit -> Performance.t [@@js.get "performance"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/atob) *)
val atob: string -> string [@@js.global "atob"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/btoa) *)
val btoa: string -> string [@@js.global "btoa"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/clearInterval) *)
val clearInterval: ([`Number of float | `Undefined] [@js.union on_field "dummy"]) Primitive.t -> unit [@@js.global "clearInterval"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/clearTimeout) *)
val clearTimeout: ([`Number of float | `Undefined] [@js.union on_field "dummy"]) Primitive.t -> unit [@@js.global "clearTimeout"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/createImageBitmap) *)
val createImageBitmap: image:ImageBitmapSource.t -> ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t [@@js.global "createImageBitmap"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/createImageBitmap) *)
val createImageBitmap': image:ImageBitmapSource.t -> sx:float -> sy:float -> sw:float -> sh:float -> ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t [@@js.global "createImageBitmap"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/fetch) *)
val fetch: input:(RequestInfo.t, URL.t) union2 -> ?init:RequestInit.t -> unit -> Response.t Promise.t [@@js.global "fetch"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/queueMicrotask) *)
val queueMicrotask: VoidFunction.t -> unit [@@js.global "queueMicrotask"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/reportError) *)
val reportError: any -> unit [@@js.global "reportError"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/setInterval) *)
val setInterval: handler:TimerHandler.t -> ?timeout:float -> arguments:(any list [@js.variadic]) -> unit -> float [@@js.global "setInterval"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/setTimeout) *)
val setTimeout: handler:TimerHandler.t -> ?timeout:float -> arguments:(any list [@js.variadic]) -> unit -> float [@@js.global "setTimeout"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/structuredClone) *)
val structuredClone: value:'T -> ?options:StructuredSerializeOptions.t -> unit -> 'T [@@js.global "structuredClone"]
val cancelAnimationFrame: float -> unit [@@js.global "cancelAnimationFrame"]
val requestAnimationFrame: FrameRequestCallback.t -> float [@@js.global "requestAnimationFrame"]
val addEventListener: type_:'K -> listener:(this:DedicatedWorkerGlobalScope.t -> ev:(* FIXME: unknown type 'DedicatedWorkerGlobalScopeEventMap[K]' *)any -> any) -> ?options:([`Boolean of bool | `Other of AddEventListenerOptions.t] [@js.union on_field "dummy"]) Primitive.t -> unit -> unit [@@js.global "addEventListener"]
val addEventListener': type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`Boolean of bool | `Other of AddEventListenerOptions.t] [@js.union on_field "dummy"]) Primitive.t -> unit -> unit [@@js.global "addEventListener"]
val removeEventListener: type_:'K -> listener:(this:DedicatedWorkerGlobalScope.t -> ev:(* FIXME: unknown type 'DedicatedWorkerGlobalScopeEventMap[K]' *)any -> any) -> ?options:([`Boolean of bool | `Other of EventListenerOptions.t] [@js.union on_field "dummy"]) Primitive.t -> unit -> unit [@@js.global "removeEventListener"]
val removeEventListener': type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`Boolean of bool | `Other of EventListenerOptions.t] [@js.union on_field "dummy"]) Primitive.t -> unit -> unit [@@js.global "removeEventListener"]